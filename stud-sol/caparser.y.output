Terminals unused in grammar

    ":"
    "sizeof"
    "in"
    "let"
    "fn"


Grammar

    0 $accept: translation_unit "end of file"

    1 translation_unit: external_declaration
    2                 | translation_unit external_declaration

    3 external_declaration: function_definition
    4                     | enumtype_decl_specifier

    5 new_lines: "NEW_LINE"
    6          | new_lines "NEW_LINE"

    7 expression_end: new_lines
    8               | "end of file"

    9 function_definition: function_definition_head expression
   10                    | function_definition_info ";" expression_end

   11 function_definition_info: declaration_specifiers declarator

   12 function_definition_head: function_definition_info "="

   13 primary_expression: "integer literal"
   14                   | "string literal"
   15                   | "(" expression_body ")"

   16 postfix_expression: primary_expression
   17                   | "identifier" "(" argument_expression_list ")"
   18                   | "identifier"

   19 argument_expression_list: assignment_expression
   20                         | argument_expression_list "," assignment_expression
   21                         | ε

   22 unary_expression: postfix_expression
   23                 | unary_operator cast_expression

   24 unary_operator: "&"
   25               | "*"
   26               | "+ or -"
   27               | "!"

   28 cast_expression: unary_expression

   29 multiplicative_expression: cast_expression
   30                          | multiplicative_expression "*" cast_expression
   31                          | multiplicative_expression "/ or %" cast_expression

   32 additive_expression: multiplicative_expression
   33                    | additive_expression "+ or -" multiplicative_expression

   34 relational_expression: additive_expression
   35                      | relational_expression "<, >, <=, or >=" additive_expression

   36 equality_expression: relational_expression
   37                    | equality_expression "== or !=" relational_expression

   38 logical_and_expression: equality_expression
   39                       | logical_and_expression "&&" equality_expression

   40 logical_or_expression: logical_and_expression
   41                      | logical_or_expression "||" logical_and_expression

   42 assignment_expression: logical_or_expression
   43                      | unary_expression assignment_operator assignment_expression

   44 assignment_operator: "="

   45 match_head: "match" assignment_expression "->" declaration_specifiers

   46 match_expression: assignment_expression
   47                 | match_binders_list block_end

   48 match_binders_list: match_binders_list_head_start expression_body
   49                   | match_binders_list_head expression_body

   50 match_binders_list_head_start: match_head block_start match_binder_head

   51 match_binders_list_head: match_binders_list match_binder_head

   52 match_binder_head: "|" match_binder_definer "->"

   53 match_binder_definer: "identifier" "(" match_binder_arguments_list ")"
   54                     | "identifier"

   55 match_binder_arguments_list: "identifier"
   56                            | match_binder_arguments_list "," "identifier"

   57 expression_body: match_expression
   58                | flow_expression

   59 expression: expression_body expression_end

   60 declaration_specifiers: declaration_specifier
   61                       | declaration_specifier declaration_specifiers

   62 declaration_specifier: type_specifier_qualifier
   63                      | "fip"

   64 type_specifier: "_Bool, char, or int"
   65               | declared_type_name
   66               | typedef_name

   67 declared_type_name: "type" "identifier"

   68 enumtype_decl_head: "type" "identifier"

   69 block_start: "{"
   70            | "{" new_lines

   71 block_end: "}"
   72          | new_lines "}"

   73 enumtype_decl_specifier: enumtype_decl_head block_start member_types_declaration_list block_end new_lines

   74 member_types_declaration_list: member_types_declaration
   75                              | member_types_declaration_list member_types_declaration

   76 member_types_declaration: "identifier" "(" member_declaration_list ")" ";"
   77                         | "identifier" ";"

   78 member_declaration_list: member_declaration
   79                        | member_declaration_list "," member_declaration

   80 member_declaration: specifier_qualifier_list member_declarator

   81 specifier_qualifier_list: type_specifier_qualifier
   82                         | type_specifier_qualifier specifier_qualifier_list

   83 type_specifier_qualifier: type_specifier

   84 member_declarator: declarator

   85 declarator: pointer direct_declarator
   86           | direct_declarator

   87 pointer: "*" pointer
   88        | "*"

   89 direct_declarator: "identifier"
   90                  | function_declarator

   91 function_declarator: direct_declarator "[" parameter_type_list "]"

   92 parameter_type_list: parameter_list
   93                    | ε

   94 parameter_list: parameter_declaration
   95               | parameter_list "," parameter_declaration

   96 parameter_declaration: declaration_specifiers declarator
   97                      | declaration_specifiers

   98 typedef_name: "type identifier"

   99 expression_statement: match_expression ";"

  100 if_expression_head: "if" "(" expression_body ")"

  101 if_non_split_expression: if_expression_head non_split_expression

  102 if_non_split_expression_else: if_non_split_expression "else"

  103 flow_expression: non_split_expression
  104                | split_expression

  105 non_split_expression: if_non_split_expression_else non_split_expression
  106                     | expression_statement

  107 split_expression: if_expression_head expression_body
  108                 | if_non_split_expression_else split_expression


Terminals, with rules where they appear

    "end of file" (0) 0 8
    error (256)
    "[" (258) 91
    "]" (259) 91
    "(" (260) 15 17 53 76 100
    ")" (261) 15 17 53 76 100
    "NEW_LINE" (262) 5 6
    "->" (263) 45 52
    "," (264) 20 56 79 95
    "&" (265) 24
    "|" (266) 52
    "*" (267) 25 30 87 88
    "+ or -" <cecko::gt_addop> (268) 26 33
    "!" (269) 27
    "/ or %" <cecko::gt_divop> (270) 31
    "<, >, <=, or >=" <cecko::gt_cmpo> (271) 35
    "== or !=" <cecko::gt_cmpe> (272) 37
    "&&" (273) 39
    "||" (274) 41
    "=" (275) 12 44
    ";" (276) 10 76 77 99
    ":" (277)
    "{" (278) 69 70
    "}" (279) 71 72
    "type" (280) 67 68
    "_Bool, char, or int" <cecko::gt_etype> (281) 64
    "sizeof" (282)
    "in" (283)
    "let" (284)
    "match" <cecko::match_type> (285) 45
    "fip" (286) 63
    "fn" (287)
    "if" (288) 100
    "else" (289) 102
    "identifier" <cecko::CIName> (290) 17 18 53 54 55 56 67 68 76 77 89
    "type identifier" <cecko::CIName> (291) 98
    "integer literal" <int> (292) 13
    "string literal" <cecko::CIName> (293) 14


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    translation_unit (40)
        on left: 1 2
        on right: 0 2
    external_declaration (41)
        on left: 3 4
        on right: 1 2
    new_lines (42)
        on left: 5 6
        on right: 6 7 70 72 73
    expression_end (43)
        on left: 7 8
        on right: 10 59
    function_definition (44)
        on left: 9 10
        on right: 3
    function_definition_info <casem::FunctionDeclarationData> (45)
        on left: 11
        on right: 10 12
    function_definition_head <casem::FunctionDeclarationData> (46)
        on left: 12
        on right: 9
    primary_expression <casem::InstructionWrapper> (47)
        on left: 13 14 15
        on right: 16
    postfix_expression <casem::InstructionWrapper> (48)
        on left: 16 17 18
        on right: 22
    argument_expression_list <casem::InstructionArray> (49)
        on left: 19 20 21
        on right: 17 20
    unary_expression <casem::InstructionWrapper> (50)
        on left: 22 23
        on right: 28 43
    unary_operator <casem::UnaryOperator> (51)
        on left: 24 25 26 27
        on right: 23
    cast_expression <casem::InstructionWrapper> (52)
        on left: 28
        on right: 23 29 30 31
    multiplicative_expression <casem::InstructionWrapper> (53)
        on left: 29 30 31
        on right: 30 31 32 33
    additive_expression <casem::InstructionWrapper> (54)
        on left: 32 33
        on right: 33 34 35
    relational_expression <casem::InstructionWrapper> (55)
        on left: 34 35
        on right: 35 36 37
    equality_expression <casem::InstructionWrapper> (56)
        on left: 36 37
        on right: 37 38 39
    logical_and_expression <casem::InstructionWrapper> (57)
        on left: 38 39
        on right: 39 40 41
    logical_or_expression <casem::InstructionWrapper> (58)
        on left: 40 41
        on right: 41 42
    assignment_expression <casem::InstructionWrapper> (59)
        on left: 42 43
        on right: 19 20 43 45 46
    assignment_operator <cecko::gt_cass> (60)
        on left: 44
        on right: 43
    match_head <casem::MatchWrapper> (61)
        on left: 45
        on right: 50
    match_expression <casem::InstructionWrapper> (62)
        on left: 46 47
        on right: 57 99
    match_binders_list <casem::MatchWrapper> (63)
        on left: 48 49
        on right: 47 51
    match_binders_list_head_start <casem::MatchBinderListHeadData> (64)
        on left: 50
        on right: 48
    match_binders_list_head <casem::MatchBinderListHeadData> (65)
        on left: 51
        on right: 49
    match_binder_head <casem::MatchBinderChackerData> (66)
        on left: 52
        on right: 50 51
    match_binder_definer <casem::MatchBinderChackerData> (67)
        on left: 53 54
        on right: 52
    match_binder_arguments_list <std::vector<cecko::CIName>> (68)
        on left: 55 56
        on right: 53 56
    expression_body <casem::InstructionWrapper> (69)
        on left: 57 58
        on right: 15 48 49 59 100 107
    expression <casem::InstructionWrapper> (70)
        on left: 59
        on right: 9
    declaration_specifiers <casem::CKTypeRefDefPack> (71)
        on left: 60 61
        on right: 11 45 61 96 97
    declaration_specifier <casem::CKTypeRefDefPack> (72)
        on left: 62 63
        on right: 60 61
    type_specifier <cecko::CKTypeSafeObs> (73)
        on left: 64 65 66
        on right: 83
    declared_type_name <cecko::CIName> (74)
        on left: 67
        on right: 65
    enumtype_decl_head <casem::TaggedTypeDecl> (75)
        on left: 68
        on right: 73
    block_start (76)
        on left: 69 70
        on right: 50 73
    block_end (77)
        on left: 71 72
        on right: 47 73
    enumtype_decl_specifier <cecko::CKStructTypeSafeObs> (78)
        on left: 73
        on right: 4
    member_types_declaration_list <casem::StructObservers> (79)
        on left: 74 75
        on right: 73 75
    member_types_declaration <cecko::CKStructTypeSafeObs> (80)
        on left: 76 77
        on right: 74 75
    member_declaration_list <cecko::CKStructItemArray> (81)
        on left: 78 79
        on right: 76 79
    member_declaration <cecko::CKStructItemArray> (82)
        on left: 80
        on right: 78 79
    specifier_qualifier_list <casem::CKTypeRefDefPack> (83)
        on left: 81 82
        on right: 80 82
    type_specifier_qualifier <casem::CKTypeRefDefPack> (84)
        on left: 83
        on right: 62 81 82
    member_declarator <casem::TypeRefPack_Action> (85)
        on left: 84
        on right: 80
    declarator <casem::TypeRefPack_Action> (86)
        on left: 85 86
        on right: 11 84 96
    pointer <casem::TypeRefPack_Convertor> (87)
        on left: 87 88
        on right: 85 87
    direct_declarator <casem::TypeRefPack_Action> (88)
        on left: 89 90
        on right: 85 86 91
    function_declarator <casem::TypeRefPack_Action> (89)
        on left: 91
        on right: 90
    parameter_type_list <casem::TRDArray> (90)
        on left: 92 93
        on right: 91
    parameter_list <casem::TRDArray> (91)
        on left: 94 95
        on right: 92 95
    parameter_declaration <casem::CKTypeRefDefPack> (92)
        on left: 96 97
        on right: 94 95
    typedef_name <cecko::CIName> (93)
        on left: 98
        on right: 66
    expression_statement <casem::IfExpressionData> (94)
        on left: 99
        on right: 106
    if_expression_head <casem::IfExpressionData> (95)
        on left: 100
        on right: 101 107
    if_non_split_expression <casem::IfExpressionData> (96)
        on left: 101
        on right: 102
    if_non_split_expression_else <casem::IfExpressionData> (97)
        on left: 102
        on right: 105 108
    flow_expression <casem::IfExpressionData> (98)
        on left: 103 104
        on right: 58
    non_split_expression <casem::IfExpressionData> (99)
        on left: 105 106
        on right: 101 103 105
    split_expression <casem::IfExpressionData> (100)
        on left: 107 108
        on right: 104 108


State 0

    0 $accept: • translation_unit "end of file"

    "type"                 shift, and go to state 1
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    translation_unit          go to state 5
    external_declaration      go to state 6
    function_definition       go to state 7
    function_definition_info  go to state 8
    function_definition_head  go to state 9
    declaration_specifiers    go to state 10
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    enumtype_decl_head        go to state 14
    enumtype_decl_specifier   go to state 15
    type_specifier_qualifier  go to state 16
    typedef_name              go to state 17


State 1

   67 declared_type_name: "type" • "identifier"
   68 enumtype_decl_head: "type" • "identifier"

    "identifier"  shift, and go to state 18


State 2

   64 type_specifier: "_Bool, char, or int" •

    $default  reduce using rule 64 (type_specifier)


State 3

   63 declaration_specifier: "fip" •

    $default  reduce using rule 63 (declaration_specifier)


State 4

   98 typedef_name: "type identifier" •

    $default  reduce using rule 98 (typedef_name)


State 5

    0 $accept: translation_unit • "end of file"
    2 translation_unit: translation_unit • external_declaration

    "end of file"          shift, and go to state 19
    "type"                 shift, and go to state 1
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    external_declaration      go to state 20
    function_definition       go to state 7
    function_definition_info  go to state 8
    function_definition_head  go to state 9
    declaration_specifiers    go to state 10
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    enumtype_decl_head        go to state 14
    enumtype_decl_specifier   go to state 15
    type_specifier_qualifier  go to state 16
    typedef_name              go to state 17


State 6

    1 translation_unit: external_declaration •

    $default  reduce using rule 1 (translation_unit)


State 7

    3 external_declaration: function_definition •

    $default  reduce using rule 3 (external_declaration)


State 8

   10 function_definition: function_definition_info • ";" expression_end
   12 function_definition_head: function_definition_info • "="

    "="  shift, and go to state 21
    ";"  shift, and go to state 22


State 9

    9 function_definition: function_definition_head • expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "match"            shift, and go to state 28
    "if"               shift, and go to state 29
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression             go to state 33
    postfix_expression             go to state 34
    unary_expression               go to state 35
    unary_operator                 go to state 36
    cast_expression                go to state 37
    multiplicative_expression      go to state 38
    additive_expression            go to state 39
    relational_expression          go to state 40
    equality_expression            go to state 41
    logical_and_expression         go to state 42
    logical_or_expression          go to state 43
    assignment_expression          go to state 44
    match_head                     go to state 45
    match_expression               go to state 46
    match_binders_list             go to state 47
    match_binders_list_head_start  go to state 48
    match_binders_list_head        go to state 49
    expression_body                go to state 50
    expression                     go to state 51
    expression_statement           go to state 52
    if_expression_head             go to state 53
    if_non_split_expression        go to state 54
    if_non_split_expression_else   go to state 55
    flow_expression                go to state 56
    non_split_expression           go to state 57
    split_expression               go to state 58


State 10

   11 function_definition_info: declaration_specifiers • declarator

    "*"           shift, and go to state 59
    "identifier"  shift, and go to state 60

    declarator           go to state 61
    pointer              go to state 62
    direct_declarator    go to state 63
    function_declarator  go to state 64


State 11

   60 declaration_specifiers: declaration_specifier •
   61                       | declaration_specifier • declaration_specifiers

    "type"                 shift, and go to state 65
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    $default  reduce using rule 60 (declaration_specifiers)

    declaration_specifiers    go to state 66
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    type_specifier_qualifier  go to state 16
    typedef_name              go to state 17


State 12

   83 type_specifier_qualifier: type_specifier •

    $default  reduce using rule 83 (type_specifier_qualifier)


State 13

   65 type_specifier: declared_type_name •

    $default  reduce using rule 65 (type_specifier)


State 14

   73 enumtype_decl_specifier: enumtype_decl_head • block_start member_types_declaration_list block_end new_lines

    "{"  shift, and go to state 67

    block_start  go to state 68


State 15

    4 external_declaration: enumtype_decl_specifier •

    $default  reduce using rule 4 (external_declaration)


State 16

   62 declaration_specifier: type_specifier_qualifier •

    $default  reduce using rule 62 (declaration_specifier)


State 17

   66 type_specifier: typedef_name •

    $default  reduce using rule 66 (type_specifier)


State 18

   67 declared_type_name: "type" "identifier" •
   68 enumtype_decl_head: "type" "identifier" •

    "{"       reduce using rule 68 (enumtype_decl_head)
    $default  reduce using rule 67 (declared_type_name)


State 19

    0 $accept: translation_unit "end of file" •

    $default  accept


State 20

    2 translation_unit: translation_unit external_declaration •

    $default  reduce using rule 2 (translation_unit)


State 21

   12 function_definition_head: function_definition_info "=" •

    $default  reduce using rule 12 (function_definition_head)


State 22

   10 function_definition: function_definition_info ";" • expression_end

    "end of file"  shift, and go to state 69
    "NEW_LINE"     shift, and go to state 70

    new_lines       go to state 71
    expression_end  go to state 72


State 23

   15 primary_expression: "(" • expression_body ")"

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "match"            shift, and go to state 28
    "if"               shift, and go to state 29
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression             go to state 33
    postfix_expression             go to state 34
    unary_expression               go to state 35
    unary_operator                 go to state 36
    cast_expression                go to state 37
    multiplicative_expression      go to state 38
    additive_expression            go to state 39
    relational_expression          go to state 40
    equality_expression            go to state 41
    logical_and_expression         go to state 42
    logical_or_expression          go to state 43
    assignment_expression          go to state 44
    match_head                     go to state 45
    match_expression               go to state 46
    match_binders_list             go to state 47
    match_binders_list_head_start  go to state 48
    match_binders_list_head        go to state 49
    expression_body                go to state 73
    expression_statement           go to state 52
    if_expression_head             go to state 53
    if_non_split_expression        go to state 54
    if_non_split_expression_else   go to state 55
    flow_expression                go to state 56
    non_split_expression           go to state 57
    split_expression               go to state 58


State 24

   24 unary_operator: "&" •

    $default  reduce using rule 24 (unary_operator)


State 25

   25 unary_operator: "*" •

    $default  reduce using rule 25 (unary_operator)


State 26

   26 unary_operator: "+ or -" •

    $default  reduce using rule 26 (unary_operator)


State 27

   27 unary_operator: "!" •

    $default  reduce using rule 27 (unary_operator)


State 28

   45 match_head: "match" • assignment_expression "->" declaration_specifiers

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_and_expression     go to state 42
    logical_or_expression      go to state 43
    assignment_expression      go to state 74


State 29

  100 if_expression_head: "if" • "(" expression_body ")"

    "("  shift, and go to state 75


State 30

   17 postfix_expression: "identifier" • "(" argument_expression_list ")"
   18                   | "identifier" •

    "("  shift, and go to state 76

    $default  reduce using rule 18 (postfix_expression)


State 31

   13 primary_expression: "integer literal" •

    $default  reduce using rule 13 (primary_expression)


State 32

   14 primary_expression: "string literal" •

    $default  reduce using rule 14 (primary_expression)


State 33

   16 postfix_expression: primary_expression •

    $default  reduce using rule 16 (postfix_expression)


State 34

   22 unary_expression: postfix_expression •

    $default  reduce using rule 22 (unary_expression)


State 35

   28 cast_expression: unary_expression •
   43 assignment_expression: unary_expression • assignment_operator assignment_expression

    "="  shift, and go to state 77

    $default  reduce using rule 28 (cast_expression)

    assignment_operator  go to state 78


State 36

   23 unary_expression: unary_operator • cast_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression  go to state 33
    postfix_expression  go to state 34
    unary_expression    go to state 79
    unary_operator      go to state 36
    cast_expression     go to state 80


State 37

   29 multiplicative_expression: cast_expression •

    $default  reduce using rule 29 (multiplicative_expression)


State 38

   30 multiplicative_expression: multiplicative_expression • "*" cast_expression
   31                          | multiplicative_expression • "/ or %" cast_expression
   32 additive_expression: multiplicative_expression •

    "*"       shift, and go to state 81
    "/ or %"  shift, and go to state 82

    $default  reduce using rule 32 (additive_expression)


State 39

   33 additive_expression: additive_expression • "+ or -" multiplicative_expression
   34 relational_expression: additive_expression •

    "+ or -"  shift, and go to state 83

    $default  reduce using rule 34 (relational_expression)


State 40

   35 relational_expression: relational_expression • "<, >, <=, or >=" additive_expression
   36 equality_expression: relational_expression •

    "<, >, <=, or >="  shift, and go to state 84

    $default  reduce using rule 36 (equality_expression)


State 41

   37 equality_expression: equality_expression • "== or !=" relational_expression
   38 logical_and_expression: equality_expression •

    "== or !="  shift, and go to state 85

    $default  reduce using rule 38 (logical_and_expression)


State 42

   39 logical_and_expression: logical_and_expression • "&&" equality_expression
   40 logical_or_expression: logical_and_expression •

    "&&"  shift, and go to state 86

    $default  reduce using rule 40 (logical_or_expression)


State 43

   41 logical_or_expression: logical_or_expression • "||" logical_and_expression
   42 assignment_expression: logical_or_expression •

    "||"  shift, and go to state 87

    $default  reduce using rule 42 (assignment_expression)


State 44

   46 match_expression: assignment_expression •

    $default  reduce using rule 46 (match_expression)


State 45

   50 match_binders_list_head_start: match_head • block_start match_binder_head

    "{"  shift, and go to state 67

    block_start  go to state 88


State 46

   57 expression_body: match_expression •
   99 expression_statement: match_expression • ";"

    ";"  shift, and go to state 89

    $default  reduce using rule 57 (expression_body)


State 47

   47 match_expression: match_binders_list • block_end
   51 match_binders_list_head: match_binders_list • match_binder_head

    "NEW_LINE"  shift, and go to state 70
    "|"         shift, and go to state 90
    "}"         shift, and go to state 91

    new_lines          go to state 92
    match_binder_head  go to state 93
    block_end          go to state 94


State 48

   48 match_binders_list: match_binders_list_head_start • expression_body

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "match"            shift, and go to state 28
    "if"               shift, and go to state 29
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression             go to state 33
    postfix_expression             go to state 34
    unary_expression               go to state 35
    unary_operator                 go to state 36
    cast_expression                go to state 37
    multiplicative_expression      go to state 38
    additive_expression            go to state 39
    relational_expression          go to state 40
    equality_expression            go to state 41
    logical_and_expression         go to state 42
    logical_or_expression          go to state 43
    assignment_expression          go to state 44
    match_head                     go to state 45
    match_expression               go to state 46
    match_binders_list             go to state 47
    match_binders_list_head_start  go to state 48
    match_binders_list_head        go to state 49
    expression_body                go to state 95
    expression_statement           go to state 52
    if_expression_head             go to state 53
    if_non_split_expression        go to state 54
    if_non_split_expression_else   go to state 55
    flow_expression                go to state 56
    non_split_expression           go to state 57
    split_expression               go to state 58


State 49

   49 match_binders_list: match_binders_list_head • expression_body

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "match"            shift, and go to state 28
    "if"               shift, and go to state 29
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression             go to state 33
    postfix_expression             go to state 34
    unary_expression               go to state 35
    unary_operator                 go to state 36
    cast_expression                go to state 37
    multiplicative_expression      go to state 38
    additive_expression            go to state 39
    relational_expression          go to state 40
    equality_expression            go to state 41
    logical_and_expression         go to state 42
    logical_or_expression          go to state 43
    assignment_expression          go to state 44
    match_head                     go to state 45
    match_expression               go to state 46
    match_binders_list             go to state 47
    match_binders_list_head_start  go to state 48
    match_binders_list_head        go to state 49
    expression_body                go to state 96
    expression_statement           go to state 52
    if_expression_head             go to state 53
    if_non_split_expression        go to state 54
    if_non_split_expression_else   go to state 55
    flow_expression                go to state 56
    non_split_expression           go to state 57
    split_expression               go to state 58


State 50

   59 expression: expression_body • expression_end

    "end of file"  shift, and go to state 69
    "NEW_LINE"     shift, and go to state 70

    new_lines       go to state 71
    expression_end  go to state 97


State 51

    9 function_definition: function_definition_head expression •

    $default  reduce using rule 9 (function_definition)


State 52

  106 non_split_expression: expression_statement •

    $default  reduce using rule 106 (non_split_expression)


State 53

  101 if_non_split_expression: if_expression_head • non_split_expression
  107 split_expression: if_expression_head • expression_body

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "match"            shift, and go to state 28
    "if"               shift, and go to state 29
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression             go to state 33
    postfix_expression             go to state 34
    unary_expression               go to state 35
    unary_operator                 go to state 36
    cast_expression                go to state 37
    multiplicative_expression      go to state 38
    additive_expression            go to state 39
    relational_expression          go to state 40
    equality_expression            go to state 41
    logical_and_expression         go to state 42
    logical_or_expression          go to state 43
    assignment_expression          go to state 44
    match_head                     go to state 45
    match_expression               go to state 46
    match_binders_list             go to state 47
    match_binders_list_head_start  go to state 48
    match_binders_list_head        go to state 49
    expression_body                go to state 98
    expression_statement           go to state 52
    if_expression_head             go to state 53
    if_non_split_expression        go to state 54
    if_non_split_expression_else   go to state 55
    flow_expression                go to state 56
    non_split_expression           go to state 99
    split_expression               go to state 58


State 54

  102 if_non_split_expression_else: if_non_split_expression • "else"

    "else"  shift, and go to state 100


State 55

  105 non_split_expression: if_non_split_expression_else • non_split_expression
  108 split_expression: if_non_split_expression_else • split_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "match"            shift, and go to state 28
    "if"               shift, and go to state 29
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression             go to state 33
    postfix_expression             go to state 34
    unary_expression               go to state 35
    unary_operator                 go to state 36
    cast_expression                go to state 37
    multiplicative_expression      go to state 38
    additive_expression            go to state 39
    relational_expression          go to state 40
    equality_expression            go to state 41
    logical_and_expression         go to state 42
    logical_or_expression          go to state 43
    assignment_expression          go to state 44
    match_head                     go to state 45
    match_expression               go to state 101
    match_binders_list             go to state 47
    match_binders_list_head_start  go to state 48
    match_binders_list_head        go to state 49
    expression_statement           go to state 52
    if_expression_head             go to state 53
    if_non_split_expression        go to state 54
    if_non_split_expression_else   go to state 55
    non_split_expression           go to state 102
    split_expression               go to state 103


State 56

   58 expression_body: flow_expression •

    $default  reduce using rule 58 (expression_body)


State 57

  103 flow_expression: non_split_expression •

    $default  reduce using rule 103 (flow_expression)


State 58

  104 flow_expression: split_expression •

    $default  reduce using rule 104 (flow_expression)


State 59

   87 pointer: "*" • pointer
   88        | "*" •

    "*"  shift, and go to state 59

    $default  reduce using rule 88 (pointer)

    pointer  go to state 104


State 60

   89 direct_declarator: "identifier" •

    $default  reduce using rule 89 (direct_declarator)


State 61

   11 function_definition_info: declaration_specifiers declarator •

    $default  reduce using rule 11 (function_definition_info)


State 62

   85 declarator: pointer • direct_declarator

    "identifier"  shift, and go to state 60

    direct_declarator    go to state 105
    function_declarator  go to state 64


State 63

   86 declarator: direct_declarator •
   91 function_declarator: direct_declarator • "[" parameter_type_list "]"

    "["  shift, and go to state 106

    $default  reduce using rule 86 (declarator)


State 64

   90 direct_declarator: function_declarator •

    $default  reduce using rule 90 (direct_declarator)


State 65

   67 declared_type_name: "type" • "identifier"

    "identifier"  shift, and go to state 107


State 66

   61 declaration_specifiers: declaration_specifier declaration_specifiers •

    $default  reduce using rule 61 (declaration_specifiers)


State 67

   69 block_start: "{" •
   70            | "{" • new_lines

    "NEW_LINE"  shift, and go to state 70

    $default  reduce using rule 69 (block_start)

    new_lines  go to state 108


State 68

   73 enumtype_decl_specifier: enumtype_decl_head block_start • member_types_declaration_list block_end new_lines

    "identifier"  shift, and go to state 109

    member_types_declaration_list  go to state 110
    member_types_declaration       go to state 111


State 69

    8 expression_end: "end of file" •

    $default  reduce using rule 8 (expression_end)


State 70

    5 new_lines: "NEW_LINE" •

    $default  reduce using rule 5 (new_lines)


State 71

    6 new_lines: new_lines • "NEW_LINE"
    7 expression_end: new_lines •

    "NEW_LINE"  shift, and go to state 112

    $default  reduce using rule 7 (expression_end)


State 72

   10 function_definition: function_definition_info ";" expression_end •

    $default  reduce using rule 10 (function_definition)


State 73

   15 primary_expression: "(" expression_body • ")"

    ")"  shift, and go to state 113


State 74

   45 match_head: "match" assignment_expression • "->" declaration_specifiers

    "->"  shift, and go to state 114


State 75

  100 if_expression_head: "if" "(" • expression_body ")"

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "match"            shift, and go to state 28
    "if"               shift, and go to state 29
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression             go to state 33
    postfix_expression             go to state 34
    unary_expression               go to state 35
    unary_operator                 go to state 36
    cast_expression                go to state 37
    multiplicative_expression      go to state 38
    additive_expression            go to state 39
    relational_expression          go to state 40
    equality_expression            go to state 41
    logical_and_expression         go to state 42
    logical_or_expression          go to state 43
    assignment_expression          go to state 44
    match_head                     go to state 45
    match_expression               go to state 46
    match_binders_list             go to state 47
    match_binders_list_head_start  go to state 48
    match_binders_list_head        go to state 49
    expression_body                go to state 115
    expression_statement           go to state 52
    if_expression_head             go to state 53
    if_non_split_expression        go to state 54
    if_non_split_expression_else   go to state 55
    flow_expression                go to state 56
    non_split_expression           go to state 57
    split_expression               go to state 58


State 76

   17 postfix_expression: "identifier" "(" • argument_expression_list ")"

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    $default  reduce using rule 21 (argument_expression_list)

    primary_expression         go to state 33
    postfix_expression         go to state 34
    argument_expression_list   go to state 116
    unary_expression           go to state 35
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_and_expression     go to state 42
    logical_or_expression      go to state 43
    assignment_expression      go to state 117


State 77

   44 assignment_operator: "=" •

    $default  reduce using rule 44 (assignment_operator)


State 78

   43 assignment_expression: unary_expression assignment_operator • assignment_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_and_expression     go to state 42
    logical_or_expression      go to state 43
    assignment_expression      go to state 118


State 79

   28 cast_expression: unary_expression •

    $default  reduce using rule 28 (cast_expression)


State 80

   23 unary_expression: unary_operator cast_expression •

    $default  reduce using rule 23 (unary_expression)


State 81

   30 multiplicative_expression: multiplicative_expression "*" • cast_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression  go to state 33
    postfix_expression  go to state 34
    unary_expression    go to state 79
    unary_operator      go to state 36
    cast_expression     go to state 119


State 82

   31 multiplicative_expression: multiplicative_expression "/ or %" • cast_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression  go to state 33
    postfix_expression  go to state 34
    unary_expression    go to state 79
    unary_operator      go to state 36
    cast_expression     go to state 120


State 83

   33 additive_expression: additive_expression "+ or -" • multiplicative_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 79
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 121


State 84

   35 relational_expression: relational_expression "<, >, <=, or >=" • additive_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 79
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 122


State 85

   37 equality_expression: equality_expression "== or !=" • relational_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 79
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 123


State 86

   39 logical_and_expression: logical_and_expression "&&" • equality_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 79
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 124


State 87

   41 logical_or_expression: logical_or_expression "||" • logical_and_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 79
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_and_expression     go to state 125


State 88

   50 match_binders_list_head_start: match_head block_start • match_binder_head

    "|"  shift, and go to state 90

    match_binder_head  go to state 126


State 89

   99 expression_statement: match_expression ";" •

    $default  reduce using rule 99 (expression_statement)


State 90

   52 match_binder_head: "|" • match_binder_definer "->"

    "identifier"  shift, and go to state 127

    match_binder_definer  go to state 128


State 91

   71 block_end: "}" •

    $default  reduce using rule 71 (block_end)


State 92

    6 new_lines: new_lines • "NEW_LINE"
   72 block_end: new_lines • "}"

    "NEW_LINE"  shift, and go to state 112
    "}"         shift, and go to state 129


State 93

   51 match_binders_list_head: match_binders_list match_binder_head •

    $default  reduce using rule 51 (match_binders_list_head)


State 94

   47 match_expression: match_binders_list block_end •

    $default  reduce using rule 47 (match_expression)


State 95

   48 match_binders_list: match_binders_list_head_start expression_body •

    $default  reduce using rule 48 (match_binders_list)


State 96

   49 match_binders_list: match_binders_list_head expression_body •

    $default  reduce using rule 49 (match_binders_list)


State 97

   59 expression: expression_body expression_end •

    $default  reduce using rule 59 (expression)


State 98

  107 split_expression: if_expression_head expression_body •

    $default  reduce using rule 107 (split_expression)


State 99

  101 if_non_split_expression: if_expression_head non_split_expression •
  103 flow_expression: non_split_expression •

    "else"    reduce using rule 101 (if_non_split_expression)
    $default  reduce using rule 103 (flow_expression)


State 100

  102 if_non_split_expression_else: if_non_split_expression "else" •

    $default  reduce using rule 102 (if_non_split_expression_else)


State 101

   99 expression_statement: match_expression • ";"

    ";"  shift, and go to state 89


State 102

  105 non_split_expression: if_non_split_expression_else non_split_expression •

    $default  reduce using rule 105 (non_split_expression)


State 103

  108 split_expression: if_non_split_expression_else split_expression •

    $default  reduce using rule 108 (split_expression)


State 104

   87 pointer: "*" pointer •

    $default  reduce using rule 87 (pointer)


State 105

   85 declarator: pointer direct_declarator •
   91 function_declarator: direct_declarator • "[" parameter_type_list "]"

    "["  shift, and go to state 106

    $default  reduce using rule 85 (declarator)


State 106

   91 function_declarator: direct_declarator "[" • parameter_type_list "]"

    "type"                 shift, and go to state 65
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    $default  reduce using rule 93 (parameter_type_list)

    declaration_specifiers    go to state 130
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    type_specifier_qualifier  go to state 16
    parameter_type_list       go to state 131
    parameter_list            go to state 132
    parameter_declaration     go to state 133
    typedef_name              go to state 17


State 107

   67 declared_type_name: "type" "identifier" •

    $default  reduce using rule 67 (declared_type_name)


State 108

    6 new_lines: new_lines • "NEW_LINE"
   70 block_start: "{" new_lines •

    "NEW_LINE"  shift, and go to state 112

    $default  reduce using rule 70 (block_start)


State 109

   76 member_types_declaration: "identifier" • "(" member_declaration_list ")" ";"
   77                         | "identifier" • ";"

    "("  shift, and go to state 134
    ";"  shift, and go to state 135


State 110

   73 enumtype_decl_specifier: enumtype_decl_head block_start member_types_declaration_list • block_end new_lines
   75 member_types_declaration_list: member_types_declaration_list • member_types_declaration

    "NEW_LINE"    shift, and go to state 70
    "}"           shift, and go to state 91
    "identifier"  shift, and go to state 109

    new_lines                 go to state 92
    block_end                 go to state 136
    member_types_declaration  go to state 137


State 111

   74 member_types_declaration_list: member_types_declaration •

    $default  reduce using rule 74 (member_types_declaration_list)


State 112

    6 new_lines: new_lines "NEW_LINE" •

    $default  reduce using rule 6 (new_lines)


State 113

   15 primary_expression: "(" expression_body ")" •

    $default  reduce using rule 15 (primary_expression)


State 114

   45 match_head: "match" assignment_expression "->" • declaration_specifiers

    "type"                 shift, and go to state 65
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    declaration_specifiers    go to state 138
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    type_specifier_qualifier  go to state 16
    typedef_name              go to state 17


State 115

  100 if_expression_head: "if" "(" expression_body • ")"

    ")"  shift, and go to state 139


State 116

   17 postfix_expression: "identifier" "(" argument_expression_list • ")"
   20 argument_expression_list: argument_expression_list • "," assignment_expression

    ")"  shift, and go to state 140
    ","  shift, and go to state 141


State 117

   19 argument_expression_list: assignment_expression •

    $default  reduce using rule 19 (argument_expression_list)


State 118

   43 assignment_expression: unary_expression assignment_operator assignment_expression •

    $default  reduce using rule 43 (assignment_expression)


State 119

   30 multiplicative_expression: multiplicative_expression "*" cast_expression •

    $default  reduce using rule 30 (multiplicative_expression)


State 120

   31 multiplicative_expression: multiplicative_expression "/ or %" cast_expression •

    $default  reduce using rule 31 (multiplicative_expression)


State 121

   30 multiplicative_expression: multiplicative_expression • "*" cast_expression
   31                          | multiplicative_expression • "/ or %" cast_expression
   33 additive_expression: additive_expression "+ or -" multiplicative_expression •

    "*"       shift, and go to state 81
    "/ or %"  shift, and go to state 82

    $default  reduce using rule 33 (additive_expression)


State 122

   33 additive_expression: additive_expression • "+ or -" multiplicative_expression
   35 relational_expression: relational_expression "<, >, <=, or >=" additive_expression •

    "+ or -"  shift, and go to state 83

    $default  reduce using rule 35 (relational_expression)


State 123

   35 relational_expression: relational_expression • "<, >, <=, or >=" additive_expression
   37 equality_expression: equality_expression "== or !=" relational_expression •

    "<, >, <=, or >="  shift, and go to state 84

    $default  reduce using rule 37 (equality_expression)


State 124

   37 equality_expression: equality_expression • "== or !=" relational_expression
   39 logical_and_expression: logical_and_expression "&&" equality_expression •

    "== or !="  shift, and go to state 85

    $default  reduce using rule 39 (logical_and_expression)


State 125

   39 logical_and_expression: logical_and_expression • "&&" equality_expression
   41 logical_or_expression: logical_or_expression "||" logical_and_expression •

    "&&"  shift, and go to state 86

    $default  reduce using rule 41 (logical_or_expression)


State 126

   50 match_binders_list_head_start: match_head block_start match_binder_head •

    $default  reduce using rule 50 (match_binders_list_head_start)


State 127

   53 match_binder_definer: "identifier" • "(" match_binder_arguments_list ")"
   54                     | "identifier" •

    "("  shift, and go to state 142

    $default  reduce using rule 54 (match_binder_definer)


State 128

   52 match_binder_head: "|" match_binder_definer • "->"

    "->"  shift, and go to state 143


State 129

   72 block_end: new_lines "}" •

    $default  reduce using rule 72 (block_end)


State 130

   96 parameter_declaration: declaration_specifiers • declarator
   97                      | declaration_specifiers •

    "*"           shift, and go to state 59
    "identifier"  shift, and go to state 60

    $default  reduce using rule 97 (parameter_declaration)

    declarator           go to state 144
    pointer              go to state 62
    direct_declarator    go to state 63
    function_declarator  go to state 64


State 131

   91 function_declarator: direct_declarator "[" parameter_type_list • "]"

    "]"  shift, and go to state 145


State 132

   92 parameter_type_list: parameter_list •
   95 parameter_list: parameter_list • "," parameter_declaration

    ","  shift, and go to state 146

    $default  reduce using rule 92 (parameter_type_list)


State 133

   94 parameter_list: parameter_declaration •

    $default  reduce using rule 94 (parameter_list)


State 134

   76 member_types_declaration: "identifier" "(" • member_declaration_list ")" ";"

    "type"                 shift, and go to state 65
    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 4

    type_specifier            go to state 12
    declared_type_name        go to state 13
    member_declaration_list   go to state 147
    member_declaration        go to state 148
    specifier_qualifier_list  go to state 149
    type_specifier_qualifier  go to state 150
    typedef_name              go to state 17


State 135

   77 member_types_declaration: "identifier" ";" •

    $default  reduce using rule 77 (member_types_declaration)


State 136

   73 enumtype_decl_specifier: enumtype_decl_head block_start member_types_declaration_list block_end • new_lines

    "NEW_LINE"  shift, and go to state 70

    new_lines  go to state 151


State 137

   75 member_types_declaration_list: member_types_declaration_list member_types_declaration •

    $default  reduce using rule 75 (member_types_declaration_list)


State 138

   45 match_head: "match" assignment_expression "->" declaration_specifiers •

    $default  reduce using rule 45 (match_head)


State 139

  100 if_expression_head: "if" "(" expression_body ")" •

    $default  reduce using rule 100 (if_expression_head)


State 140

   17 postfix_expression: "identifier" "(" argument_expression_list ")" •

    $default  reduce using rule 17 (postfix_expression)


State 141

   20 argument_expression_list: argument_expression_list "," • assignment_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_and_expression     go to state 42
    logical_or_expression      go to state 43
    assignment_expression      go to state 152


State 142

   53 match_binder_definer: "identifier" "(" • match_binder_arguments_list ")"

    "identifier"  shift, and go to state 153

    match_binder_arguments_list  go to state 154


State 143

   52 match_binder_head: "|" match_binder_definer "->" •

    $default  reduce using rule 52 (match_binder_head)


State 144

   96 parameter_declaration: declaration_specifiers declarator •

    $default  reduce using rule 96 (parameter_declaration)


State 145

   91 function_declarator: direct_declarator "[" parameter_type_list "]" •

    $default  reduce using rule 91 (function_declarator)


State 146

   95 parameter_list: parameter_list "," • parameter_declaration

    "type"                 shift, and go to state 65
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    declaration_specifiers    go to state 130
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    type_specifier_qualifier  go to state 16
    parameter_declaration     go to state 155
    typedef_name              go to state 17


State 147

   76 member_types_declaration: "identifier" "(" member_declaration_list • ")" ";"
   79 member_declaration_list: member_declaration_list • "," member_declaration

    ")"  shift, and go to state 156
    ","  shift, and go to state 157


State 148

   78 member_declaration_list: member_declaration •

    $default  reduce using rule 78 (member_declaration_list)


State 149

   80 member_declaration: specifier_qualifier_list • member_declarator

    "*"           shift, and go to state 59
    "identifier"  shift, and go to state 60

    member_declarator    go to state 158
    declarator           go to state 159
    pointer              go to state 62
    direct_declarator    go to state 63
    function_declarator  go to state 64


State 150

   81 specifier_qualifier_list: type_specifier_qualifier •
   82                         | type_specifier_qualifier • specifier_qualifier_list

    "type"                 shift, and go to state 65
    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 4

    $default  reduce using rule 81 (specifier_qualifier_list)

    type_specifier            go to state 12
    declared_type_name        go to state 13
    specifier_qualifier_list  go to state 160
    type_specifier_qualifier  go to state 150
    typedef_name              go to state 17


State 151

    6 new_lines: new_lines • "NEW_LINE"
   73 enumtype_decl_specifier: enumtype_decl_head block_start member_types_declaration_list block_end new_lines •

    "NEW_LINE"  shift, and go to state 112

    $default  reduce using rule 73 (enumtype_decl_specifier)


State 152

   20 argument_expression_list: argument_expression_list "," assignment_expression •

    $default  reduce using rule 20 (argument_expression_list)


State 153

   55 match_binder_arguments_list: "identifier" •

    $default  reduce using rule 55 (match_binder_arguments_list)


State 154

   53 match_binder_definer: "identifier" "(" match_binder_arguments_list • ")"
   56 match_binder_arguments_list: match_binder_arguments_list • "," "identifier"

    ")"  shift, and go to state 161
    ","  shift, and go to state 162


State 155

   95 parameter_list: parameter_list "," parameter_declaration •

    $default  reduce using rule 95 (parameter_list)


State 156

   76 member_types_declaration: "identifier" "(" member_declaration_list ")" • ";"

    ";"  shift, and go to state 163


State 157

   79 member_declaration_list: member_declaration_list "," • member_declaration

    "type"                 shift, and go to state 65
    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 4

    type_specifier            go to state 12
    declared_type_name        go to state 13
    member_declaration        go to state 164
    specifier_qualifier_list  go to state 149
    type_specifier_qualifier  go to state 150
    typedef_name              go to state 17


State 158

   80 member_declaration: specifier_qualifier_list member_declarator •

    $default  reduce using rule 80 (member_declaration)


State 159

   84 member_declarator: declarator •

    $default  reduce using rule 84 (member_declarator)


State 160

   82 specifier_qualifier_list: type_specifier_qualifier specifier_qualifier_list •

    $default  reduce using rule 82 (specifier_qualifier_list)


State 161

   53 match_binder_definer: "identifier" "(" match_binder_arguments_list ")" •

    $default  reduce using rule 53 (match_binder_definer)


State 162

   56 match_binder_arguments_list: match_binder_arguments_list "," • "identifier"

    "identifier"  shift, and go to state 165


State 163

   76 member_types_declaration: "identifier" "(" member_declaration_list ")" ";" •

    $default  reduce using rule 76 (member_types_declaration)


State 164

   79 member_declaration_list: member_declaration_list "," member_declaration •

    $default  reduce using rule 79 (member_declaration_list)


State 165

   56 match_binder_arguments_list: match_binder_arguments_list "," "identifier" •

    $default  reduce using rule 56 (match_binder_arguments_list)
