Terminals unused in grammar

    "->"
    "|"
    "sizeof"
    "in"
    "let"
    "match"
    "match!"
    "fip"
    "fn"


Grammar

    0 $accept: translation_unit "end of file"

    1 translation_unit: external_declaration
    2                 | translation_unit external_declaration

    3 external_declaration: function_definition
    4                     | enumtype_decl_specifier

    5 expression_end: "NEW_LINE"
    6               | "end of file"

    7 function_definition: function_definition_head expression

    8 function_definition_info: declaration_specifiers declarator

    9 function_definition_head: function_definition_info "="

   10 primary_expression: enumeration_constant
   11                   | "integer literal"
   12                   | "string literal"
   13                   | "(" expression ")"

   14 postfix_expression: primary_expression

   15 unary_expression: postfix_expression
   16                 | unary_operator cast_expression

   17 unary_operator: "&"
   18               | "*"
   19               | "+ or -"
   20               | "!"

   21 cast_expression: unary_expression

   22 multiplicative_expression: cast_expression
   23                          | multiplicative_expression "*" cast_expression
   24                          | multiplicative_expression "/ or %" cast_expression

   25 additive_expression: multiplicative_expression
   26                    | additive_expression "+ or -" multiplicative_expression

   27 relational_expression: additive_expression
   28                      | relational_expression "<, >, <=, or >=" additive_expression

   29 equality_expression: relational_expression
   30                    | equality_expression "== or !=" relational_expression

   31 logical_and_expression: equality_expression
   32                       | logical_and_expression "&&" equality_expression

   33 logical_or_expression: logical_and_expression
   34                      | logical_or_expression "||" logical_and_expression

   35 assignment_expression: logical_or_expression
   36                      | unary_expression assignment_operator assignment_expression

   37 assignment_operator: "="

   38 expression_body: assignment_expression

   39 expression: expression_body expression_end

   40 declaration_specifiers: declaration_specifier
   41                       | declaration_specifier declaration_specifiers

   42 declaration_specifier: type_specifier_qualifier

   43 type_specifier: "_Bool, char, or int"
   44               | typedef_name

   45 enumtype_decl_head: "typedef" "identifier"

   46 enumtype_decl_block_start: "{"
   47                          | "{" "NEW_LINE"

   48 enumtype_decl_block_end: "}"
   49                        | "NEW_LINE" "}"

   50 enumtype_decl_specifier: enumtype_decl_head enumtype_decl_block_start member_types_declaration_list enumtype_decl_block_end "NEW_LINE"

   51 member_types_declaration_list: member_types_declaration
   52                              | member_types_declaration_list member_types_declaration

   53 member_types_declaration: "identifier" "(" member_declaration_list ")" ";"
   54                         | "identifier" ";"

   55 member_declaration_list: member_declaration
   56                        | member_declaration_list "," member_declaration

   57 member_declaration: specifier_qualifier_list member_declarator

   58 specifier_qualifier_list: type_specifier_qualifier
   59                         | type_specifier_qualifier specifier_qualifier_list

   60 type_specifier_qualifier: type_specifier

   61 member_declarator: declarator

   62 enumeration_constant: "identifier"

   63 declarator: pointer direct_declarator
   64           | direct_declarator

   65 pointer: "*" pointer
   66        | "*"

   67 direct_declarator: "identifier"
   68                  | function_declarator

   69 function_declarator: direct_declarator "[" parameter_type_list "]"

   70 parameter_type_list: parameter_list
   71                    | ε

   72 parameter_list: parameter_declaration
   73               | parameter_list "," parameter_declaration

   74 parameter_declaration: declaration_specifiers declarator
   75                      | declaration_specifiers

   76 typedef_name: "type identifier"


Terminals, with rules where they appear

    "end of file" (0) 0 6
    error (256)
    "[" (258) 69
    "]" (259) 69
    "(" (260) 13 53
    ")" (261) 13 53
    "NEW_LINE" (262) 5 47 49 50
    "->" (263)
    "," (264) 56 73
    "&" (265) 17
    "|" (266)
    "*" (267) 18 23 65 66
    "+ or -" <cecko::gt_addop> (268) 19 26
    "!" (269) 20
    "/ or %" <cecko::gt_divop> (270) 24
    "<, >, <=, or >=" <cecko::gt_cmpo> (271) 28
    "== or !=" <cecko::gt_cmpe> (272) 30
    "&&" (273) 32
    "||" (274) 34
    "=" (275) 9 37
    ";" (276) 53 54
    "{" (277) 46 47
    "}" (278) 48 49
    "typedef" (279) 45
    "_Bool, char, or int" <cecko::gt_etype> (280) 43
    "sizeof" (281)
    "in" (282)
    "let" (283)
    "match" (284)
    "match!" (285)
    "fip" (286)
    "fn" (287)
    "identifier" <cecko::CIName> (288) 45 53 54 62 67
    "type identifier" <cecko::CIName> (289) 76
    "integer literal" <int> (290) 11
    "string literal" <cecko::CIName> (291) 12


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    translation_unit (38)
        on left: 1 2
        on right: 0 2
    external_declaration (39)
        on left: 3 4
        on right: 1 2
    expression_end (40)
        on left: 5 6
        on right: 39
    function_definition (41)
        on left: 7
        on right: 3
    function_definition_info (42)
        on left: 8
        on right: 9
    function_definition_head (43)
        on left: 9
        on right: 7
    primary_expression <casem::InstructionWrapper> (44)
        on left: 10 11 12 13
        on right: 14
    postfix_expression <casem::InstructionWrapper> (45)
        on left: 14
        on right: 15
    unary_expression <casem::InstructionWrapper> (46)
        on left: 15 16
        on right: 21 36
    unary_operator <casem::UnaryOperator> (47)
        on left: 17 18 19 20
        on right: 16
    cast_expression <casem::InstructionWrapper> (48)
        on left: 21
        on right: 16 22 23 24
    multiplicative_expression <casem::InstructionWrapper> (49)
        on left: 22 23 24
        on right: 23 24 25 26
    additive_expression <casem::InstructionWrapper> (50)
        on left: 25 26
        on right: 26 27 28
    relational_expression <casem::InstructionWrapper> (51)
        on left: 27 28
        on right: 28 29 30
    equality_expression <casem::InstructionWrapper> (52)
        on left: 29 30
        on right: 30 31 32
    logical_and_expression <casem::InstructionWrapper> (53)
        on left: 31 32
        on right: 32 33 34
    logical_or_expression <casem::InstructionWrapper> (54)
        on left: 33 34
        on right: 34 35
    assignment_expression <casem::InstructionWrapper> (55)
        on left: 35 36
        on right: 36 38
    assignment_operator <cecko::gt_cass> (56)
        on left: 37
        on right: 36
    expression_body <casem::InstructionWrapper> (57)
        on left: 38
        on right: 39
    expression <casem::InstructionWrapper> (58)
        on left: 39
        on right: 7 13
    declaration_specifiers <casem::CKTypeRefDefPack> (59)
        on left: 40 41
        on right: 8 41 74 75
    declaration_specifier <casem::CKTypeRefDefPack> (60)
        on left: 42
        on right: 40 41
    type_specifier <cecko::CKTypeSafeObs> (61)
        on left: 43 44
        on right: 60
    enumtype_decl_head <cecko::CKStructTypeSafeObs> (62)
        on left: 45
        on right: 50
    enumtype_decl_block_start (63)
        on left: 46 47
        on right: 50
    enumtype_decl_block_end (64)
        on left: 48 49
        on right: 50
    enumtype_decl_specifier <cecko::CKStructTypeSafeObs> (65)
        on left: 50
        on right: 4
    member_types_declaration_list <casem::StructObservers> (66)
        on left: 51 52
        on right: 50 52
    member_types_declaration <cecko::CKStructTypeSafeObs> (67)
        on left: 53 54
        on right: 51 52
    member_declaration_list <cecko::CKStructItemArray> (68)
        on left: 55 56
        on right: 53 56
    member_declaration <cecko::CKStructItemArray> (69)
        on left: 57
        on right: 55 56
    specifier_qualifier_list <casem::CKTypeRefDefPack> (70)
        on left: 58 59
        on right: 57 59
    type_specifier_qualifier <casem::CKTypeRefDefPack> (71)
        on left: 60
        on right: 42 58 59
    member_declarator <casem::TypeRefPack_Action> (72)
        on left: 61
        on right: 57
    enumeration_constant <cecko::CIName> (73)
        on left: 62
        on right: 10
    declarator <casem::TypeRefPack_Action> (74)
        on left: 63 64
        on right: 8 61 74
    pointer <casem::TypeRefPack_Convertor> (75)
        on left: 65 66
        on right: 63 65
    direct_declarator <casem::TypeRefPack_Action> (76)
        on left: 67 68
        on right: 63 64 69
    function_declarator <casem::TypeRefPack_Action> (77)
        on left: 69
        on right: 68
    parameter_type_list <casem::TRDArray> (78)
        on left: 70 71
        on right: 69
    parameter_list <casem::TRDArray> (79)
        on left: 72 73
        on right: 70 73
    parameter_declaration <casem::CKTypeRefDefPack> (80)
        on left: 74 75
        on right: 72 73
    typedef_name <cecko::CIName> (81)
        on left: 76
        on right: 44


State 0

    0 $accept: • translation_unit "end of file"

    "typedef"              shift, and go to state 1
    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 3

    translation_unit          go to state 4
    external_declaration      go to state 5
    function_definition       go to state 6
    function_definition_info  go to state 7
    function_definition_head  go to state 8
    declaration_specifiers    go to state 9
    declaration_specifier     go to state 10
    type_specifier            go to state 11
    enumtype_decl_head        go to state 12
    enumtype_decl_specifier   go to state 13
    type_specifier_qualifier  go to state 14
    typedef_name              go to state 15


State 1

   45 enumtype_decl_head: "typedef" • "identifier"

    "identifier"  shift, and go to state 16


State 2

   43 type_specifier: "_Bool, char, or int" •

    $default  reduce using rule 43 (type_specifier)


State 3

   76 typedef_name: "type identifier" •

    $default  reduce using rule 76 (typedef_name)


State 4

    0 $accept: translation_unit • "end of file"
    2 translation_unit: translation_unit • external_declaration

    "end of file"          shift, and go to state 17
    "typedef"              shift, and go to state 1
    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 3

    external_declaration      go to state 18
    function_definition       go to state 6
    function_definition_info  go to state 7
    function_definition_head  go to state 8
    declaration_specifiers    go to state 9
    declaration_specifier     go to state 10
    type_specifier            go to state 11
    enumtype_decl_head        go to state 12
    enumtype_decl_specifier   go to state 13
    type_specifier_qualifier  go to state 14
    typedef_name              go to state 15


State 5

    1 translation_unit: external_declaration •

    $default  reduce using rule 1 (translation_unit)


State 6

    3 external_declaration: function_definition •

    $default  reduce using rule 3 (external_declaration)


State 7

    9 function_definition_head: function_definition_info • "="

    "="  shift, and go to state 19


State 8

    7 function_definition: function_definition_head • expression

    "("                shift, and go to state 20
    "&"                shift, and go to state 21
    "*"                shift, and go to state 22
    "+ or -"           shift, and go to state 23
    "!"                shift, and go to state 24
    "identifier"       shift, and go to state 25
    "integer literal"  shift, and go to state 26
    "string literal"   shift, and go to state 27

    primary_expression         go to state 28
    postfix_expression         go to state 29
    unary_expression           go to state 30
    unary_operator             go to state 31
    cast_expression            go to state 32
    multiplicative_expression  go to state 33
    additive_expression        go to state 34
    relational_expression      go to state 35
    equality_expression        go to state 36
    logical_and_expression     go to state 37
    logical_or_expression      go to state 38
    assignment_expression      go to state 39
    expression_body            go to state 40
    expression                 go to state 41
    enumeration_constant       go to state 42


State 9

    8 function_definition_info: declaration_specifiers • declarator

    "*"           shift, and go to state 43
    "identifier"  shift, and go to state 44

    declarator           go to state 45
    pointer              go to state 46
    direct_declarator    go to state 47
    function_declarator  go to state 48


State 10

   40 declaration_specifiers: declaration_specifier •
   41                       | declaration_specifier • declaration_specifiers

    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 3

    $default  reduce using rule 40 (declaration_specifiers)

    declaration_specifiers    go to state 49
    declaration_specifier     go to state 10
    type_specifier            go to state 11
    type_specifier_qualifier  go to state 14
    typedef_name              go to state 15


State 11

   60 type_specifier_qualifier: type_specifier •

    $default  reduce using rule 60 (type_specifier_qualifier)


State 12

   50 enumtype_decl_specifier: enumtype_decl_head • enumtype_decl_block_start member_types_declaration_list enumtype_decl_block_end "NEW_LINE"

    "{"  shift, and go to state 50

    enumtype_decl_block_start  go to state 51


State 13

    4 external_declaration: enumtype_decl_specifier •

    $default  reduce using rule 4 (external_declaration)


State 14

   42 declaration_specifier: type_specifier_qualifier •

    $default  reduce using rule 42 (declaration_specifier)


State 15

   44 type_specifier: typedef_name •

    $default  reduce using rule 44 (type_specifier)


State 16

   45 enumtype_decl_head: "typedef" "identifier" •

    $default  reduce using rule 45 (enumtype_decl_head)


State 17

    0 $accept: translation_unit "end of file" •

    $default  accept


State 18

    2 translation_unit: translation_unit external_declaration •

    $default  reduce using rule 2 (translation_unit)


State 19

    9 function_definition_head: function_definition_info "=" •

    $default  reduce using rule 9 (function_definition_head)


State 20

   13 primary_expression: "(" • expression ")"

    "("                shift, and go to state 20
    "&"                shift, and go to state 21
    "*"                shift, and go to state 22
    "+ or -"           shift, and go to state 23
    "!"                shift, and go to state 24
    "identifier"       shift, and go to state 25
    "integer literal"  shift, and go to state 26
    "string literal"   shift, and go to state 27

    primary_expression         go to state 28
    postfix_expression         go to state 29
    unary_expression           go to state 30
    unary_operator             go to state 31
    cast_expression            go to state 32
    multiplicative_expression  go to state 33
    additive_expression        go to state 34
    relational_expression      go to state 35
    equality_expression        go to state 36
    logical_and_expression     go to state 37
    logical_or_expression      go to state 38
    assignment_expression      go to state 39
    expression_body            go to state 40
    expression                 go to state 52
    enumeration_constant       go to state 42


State 21

   17 unary_operator: "&" •

    $default  reduce using rule 17 (unary_operator)


State 22

   18 unary_operator: "*" •

    $default  reduce using rule 18 (unary_operator)


State 23

   19 unary_operator: "+ or -" •

    $default  reduce using rule 19 (unary_operator)


State 24

   20 unary_operator: "!" •

    $default  reduce using rule 20 (unary_operator)


State 25

   62 enumeration_constant: "identifier" •

    $default  reduce using rule 62 (enumeration_constant)


State 26

   11 primary_expression: "integer literal" •

    $default  reduce using rule 11 (primary_expression)


State 27

   12 primary_expression: "string literal" •

    $default  reduce using rule 12 (primary_expression)


State 28

   14 postfix_expression: primary_expression •

    $default  reduce using rule 14 (postfix_expression)


State 29

   15 unary_expression: postfix_expression •

    $default  reduce using rule 15 (unary_expression)


State 30

   21 cast_expression: unary_expression •
   36 assignment_expression: unary_expression • assignment_operator assignment_expression

    "="  shift, and go to state 53

    $default  reduce using rule 21 (cast_expression)

    assignment_operator  go to state 54


State 31

   16 unary_expression: unary_operator • cast_expression

    "("                shift, and go to state 20
    "&"                shift, and go to state 21
    "*"                shift, and go to state 22
    "+ or -"           shift, and go to state 23
    "!"                shift, and go to state 24
    "identifier"       shift, and go to state 25
    "integer literal"  shift, and go to state 26
    "string literal"   shift, and go to state 27

    primary_expression    go to state 28
    postfix_expression    go to state 29
    unary_expression      go to state 55
    unary_operator        go to state 31
    cast_expression       go to state 56
    enumeration_constant  go to state 42


State 32

   22 multiplicative_expression: cast_expression •

    $default  reduce using rule 22 (multiplicative_expression)


State 33

   23 multiplicative_expression: multiplicative_expression • "*" cast_expression
   24                          | multiplicative_expression • "/ or %" cast_expression
   25 additive_expression: multiplicative_expression •

    "*"       shift, and go to state 57
    "/ or %"  shift, and go to state 58

    $default  reduce using rule 25 (additive_expression)


State 34

   26 additive_expression: additive_expression • "+ or -" multiplicative_expression
   27 relational_expression: additive_expression •

    "+ or -"  shift, and go to state 59

    $default  reduce using rule 27 (relational_expression)


State 35

   28 relational_expression: relational_expression • "<, >, <=, or >=" additive_expression
   29 equality_expression: relational_expression •

    "<, >, <=, or >="  shift, and go to state 60

    $default  reduce using rule 29 (equality_expression)


State 36

   30 equality_expression: equality_expression • "== or !=" relational_expression
   31 logical_and_expression: equality_expression •

    "== or !="  shift, and go to state 61

    $default  reduce using rule 31 (logical_and_expression)


State 37

   32 logical_and_expression: logical_and_expression • "&&" equality_expression
   33 logical_or_expression: logical_and_expression •

    "&&"  shift, and go to state 62

    $default  reduce using rule 33 (logical_or_expression)


State 38

   34 logical_or_expression: logical_or_expression • "||" logical_and_expression
   35 assignment_expression: logical_or_expression •

    "||"  shift, and go to state 63

    $default  reduce using rule 35 (assignment_expression)


State 39

   38 expression_body: assignment_expression •

    $default  reduce using rule 38 (expression_body)


State 40

   39 expression: expression_body • expression_end

    "end of file"  shift, and go to state 64
    "NEW_LINE"     shift, and go to state 65

    expression_end  go to state 66


State 41

    7 function_definition: function_definition_head expression •

    $default  reduce using rule 7 (function_definition)


State 42

   10 primary_expression: enumeration_constant •

    $default  reduce using rule 10 (primary_expression)


State 43

   65 pointer: "*" • pointer
   66        | "*" •

    "*"  shift, and go to state 43

    $default  reduce using rule 66 (pointer)

    pointer  go to state 67


State 44

   67 direct_declarator: "identifier" •

    $default  reduce using rule 67 (direct_declarator)


State 45

    8 function_definition_info: declaration_specifiers declarator •

    $default  reduce using rule 8 (function_definition_info)


State 46

   63 declarator: pointer • direct_declarator

    "identifier"  shift, and go to state 44

    direct_declarator    go to state 68
    function_declarator  go to state 48


State 47

   64 declarator: direct_declarator •
   69 function_declarator: direct_declarator • "[" parameter_type_list "]"

    "["  shift, and go to state 69

    $default  reduce using rule 64 (declarator)


State 48

   68 direct_declarator: function_declarator •

    $default  reduce using rule 68 (direct_declarator)


State 49

   41 declaration_specifiers: declaration_specifier declaration_specifiers •

    $default  reduce using rule 41 (declaration_specifiers)


State 50

   46 enumtype_decl_block_start: "{" •
   47                          | "{" • "NEW_LINE"

    "NEW_LINE"  shift, and go to state 70

    $default  reduce using rule 46 (enumtype_decl_block_start)


State 51

   50 enumtype_decl_specifier: enumtype_decl_head enumtype_decl_block_start • member_types_declaration_list enumtype_decl_block_end "NEW_LINE"

    "identifier"  shift, and go to state 71

    member_types_declaration_list  go to state 72
    member_types_declaration       go to state 73


State 52

   13 primary_expression: "(" expression • ")"

    ")"  shift, and go to state 74


State 53

   37 assignment_operator: "=" •

    $default  reduce using rule 37 (assignment_operator)


State 54

   36 assignment_expression: unary_expression assignment_operator • assignment_expression

    "("                shift, and go to state 20
    "&"                shift, and go to state 21
    "*"                shift, and go to state 22
    "+ or -"           shift, and go to state 23
    "!"                shift, and go to state 24
    "identifier"       shift, and go to state 25
    "integer literal"  shift, and go to state 26
    "string literal"   shift, and go to state 27

    primary_expression         go to state 28
    postfix_expression         go to state 29
    unary_expression           go to state 30
    unary_operator             go to state 31
    cast_expression            go to state 32
    multiplicative_expression  go to state 33
    additive_expression        go to state 34
    relational_expression      go to state 35
    equality_expression        go to state 36
    logical_and_expression     go to state 37
    logical_or_expression      go to state 38
    assignment_expression      go to state 75
    enumeration_constant       go to state 42


State 55

   21 cast_expression: unary_expression •

    $default  reduce using rule 21 (cast_expression)


State 56

   16 unary_expression: unary_operator cast_expression •

    $default  reduce using rule 16 (unary_expression)


State 57

   23 multiplicative_expression: multiplicative_expression "*" • cast_expression

    "("                shift, and go to state 20
    "&"                shift, and go to state 21
    "*"                shift, and go to state 22
    "+ or -"           shift, and go to state 23
    "!"                shift, and go to state 24
    "identifier"       shift, and go to state 25
    "integer literal"  shift, and go to state 26
    "string literal"   shift, and go to state 27

    primary_expression    go to state 28
    postfix_expression    go to state 29
    unary_expression      go to state 55
    unary_operator        go to state 31
    cast_expression       go to state 76
    enumeration_constant  go to state 42


State 58

   24 multiplicative_expression: multiplicative_expression "/ or %" • cast_expression

    "("                shift, and go to state 20
    "&"                shift, and go to state 21
    "*"                shift, and go to state 22
    "+ or -"           shift, and go to state 23
    "!"                shift, and go to state 24
    "identifier"       shift, and go to state 25
    "integer literal"  shift, and go to state 26
    "string literal"   shift, and go to state 27

    primary_expression    go to state 28
    postfix_expression    go to state 29
    unary_expression      go to state 55
    unary_operator        go to state 31
    cast_expression       go to state 77
    enumeration_constant  go to state 42


State 59

   26 additive_expression: additive_expression "+ or -" • multiplicative_expression

    "("                shift, and go to state 20
    "&"                shift, and go to state 21
    "*"                shift, and go to state 22
    "+ or -"           shift, and go to state 23
    "!"                shift, and go to state 24
    "identifier"       shift, and go to state 25
    "integer literal"  shift, and go to state 26
    "string literal"   shift, and go to state 27

    primary_expression         go to state 28
    postfix_expression         go to state 29
    unary_expression           go to state 55
    unary_operator             go to state 31
    cast_expression            go to state 32
    multiplicative_expression  go to state 78
    enumeration_constant       go to state 42


State 60

   28 relational_expression: relational_expression "<, >, <=, or >=" • additive_expression

    "("                shift, and go to state 20
    "&"                shift, and go to state 21
    "*"                shift, and go to state 22
    "+ or -"           shift, and go to state 23
    "!"                shift, and go to state 24
    "identifier"       shift, and go to state 25
    "integer literal"  shift, and go to state 26
    "string literal"   shift, and go to state 27

    primary_expression         go to state 28
    postfix_expression         go to state 29
    unary_expression           go to state 55
    unary_operator             go to state 31
    cast_expression            go to state 32
    multiplicative_expression  go to state 33
    additive_expression        go to state 79
    enumeration_constant       go to state 42


State 61

   30 equality_expression: equality_expression "== or !=" • relational_expression

    "("                shift, and go to state 20
    "&"                shift, and go to state 21
    "*"                shift, and go to state 22
    "+ or -"           shift, and go to state 23
    "!"                shift, and go to state 24
    "identifier"       shift, and go to state 25
    "integer literal"  shift, and go to state 26
    "string literal"   shift, and go to state 27

    primary_expression         go to state 28
    postfix_expression         go to state 29
    unary_expression           go to state 55
    unary_operator             go to state 31
    cast_expression            go to state 32
    multiplicative_expression  go to state 33
    additive_expression        go to state 34
    relational_expression      go to state 80
    enumeration_constant       go to state 42


State 62

   32 logical_and_expression: logical_and_expression "&&" • equality_expression

    "("                shift, and go to state 20
    "&"                shift, and go to state 21
    "*"                shift, and go to state 22
    "+ or -"           shift, and go to state 23
    "!"                shift, and go to state 24
    "identifier"       shift, and go to state 25
    "integer literal"  shift, and go to state 26
    "string literal"   shift, and go to state 27

    primary_expression         go to state 28
    postfix_expression         go to state 29
    unary_expression           go to state 55
    unary_operator             go to state 31
    cast_expression            go to state 32
    multiplicative_expression  go to state 33
    additive_expression        go to state 34
    relational_expression      go to state 35
    equality_expression        go to state 81
    enumeration_constant       go to state 42


State 63

   34 logical_or_expression: logical_or_expression "||" • logical_and_expression

    "("                shift, and go to state 20
    "&"                shift, and go to state 21
    "*"                shift, and go to state 22
    "+ or -"           shift, and go to state 23
    "!"                shift, and go to state 24
    "identifier"       shift, and go to state 25
    "integer literal"  shift, and go to state 26
    "string literal"   shift, and go to state 27

    primary_expression         go to state 28
    postfix_expression         go to state 29
    unary_expression           go to state 55
    unary_operator             go to state 31
    cast_expression            go to state 32
    multiplicative_expression  go to state 33
    additive_expression        go to state 34
    relational_expression      go to state 35
    equality_expression        go to state 36
    logical_and_expression     go to state 82
    enumeration_constant       go to state 42


State 64

    6 expression_end: "end of file" •

    $default  reduce using rule 6 (expression_end)


State 65

    5 expression_end: "NEW_LINE" •

    $default  reduce using rule 5 (expression_end)


State 66

   39 expression: expression_body expression_end •

    $default  reduce using rule 39 (expression)


State 67

   65 pointer: "*" pointer •

    $default  reduce using rule 65 (pointer)


State 68

   63 declarator: pointer direct_declarator •
   69 function_declarator: direct_declarator • "[" parameter_type_list "]"

    "["  shift, and go to state 69

    $default  reduce using rule 63 (declarator)


State 69

   69 function_declarator: direct_declarator "[" • parameter_type_list "]"

    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 3

    $default  reduce using rule 71 (parameter_type_list)

    declaration_specifiers    go to state 83
    declaration_specifier     go to state 10
    type_specifier            go to state 11
    type_specifier_qualifier  go to state 14
    parameter_type_list       go to state 84
    parameter_list            go to state 85
    parameter_declaration     go to state 86
    typedef_name              go to state 15


State 70

   47 enumtype_decl_block_start: "{" "NEW_LINE" •

    $default  reduce using rule 47 (enumtype_decl_block_start)


State 71

   53 member_types_declaration: "identifier" • "(" member_declaration_list ")" ";"
   54                         | "identifier" • ";"

    "("  shift, and go to state 87
    ";"  shift, and go to state 88


State 72

   50 enumtype_decl_specifier: enumtype_decl_head enumtype_decl_block_start member_types_declaration_list • enumtype_decl_block_end "NEW_LINE"
   52 member_types_declaration_list: member_types_declaration_list • member_types_declaration

    "NEW_LINE"    shift, and go to state 89
    "}"           shift, and go to state 90
    "identifier"  shift, and go to state 71

    enumtype_decl_block_end   go to state 91
    member_types_declaration  go to state 92


State 73

   51 member_types_declaration_list: member_types_declaration •

    $default  reduce using rule 51 (member_types_declaration_list)


State 74

   13 primary_expression: "(" expression ")" •

    $default  reduce using rule 13 (primary_expression)


State 75

   36 assignment_expression: unary_expression assignment_operator assignment_expression •

    $default  reduce using rule 36 (assignment_expression)


State 76

   23 multiplicative_expression: multiplicative_expression "*" cast_expression •

    $default  reduce using rule 23 (multiplicative_expression)


State 77

   24 multiplicative_expression: multiplicative_expression "/ or %" cast_expression •

    $default  reduce using rule 24 (multiplicative_expression)


State 78

   23 multiplicative_expression: multiplicative_expression • "*" cast_expression
   24                          | multiplicative_expression • "/ or %" cast_expression
   26 additive_expression: additive_expression "+ or -" multiplicative_expression •

    "*"       shift, and go to state 57
    "/ or %"  shift, and go to state 58

    $default  reduce using rule 26 (additive_expression)


State 79

   26 additive_expression: additive_expression • "+ or -" multiplicative_expression
   28 relational_expression: relational_expression "<, >, <=, or >=" additive_expression •

    "+ or -"  shift, and go to state 59

    $default  reduce using rule 28 (relational_expression)


State 80

   28 relational_expression: relational_expression • "<, >, <=, or >=" additive_expression
   30 equality_expression: equality_expression "== or !=" relational_expression •

    "<, >, <=, or >="  shift, and go to state 60

    $default  reduce using rule 30 (equality_expression)


State 81

   30 equality_expression: equality_expression • "== or !=" relational_expression
   32 logical_and_expression: logical_and_expression "&&" equality_expression •

    "== or !="  shift, and go to state 61

    $default  reduce using rule 32 (logical_and_expression)


State 82

   32 logical_and_expression: logical_and_expression • "&&" equality_expression
   34 logical_or_expression: logical_or_expression "||" logical_and_expression •

    "&&"  shift, and go to state 62

    $default  reduce using rule 34 (logical_or_expression)


State 83

   74 parameter_declaration: declaration_specifiers • declarator
   75                      | declaration_specifiers •

    "*"           shift, and go to state 43
    "identifier"  shift, and go to state 44

    $default  reduce using rule 75 (parameter_declaration)

    declarator           go to state 93
    pointer              go to state 46
    direct_declarator    go to state 47
    function_declarator  go to state 48


State 84

   69 function_declarator: direct_declarator "[" parameter_type_list • "]"

    "]"  shift, and go to state 94


State 85

   70 parameter_type_list: parameter_list •
   73 parameter_list: parameter_list • "," parameter_declaration

    ","  shift, and go to state 95

    $default  reduce using rule 70 (parameter_type_list)


State 86

   72 parameter_list: parameter_declaration •

    $default  reduce using rule 72 (parameter_list)


State 87

   53 member_types_declaration: "identifier" "(" • member_declaration_list ")" ";"

    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 3

    type_specifier            go to state 11
    member_declaration_list   go to state 96
    member_declaration        go to state 97
    specifier_qualifier_list  go to state 98
    type_specifier_qualifier  go to state 99
    typedef_name              go to state 15


State 88

   54 member_types_declaration: "identifier" ";" •

    $default  reduce using rule 54 (member_types_declaration)


State 89

   49 enumtype_decl_block_end: "NEW_LINE" • "}"

    "}"  shift, and go to state 100


State 90

   48 enumtype_decl_block_end: "}" •

    $default  reduce using rule 48 (enumtype_decl_block_end)


State 91

   50 enumtype_decl_specifier: enumtype_decl_head enumtype_decl_block_start member_types_declaration_list enumtype_decl_block_end • "NEW_LINE"

    "NEW_LINE"  shift, and go to state 101


State 92

   52 member_types_declaration_list: member_types_declaration_list member_types_declaration •

    $default  reduce using rule 52 (member_types_declaration_list)


State 93

   74 parameter_declaration: declaration_specifiers declarator •

    $default  reduce using rule 74 (parameter_declaration)


State 94

   69 function_declarator: direct_declarator "[" parameter_type_list "]" •

    $default  reduce using rule 69 (function_declarator)


State 95

   73 parameter_list: parameter_list "," • parameter_declaration

    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 3

    declaration_specifiers    go to state 83
    declaration_specifier     go to state 10
    type_specifier            go to state 11
    type_specifier_qualifier  go to state 14
    parameter_declaration     go to state 102
    typedef_name              go to state 15


State 96

   53 member_types_declaration: "identifier" "(" member_declaration_list • ")" ";"
   56 member_declaration_list: member_declaration_list • "," member_declaration

    ")"  shift, and go to state 103
    ","  shift, and go to state 104


State 97

   55 member_declaration_list: member_declaration •

    $default  reduce using rule 55 (member_declaration_list)


State 98

   57 member_declaration: specifier_qualifier_list • member_declarator

    "*"           shift, and go to state 43
    "identifier"  shift, and go to state 44

    member_declarator    go to state 105
    declarator           go to state 106
    pointer              go to state 46
    direct_declarator    go to state 47
    function_declarator  go to state 48


State 99

   58 specifier_qualifier_list: type_specifier_qualifier •
   59                         | type_specifier_qualifier • specifier_qualifier_list

    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 3

    $default  reduce using rule 58 (specifier_qualifier_list)

    type_specifier            go to state 11
    specifier_qualifier_list  go to state 107
    type_specifier_qualifier  go to state 99
    typedef_name              go to state 15


State 100

   49 enumtype_decl_block_end: "NEW_LINE" "}" •

    $default  reduce using rule 49 (enumtype_decl_block_end)


State 101

   50 enumtype_decl_specifier: enumtype_decl_head enumtype_decl_block_start member_types_declaration_list enumtype_decl_block_end "NEW_LINE" •

    $default  reduce using rule 50 (enumtype_decl_specifier)


State 102

   73 parameter_list: parameter_list "," parameter_declaration •

    $default  reduce using rule 73 (parameter_list)


State 103

   53 member_types_declaration: "identifier" "(" member_declaration_list ")" • ";"

    ";"  shift, and go to state 108


State 104

   56 member_declaration_list: member_declaration_list "," • member_declaration

    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 3

    type_specifier            go to state 11
    member_declaration        go to state 109
    specifier_qualifier_list  go to state 98
    type_specifier_qualifier  go to state 99
    typedef_name              go to state 15


State 105

   57 member_declaration: specifier_qualifier_list member_declarator •

    $default  reduce using rule 57 (member_declaration)


State 106

   61 member_declarator: declarator •

    $default  reduce using rule 61 (member_declarator)


State 107

   59 specifier_qualifier_list: type_specifier_qualifier specifier_qualifier_list •

    $default  reduce using rule 59 (specifier_qualifier_list)


State 108

   53 member_types_declaration: "identifier" "(" member_declaration_list ")" ";" •

    $default  reduce using rule 53 (member_types_declaration)


State 109

   56 member_declaration_list: member_declaration_list "," member_declaration •

    $default  reduce using rule 56 (member_declaration_list)
