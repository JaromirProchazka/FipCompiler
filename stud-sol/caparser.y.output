Terminals unused in grammar

    ":"
    "sizeof"
    "in"
    "let"
    "fn"


Grammar

    0 $accept: translation_unit "end of file"

    1 translation_unit: external_declaration
    2                 | translation_unit external_declaration

    3 external_declaration: function_definition
    4                     | enumtype_decl_specifier

    5 expression_end: "NEW_LINE"
    6               | "end of file"

    7 function_definition: function_definition_head expression

    8 function_definition_info: declaration_specifiers declarator

    9 function_definition_head: function_definition_info "="

   10 primary_expression: "integer literal"
   11                   | "string literal"
   12                   | "(" expression ")"

   13 postfix_expression: primary_expression
   14                   | "identifier" "(" argument_expression_list ")"
   15                   | "identifier"

   16 argument_expression_list: assignment_expression
   17                         | argument_expression_list "," assignment_expression
   18                         | ε

   19 unary_expression: postfix_expression
   20                 | unary_operator cast_expression

   21 unary_operator: "&"
   22               | "*"
   23               | "+ or -"
   24               | "!"

   25 cast_expression: unary_expression

   26 multiplicative_expression: cast_expression
   27                          | multiplicative_expression "*" cast_expression
   28                          | multiplicative_expression "/ or %" cast_expression

   29 additive_expression: multiplicative_expression
   30                    | additive_expression "+ or -" multiplicative_expression

   31 relational_expression: additive_expression
   32                      | relational_expression "<, >, <=, or >=" additive_expression

   33 equality_expression: relational_expression
   34                    | equality_expression "== or !=" relational_expression

   35 logical_and_expression: equality_expression
   36                       | logical_and_expression "&&" equality_expression

   37 logical_or_expression: logical_and_expression
   38                      | logical_or_expression "||" logical_and_expression

   39 assignment_expression: logical_or_expression
   40                      | unary_expression assignment_operator assignment_expression

   41 assignment_operator: "="

   42 match_head: "match" "identifier" "->" declaration_specifiers

   43 match_expression: assignment_expression
   44                 | match_binders_list block_end

   45 match_binders_list: match_binders_list_head_start expression_body
   46                   | match_binders_list_head expression_body

   47 match_binders_list_head_start: match_head block_start match_binder_head

   48 match_binders_list_head: match_binders_list match_binder_head

   49 match_binder_head: "|" match_binder_definer "->"

   50 match_binder_definer: "identifier" "(" match_binder_arguments_list ")"
   51                     | "identifier"

   52 match_binder_arguments_list: "identifier"
   53                            | match_binder_arguments_list "," "identifier"

   54 expression_body: match_expression
   55                | flow_expression

   56 expression: expression_body expression_end

   57 declaration_specifiers: declaration_specifier
   58                       | declaration_specifier declaration_specifiers

   59 declaration_specifier: type_specifier_qualifier
   60                      | "fip"

   61 type_specifier: "_Bool, char, or int"
   62               | declared_type_name
   63               | typedef_name

   64 declared_type_name: "type" "identifier"

   65 enumtype_decl_head: "type" "identifier"

   66 block_start: "{"
   67            | "{" "NEW_LINE"

   68 block_end: "}"
   69          | "NEW_LINE" "}"

   70 enumtype_decl_specifier: enumtype_decl_head block_start member_types_declaration_list block_end "NEW_LINE"

   71 member_types_declaration_list: member_types_declaration
   72                              | member_types_declaration_list member_types_declaration

   73 member_types_declaration: "identifier" "(" member_declaration_list ")" ";"
   74                         | "identifier" ";"

   75 member_declaration_list: member_declaration
   76                        | member_declaration_list "," member_declaration

   77 member_declaration: specifier_qualifier_list member_declarator

   78 specifier_qualifier_list: type_specifier_qualifier
   79                         | type_specifier_qualifier specifier_qualifier_list

   80 type_specifier_qualifier: type_specifier

   81 member_declarator: declarator

   82 declarator: pointer direct_declarator
   83           | direct_declarator

   84 pointer: "*" pointer
   85        | "*"

   86 direct_declarator: "identifier"
   87                  | function_declarator

   88 function_declarator: direct_declarator "[" parameter_type_list "]"

   89 parameter_type_list: parameter_list
   90                    | ε

   91 parameter_list: parameter_declaration
   92               | parameter_list "," parameter_declaration

   93 parameter_declaration: declaration_specifiers declarator
   94                      | declaration_specifiers

   95 typedef_name: "type identifier"

   96 expression_statement: match_expression ";"

   97 if_expression_head: "if" "(" expression_body ")"

   98 if_non_split_expression: if_expression_head non_split_expression

   99 if_non_split_expression_else: if_non_split_expression "else"

  100 flow_expression: non_split_expression
  101                | split_expression

  102 non_split_expression: if_non_split_expression_else non_split_expression
  103                     | expression_statement

  104 split_expression: if_expression_head expression_body
  105                 | if_non_split_expression_else split_expression


Terminals, with rules where they appear

    "end of file" (0) 0 6
    error (256)
    "[" (258) 88
    "]" (259) 88
    "(" (260) 12 14 50 73 97
    ")" (261) 12 14 50 73 97
    "NEW_LINE" (262) 5 67 69 70
    "->" (263) 42 49
    "," (264) 17 53 76 92
    "&" (265) 21
    "|" (266) 49
    "*" (267) 22 27 84 85
    "+ or -" <cecko::gt_addop> (268) 23 30
    "!" (269) 24
    "/ or %" <cecko::gt_divop> (270) 28
    "<, >, <=, or >=" <cecko::gt_cmpo> (271) 32
    "== or !=" <cecko::gt_cmpe> (272) 34
    "&&" (273) 36
    "||" (274) 38
    "=" (275) 9 41
    ";" (276) 73 74 96
    ":" (277)
    "{" (278) 66 67
    "}" (279) 68 69
    "type" (280) 64 65
    "_Bool, char, or int" <cecko::gt_etype> (281) 61
    "sizeof" (282)
    "in" (283)
    "let" (284)
    "match" <cecko::match_type> (285) 42
    "fip" (286) 60
    "fn" (287)
    "if" (288) 97
    "else" (289) 99
    "identifier" <cecko::CIName> (290) 14 15 42 50 51 52 53 64 65 73 74 86
    "type identifier" <cecko::CIName> (291) 95
    "integer literal" <int> (292) 10
    "string literal" <cecko::CIName> (293) 11


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    translation_unit (40)
        on left: 1 2
        on right: 0 2
    external_declaration (41)
        on left: 3 4
        on right: 1 2
    expression_end (42)
        on left: 5 6
        on right: 56
    function_definition (43)
        on left: 7
        on right: 3
    function_definition_info (44)
        on left: 8
        on right: 9
    function_definition_head (45)
        on left: 9
        on right: 7
    primary_expression <casem::InstructionWrapper> (46)
        on left: 10 11 12
        on right: 13
    postfix_expression <casem::InstructionWrapper> (47)
        on left: 13 14 15
        on right: 19
    argument_expression_list <casem::InstructionArray> (48)
        on left: 16 17 18
        on right: 14 17
    unary_expression <casem::InstructionWrapper> (49)
        on left: 19 20
        on right: 25 40
    unary_operator <casem::UnaryOperator> (50)
        on left: 21 22 23 24
        on right: 20
    cast_expression <casem::InstructionWrapper> (51)
        on left: 25
        on right: 20 26 27 28
    multiplicative_expression <casem::InstructionWrapper> (52)
        on left: 26 27 28
        on right: 27 28 29 30
    additive_expression <casem::InstructionWrapper> (53)
        on left: 29 30
        on right: 30 31 32
    relational_expression <casem::InstructionWrapper> (54)
        on left: 31 32
        on right: 32 33 34
    equality_expression <casem::InstructionWrapper> (55)
        on left: 33 34
        on right: 34 35 36
    logical_and_expression <casem::InstructionWrapper> (56)
        on left: 35 36
        on right: 36 37 38
    logical_or_expression <casem::InstructionWrapper> (57)
        on left: 37 38
        on right: 38 39
    assignment_expression <casem::InstructionWrapper> (58)
        on left: 39 40
        on right: 16 17 40 43
    assignment_operator <cecko::gt_cass> (59)
        on left: 41
        on right: 40
    match_head <casem::MatchWrapper> (60)
        on left: 42
        on right: 47
    match_expression <casem::InstructionWrapper> (61)
        on left: 43 44
        on right: 54 96
    match_binders_list <casem::MatchWrapper> (62)
        on left: 45 46
        on right: 44 48
    match_binders_list_head_start <casem::MatchBinderListHeadData> (63)
        on left: 47
        on right: 45
    match_binders_list_head <casem::MatchBinderListHeadData> (64)
        on left: 48
        on right: 46
    match_binder_head <casem::MatchBinderChackerData> (65)
        on left: 49
        on right: 47 48
    match_binder_definer <casem::MatchBinderChackerData> (66)
        on left: 50 51
        on right: 49
    match_binder_arguments_list <std::vector<cecko::CIName>> (67)
        on left: 52 53
        on right: 50 53
    expression_body <casem::InstructionWrapper> (68)
        on left: 54 55
        on right: 45 46 56 97 104
    expression <casem::InstructionWrapper> (69)
        on left: 56
        on right: 7 12
    declaration_specifiers <casem::CKTypeRefDefPack> (70)
        on left: 57 58
        on right: 8 42 58 93 94
    declaration_specifier <casem::CKTypeRefDefPack> (71)
        on left: 59 60
        on right: 57 58
    type_specifier <cecko::CKTypeSafeObs> (72)
        on left: 61 62 63
        on right: 80
    declared_type_name <cecko::CIName> (73)
        on left: 64
        on right: 62
    enumtype_decl_head <casem::TaggedTypeDecl> (74)
        on left: 65
        on right: 70
    block_start (75)
        on left: 66 67
        on right: 47 70
    block_end (76)
        on left: 68 69
        on right: 44 70
    enumtype_decl_specifier <cecko::CKStructTypeSafeObs> (77)
        on left: 70
        on right: 4
    member_types_declaration_list <casem::StructObservers> (78)
        on left: 71 72
        on right: 70 72
    member_types_declaration <cecko::CKStructTypeSafeObs> (79)
        on left: 73 74
        on right: 71 72
    member_declaration_list <cecko::CKStructItemArray> (80)
        on left: 75 76
        on right: 73 76
    member_declaration <cecko::CKStructItemArray> (81)
        on left: 77
        on right: 75 76
    specifier_qualifier_list <casem::CKTypeRefDefPack> (82)
        on left: 78 79
        on right: 77 79
    type_specifier_qualifier <casem::CKTypeRefDefPack> (83)
        on left: 80
        on right: 59 78 79
    member_declarator <casem::TypeRefPack_Action> (84)
        on left: 81
        on right: 77
    declarator <casem::TypeRefPack_Action> (85)
        on left: 82 83
        on right: 8 81 93
    pointer <casem::TypeRefPack_Convertor> (86)
        on left: 84 85
        on right: 82 84
    direct_declarator <casem::TypeRefPack_Action> (87)
        on left: 86 87
        on right: 82 83 88
    function_declarator <casem::TypeRefPack_Action> (88)
        on left: 88
        on right: 87
    parameter_type_list <casem::TRDArray> (89)
        on left: 89 90
        on right: 88
    parameter_list <casem::TRDArray> (90)
        on left: 91 92
        on right: 89 92
    parameter_declaration <casem::CKTypeRefDefPack> (91)
        on left: 93 94
        on right: 91 92
    typedef_name <cecko::CIName> (92)
        on left: 95
        on right: 63
    expression_statement <casem::IfExpressionData> (93)
        on left: 96
        on right: 103
    if_expression_head <casem::IfExpressionData> (94)
        on left: 97
        on right: 98 104
    if_non_split_expression <casem::IfExpressionData> (95)
        on left: 98
        on right: 99
    if_non_split_expression_else <casem::IfExpressionData> (96)
        on left: 99
        on right: 102 105
    flow_expression <casem::IfExpressionData> (97)
        on left: 100 101
        on right: 55
    non_split_expression <casem::IfExpressionData> (98)
        on left: 102 103
        on right: 98 100 102
    split_expression <casem::IfExpressionData> (99)
        on left: 104 105
        on right: 101 105


State 0

    0 $accept: • translation_unit "end of file"

    "type"                 shift, and go to state 1
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    translation_unit          go to state 5
    external_declaration      go to state 6
    function_definition       go to state 7
    function_definition_info  go to state 8
    function_definition_head  go to state 9
    declaration_specifiers    go to state 10
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    enumtype_decl_head        go to state 14
    enumtype_decl_specifier   go to state 15
    type_specifier_qualifier  go to state 16
    typedef_name              go to state 17


State 1

   64 declared_type_name: "type" • "identifier"
   65 enumtype_decl_head: "type" • "identifier"

    "identifier"  shift, and go to state 18


State 2

   61 type_specifier: "_Bool, char, or int" •

    $default  reduce using rule 61 (type_specifier)


State 3

   60 declaration_specifier: "fip" •

    $default  reduce using rule 60 (declaration_specifier)


State 4

   95 typedef_name: "type identifier" •

    $default  reduce using rule 95 (typedef_name)


State 5

    0 $accept: translation_unit • "end of file"
    2 translation_unit: translation_unit • external_declaration

    "end of file"          shift, and go to state 19
    "type"                 shift, and go to state 1
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    external_declaration      go to state 20
    function_definition       go to state 7
    function_definition_info  go to state 8
    function_definition_head  go to state 9
    declaration_specifiers    go to state 10
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    enumtype_decl_head        go to state 14
    enumtype_decl_specifier   go to state 15
    type_specifier_qualifier  go to state 16
    typedef_name              go to state 17


State 6

    1 translation_unit: external_declaration •

    $default  reduce using rule 1 (translation_unit)


State 7

    3 external_declaration: function_definition •

    $default  reduce using rule 3 (external_declaration)


State 8

    9 function_definition_head: function_definition_info • "="

    "="  shift, and go to state 21


State 9

    7 function_definition: function_definition_head • expression

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "match"            shift, and go to state 27
    "if"               shift, and go to state 28
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression             go to state 32
    postfix_expression             go to state 33
    unary_expression               go to state 34
    unary_operator                 go to state 35
    cast_expression                go to state 36
    multiplicative_expression      go to state 37
    additive_expression            go to state 38
    relational_expression          go to state 39
    equality_expression            go to state 40
    logical_and_expression         go to state 41
    logical_or_expression          go to state 42
    assignment_expression          go to state 43
    match_head                     go to state 44
    match_expression               go to state 45
    match_binders_list             go to state 46
    match_binders_list_head_start  go to state 47
    match_binders_list_head        go to state 48
    expression_body                go to state 49
    expression                     go to state 50
    expression_statement           go to state 51
    if_expression_head             go to state 52
    if_non_split_expression        go to state 53
    if_non_split_expression_else   go to state 54
    flow_expression                go to state 55
    non_split_expression           go to state 56
    split_expression               go to state 57


State 10

    8 function_definition_info: declaration_specifiers • declarator

    "*"           shift, and go to state 58
    "identifier"  shift, and go to state 59

    declarator           go to state 60
    pointer              go to state 61
    direct_declarator    go to state 62
    function_declarator  go to state 63


State 11

   57 declaration_specifiers: declaration_specifier •
   58                       | declaration_specifier • declaration_specifiers

    "type"                 shift, and go to state 64
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    $default  reduce using rule 57 (declaration_specifiers)

    declaration_specifiers    go to state 65
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    type_specifier_qualifier  go to state 16
    typedef_name              go to state 17


State 12

   80 type_specifier_qualifier: type_specifier •

    $default  reduce using rule 80 (type_specifier_qualifier)


State 13

   62 type_specifier: declared_type_name •

    $default  reduce using rule 62 (type_specifier)


State 14

   70 enumtype_decl_specifier: enumtype_decl_head • block_start member_types_declaration_list block_end "NEW_LINE"

    "{"  shift, and go to state 66

    block_start  go to state 67


State 15

    4 external_declaration: enumtype_decl_specifier •

    $default  reduce using rule 4 (external_declaration)


State 16

   59 declaration_specifier: type_specifier_qualifier •

    $default  reduce using rule 59 (declaration_specifier)


State 17

   63 type_specifier: typedef_name •

    $default  reduce using rule 63 (type_specifier)


State 18

   64 declared_type_name: "type" "identifier" •
   65 enumtype_decl_head: "type" "identifier" •

    "{"       reduce using rule 65 (enumtype_decl_head)
    $default  reduce using rule 64 (declared_type_name)


State 19

    0 $accept: translation_unit "end of file" •

    $default  accept


State 20

    2 translation_unit: translation_unit external_declaration •

    $default  reduce using rule 2 (translation_unit)


State 21

    9 function_definition_head: function_definition_info "=" •

    $default  reduce using rule 9 (function_definition_head)


State 22

   12 primary_expression: "(" • expression ")"

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "match"            shift, and go to state 27
    "if"               shift, and go to state 28
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression             go to state 32
    postfix_expression             go to state 33
    unary_expression               go to state 34
    unary_operator                 go to state 35
    cast_expression                go to state 36
    multiplicative_expression      go to state 37
    additive_expression            go to state 38
    relational_expression          go to state 39
    equality_expression            go to state 40
    logical_and_expression         go to state 41
    logical_or_expression          go to state 42
    assignment_expression          go to state 43
    match_head                     go to state 44
    match_expression               go to state 45
    match_binders_list             go to state 46
    match_binders_list_head_start  go to state 47
    match_binders_list_head        go to state 48
    expression_body                go to state 49
    expression                     go to state 68
    expression_statement           go to state 51
    if_expression_head             go to state 52
    if_non_split_expression        go to state 53
    if_non_split_expression_else   go to state 54
    flow_expression                go to state 55
    non_split_expression           go to state 56
    split_expression               go to state 57


State 23

   21 unary_operator: "&" •

    $default  reduce using rule 21 (unary_operator)


State 24

   22 unary_operator: "*" •

    $default  reduce using rule 22 (unary_operator)


State 25

   23 unary_operator: "+ or -" •

    $default  reduce using rule 23 (unary_operator)


State 26

   24 unary_operator: "!" •

    $default  reduce using rule 24 (unary_operator)


State 27

   42 match_head: "match" • "identifier" "->" declaration_specifiers

    "identifier"  shift, and go to state 69


State 28

   97 if_expression_head: "if" • "(" expression_body ")"

    "("  shift, and go to state 70


State 29

   14 postfix_expression: "identifier" • "(" argument_expression_list ")"
   15                   | "identifier" •

    "("  shift, and go to state 71

    $default  reduce using rule 15 (postfix_expression)


State 30

   10 primary_expression: "integer literal" •

    $default  reduce using rule 10 (primary_expression)


State 31

   11 primary_expression: "string literal" •

    $default  reduce using rule 11 (primary_expression)


State 32

   13 postfix_expression: primary_expression •

    $default  reduce using rule 13 (postfix_expression)


State 33

   19 unary_expression: postfix_expression •

    $default  reduce using rule 19 (unary_expression)


State 34

   25 cast_expression: unary_expression •
   40 assignment_expression: unary_expression • assignment_operator assignment_expression

    "="  shift, and go to state 72

    $default  reduce using rule 25 (cast_expression)

    assignment_operator  go to state 73


State 35

   20 unary_expression: unary_operator • cast_expression

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression  go to state 32
    postfix_expression  go to state 33
    unary_expression    go to state 74
    unary_operator      go to state 35
    cast_expression     go to state 75


State 36

   26 multiplicative_expression: cast_expression •

    $default  reduce using rule 26 (multiplicative_expression)


State 37

   27 multiplicative_expression: multiplicative_expression • "*" cast_expression
   28                          | multiplicative_expression • "/ or %" cast_expression
   29 additive_expression: multiplicative_expression •

    "*"       shift, and go to state 76
    "/ or %"  shift, and go to state 77

    $default  reduce using rule 29 (additive_expression)


State 38

   30 additive_expression: additive_expression • "+ or -" multiplicative_expression
   31 relational_expression: additive_expression •

    "+ or -"  shift, and go to state 78

    $default  reduce using rule 31 (relational_expression)


State 39

   32 relational_expression: relational_expression • "<, >, <=, or >=" additive_expression
   33 equality_expression: relational_expression •

    "<, >, <=, or >="  shift, and go to state 79

    $default  reduce using rule 33 (equality_expression)


State 40

   34 equality_expression: equality_expression • "== or !=" relational_expression
   35 logical_and_expression: equality_expression •

    "== or !="  shift, and go to state 80

    $default  reduce using rule 35 (logical_and_expression)


State 41

   36 logical_and_expression: logical_and_expression • "&&" equality_expression
   37 logical_or_expression: logical_and_expression •

    "&&"  shift, and go to state 81

    $default  reduce using rule 37 (logical_or_expression)


State 42

   38 logical_or_expression: logical_or_expression • "||" logical_and_expression
   39 assignment_expression: logical_or_expression •

    "||"  shift, and go to state 82

    $default  reduce using rule 39 (assignment_expression)


State 43

   43 match_expression: assignment_expression •

    $default  reduce using rule 43 (match_expression)


State 44

   47 match_binders_list_head_start: match_head • block_start match_binder_head

    "{"  shift, and go to state 66

    block_start  go to state 83


State 45

   54 expression_body: match_expression •
   96 expression_statement: match_expression • ";"

    ";"  shift, and go to state 84

    $default  reduce using rule 54 (expression_body)


State 46

   44 match_expression: match_binders_list • block_end
   48 match_binders_list_head: match_binders_list • match_binder_head

    "NEW_LINE"  shift, and go to state 85
    "|"         shift, and go to state 86
    "}"         shift, and go to state 87

    match_binder_head  go to state 88
    block_end          go to state 89


State 47

   45 match_binders_list: match_binders_list_head_start • expression_body

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "match"            shift, and go to state 27
    "if"               shift, and go to state 28
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression             go to state 32
    postfix_expression             go to state 33
    unary_expression               go to state 34
    unary_operator                 go to state 35
    cast_expression                go to state 36
    multiplicative_expression      go to state 37
    additive_expression            go to state 38
    relational_expression          go to state 39
    equality_expression            go to state 40
    logical_and_expression         go to state 41
    logical_or_expression          go to state 42
    assignment_expression          go to state 43
    match_head                     go to state 44
    match_expression               go to state 45
    match_binders_list             go to state 46
    match_binders_list_head_start  go to state 47
    match_binders_list_head        go to state 48
    expression_body                go to state 90
    expression_statement           go to state 51
    if_expression_head             go to state 52
    if_non_split_expression        go to state 53
    if_non_split_expression_else   go to state 54
    flow_expression                go to state 55
    non_split_expression           go to state 56
    split_expression               go to state 57


State 48

   46 match_binders_list: match_binders_list_head • expression_body

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "match"            shift, and go to state 27
    "if"               shift, and go to state 28
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression             go to state 32
    postfix_expression             go to state 33
    unary_expression               go to state 34
    unary_operator                 go to state 35
    cast_expression                go to state 36
    multiplicative_expression      go to state 37
    additive_expression            go to state 38
    relational_expression          go to state 39
    equality_expression            go to state 40
    logical_and_expression         go to state 41
    logical_or_expression          go to state 42
    assignment_expression          go to state 43
    match_head                     go to state 44
    match_expression               go to state 45
    match_binders_list             go to state 46
    match_binders_list_head_start  go to state 47
    match_binders_list_head        go to state 48
    expression_body                go to state 91
    expression_statement           go to state 51
    if_expression_head             go to state 52
    if_non_split_expression        go to state 53
    if_non_split_expression_else   go to state 54
    flow_expression                go to state 55
    non_split_expression           go to state 56
    split_expression               go to state 57


State 49

   56 expression: expression_body • expression_end

    "end of file"  shift, and go to state 92
    "NEW_LINE"     shift, and go to state 93

    expression_end  go to state 94


State 50

    7 function_definition: function_definition_head expression •

    $default  reduce using rule 7 (function_definition)


State 51

  103 non_split_expression: expression_statement •

    $default  reduce using rule 103 (non_split_expression)


State 52

   98 if_non_split_expression: if_expression_head • non_split_expression
  104 split_expression: if_expression_head • expression_body

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "match"            shift, and go to state 27
    "if"               shift, and go to state 28
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression             go to state 32
    postfix_expression             go to state 33
    unary_expression               go to state 34
    unary_operator                 go to state 35
    cast_expression                go to state 36
    multiplicative_expression      go to state 37
    additive_expression            go to state 38
    relational_expression          go to state 39
    equality_expression            go to state 40
    logical_and_expression         go to state 41
    logical_or_expression          go to state 42
    assignment_expression          go to state 43
    match_head                     go to state 44
    match_expression               go to state 45
    match_binders_list             go to state 46
    match_binders_list_head_start  go to state 47
    match_binders_list_head        go to state 48
    expression_body                go to state 95
    expression_statement           go to state 51
    if_expression_head             go to state 52
    if_non_split_expression        go to state 53
    if_non_split_expression_else   go to state 54
    flow_expression                go to state 55
    non_split_expression           go to state 96
    split_expression               go to state 57


State 53

   99 if_non_split_expression_else: if_non_split_expression • "else"

    "else"  shift, and go to state 97


State 54

  102 non_split_expression: if_non_split_expression_else • non_split_expression
  105 split_expression: if_non_split_expression_else • split_expression

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "match"            shift, and go to state 27
    "if"               shift, and go to state 28
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression             go to state 32
    postfix_expression             go to state 33
    unary_expression               go to state 34
    unary_operator                 go to state 35
    cast_expression                go to state 36
    multiplicative_expression      go to state 37
    additive_expression            go to state 38
    relational_expression          go to state 39
    equality_expression            go to state 40
    logical_and_expression         go to state 41
    logical_or_expression          go to state 42
    assignment_expression          go to state 43
    match_head                     go to state 44
    match_expression               go to state 98
    match_binders_list             go to state 46
    match_binders_list_head_start  go to state 47
    match_binders_list_head        go to state 48
    expression_statement           go to state 51
    if_expression_head             go to state 52
    if_non_split_expression        go to state 53
    if_non_split_expression_else   go to state 54
    non_split_expression           go to state 99
    split_expression               go to state 100


State 55

   55 expression_body: flow_expression •

    $default  reduce using rule 55 (expression_body)


State 56

  100 flow_expression: non_split_expression •

    $default  reduce using rule 100 (flow_expression)


State 57

  101 flow_expression: split_expression •

    $default  reduce using rule 101 (flow_expression)


State 58

   84 pointer: "*" • pointer
   85        | "*" •

    "*"  shift, and go to state 58

    $default  reduce using rule 85 (pointer)

    pointer  go to state 101


State 59

   86 direct_declarator: "identifier" •

    $default  reduce using rule 86 (direct_declarator)


State 60

    8 function_definition_info: declaration_specifiers declarator •

    $default  reduce using rule 8 (function_definition_info)


State 61

   82 declarator: pointer • direct_declarator

    "identifier"  shift, and go to state 59

    direct_declarator    go to state 102
    function_declarator  go to state 63


State 62

   83 declarator: direct_declarator •
   88 function_declarator: direct_declarator • "[" parameter_type_list "]"

    "["  shift, and go to state 103

    $default  reduce using rule 83 (declarator)


State 63

   87 direct_declarator: function_declarator •

    $default  reduce using rule 87 (direct_declarator)


State 64

   64 declared_type_name: "type" • "identifier"

    "identifier"  shift, and go to state 104


State 65

   58 declaration_specifiers: declaration_specifier declaration_specifiers •

    $default  reduce using rule 58 (declaration_specifiers)


State 66

   66 block_start: "{" •
   67            | "{" • "NEW_LINE"

    "NEW_LINE"  shift, and go to state 105

    $default  reduce using rule 66 (block_start)


State 67

   70 enumtype_decl_specifier: enumtype_decl_head block_start • member_types_declaration_list block_end "NEW_LINE"

    "identifier"  shift, and go to state 106

    member_types_declaration_list  go to state 107
    member_types_declaration       go to state 108


State 68

   12 primary_expression: "(" expression • ")"

    ")"  shift, and go to state 109


State 69

   42 match_head: "match" "identifier" • "->" declaration_specifiers

    "->"  shift, and go to state 110


State 70

   97 if_expression_head: "if" "(" • expression_body ")"

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "match"            shift, and go to state 27
    "if"               shift, and go to state 28
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression             go to state 32
    postfix_expression             go to state 33
    unary_expression               go to state 34
    unary_operator                 go to state 35
    cast_expression                go to state 36
    multiplicative_expression      go to state 37
    additive_expression            go to state 38
    relational_expression          go to state 39
    equality_expression            go to state 40
    logical_and_expression         go to state 41
    logical_or_expression          go to state 42
    assignment_expression          go to state 43
    match_head                     go to state 44
    match_expression               go to state 45
    match_binders_list             go to state 46
    match_binders_list_head_start  go to state 47
    match_binders_list_head        go to state 48
    expression_body                go to state 111
    expression_statement           go to state 51
    if_expression_head             go to state 52
    if_non_split_expression        go to state 53
    if_non_split_expression_else   go to state 54
    flow_expression                go to state 55
    non_split_expression           go to state 56
    split_expression               go to state 57


State 71

   14 postfix_expression: "identifier" "(" • argument_expression_list ")"

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    $default  reduce using rule 18 (argument_expression_list)

    primary_expression         go to state 32
    postfix_expression         go to state 33
    argument_expression_list   go to state 112
    unary_expression           go to state 34
    unary_operator             go to state 35
    cast_expression            go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    assignment_expression      go to state 113


State 72

   41 assignment_operator: "=" •

    $default  reduce using rule 41 (assignment_operator)


State 73

   40 assignment_expression: unary_expression assignment_operator • assignment_expression

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_expression           go to state 34
    unary_operator             go to state 35
    cast_expression            go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    assignment_expression      go to state 114


State 74

   25 cast_expression: unary_expression •

    $default  reduce using rule 25 (cast_expression)


State 75

   20 unary_expression: unary_operator cast_expression •

    $default  reduce using rule 20 (unary_expression)


State 76

   27 multiplicative_expression: multiplicative_expression "*" • cast_expression

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression  go to state 32
    postfix_expression  go to state 33
    unary_expression    go to state 74
    unary_operator      go to state 35
    cast_expression     go to state 115


State 77

   28 multiplicative_expression: multiplicative_expression "/ or %" • cast_expression

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression  go to state 32
    postfix_expression  go to state 33
    unary_expression    go to state 74
    unary_operator      go to state 35
    cast_expression     go to state 116


State 78

   30 additive_expression: additive_expression "+ or -" • multiplicative_expression

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_expression           go to state 74
    unary_operator             go to state 35
    cast_expression            go to state 36
    multiplicative_expression  go to state 117


State 79

   32 relational_expression: relational_expression "<, >, <=, or >=" • additive_expression

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_expression           go to state 74
    unary_operator             go to state 35
    cast_expression            go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 118


State 80

   34 equality_expression: equality_expression "== or !=" • relational_expression

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_expression           go to state 74
    unary_operator             go to state 35
    cast_expression            go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 119


State 81

   36 logical_and_expression: logical_and_expression "&&" • equality_expression

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_expression           go to state 74
    unary_operator             go to state 35
    cast_expression            go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 120


State 82

   38 logical_or_expression: logical_or_expression "||" • logical_and_expression

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_expression           go to state 74
    unary_operator             go to state 35
    cast_expression            go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 121


State 83

   47 match_binders_list_head_start: match_head block_start • match_binder_head

    "|"  shift, and go to state 86

    match_binder_head  go to state 122


State 84

   96 expression_statement: match_expression ";" •

    $default  reduce using rule 96 (expression_statement)


State 85

   69 block_end: "NEW_LINE" • "}"

    "}"  shift, and go to state 123


State 86

   49 match_binder_head: "|" • match_binder_definer "->"

    "identifier"  shift, and go to state 124

    match_binder_definer  go to state 125


State 87

   68 block_end: "}" •

    $default  reduce using rule 68 (block_end)


State 88

   48 match_binders_list_head: match_binders_list match_binder_head •

    $default  reduce using rule 48 (match_binders_list_head)


State 89

   44 match_expression: match_binders_list block_end •

    $default  reduce using rule 44 (match_expression)


State 90

   45 match_binders_list: match_binders_list_head_start expression_body •

    $default  reduce using rule 45 (match_binders_list)


State 91

   46 match_binders_list: match_binders_list_head expression_body •

    $default  reduce using rule 46 (match_binders_list)


State 92

    6 expression_end: "end of file" •

    $default  reduce using rule 6 (expression_end)


State 93

    5 expression_end: "NEW_LINE" •

    $default  reduce using rule 5 (expression_end)


State 94

   56 expression: expression_body expression_end •

    $default  reduce using rule 56 (expression)


State 95

  104 split_expression: if_expression_head expression_body •

    $default  reduce using rule 104 (split_expression)


State 96

   98 if_non_split_expression: if_expression_head non_split_expression •
  100 flow_expression: non_split_expression •

    "else"    reduce using rule 98 (if_non_split_expression)
    $default  reduce using rule 100 (flow_expression)


State 97

   99 if_non_split_expression_else: if_non_split_expression "else" •

    $default  reduce using rule 99 (if_non_split_expression_else)


State 98

   96 expression_statement: match_expression • ";"

    ";"  shift, and go to state 84


State 99

  102 non_split_expression: if_non_split_expression_else non_split_expression •

    $default  reduce using rule 102 (non_split_expression)


State 100

  105 split_expression: if_non_split_expression_else split_expression •

    $default  reduce using rule 105 (split_expression)


State 101

   84 pointer: "*" pointer •

    $default  reduce using rule 84 (pointer)


State 102

   82 declarator: pointer direct_declarator •
   88 function_declarator: direct_declarator • "[" parameter_type_list "]"

    "["  shift, and go to state 103

    $default  reduce using rule 82 (declarator)


State 103

   88 function_declarator: direct_declarator "[" • parameter_type_list "]"

    "type"                 shift, and go to state 64
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    $default  reduce using rule 90 (parameter_type_list)

    declaration_specifiers    go to state 126
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    type_specifier_qualifier  go to state 16
    parameter_type_list       go to state 127
    parameter_list            go to state 128
    parameter_declaration     go to state 129
    typedef_name              go to state 17


State 104

   64 declared_type_name: "type" "identifier" •

    $default  reduce using rule 64 (declared_type_name)


State 105

   67 block_start: "{" "NEW_LINE" •

    $default  reduce using rule 67 (block_start)


State 106

   73 member_types_declaration: "identifier" • "(" member_declaration_list ")" ";"
   74                         | "identifier" • ";"

    "("  shift, and go to state 130
    ";"  shift, and go to state 131


State 107

   70 enumtype_decl_specifier: enumtype_decl_head block_start member_types_declaration_list • block_end "NEW_LINE"
   72 member_types_declaration_list: member_types_declaration_list • member_types_declaration

    "NEW_LINE"    shift, and go to state 85
    "}"           shift, and go to state 87
    "identifier"  shift, and go to state 106

    block_end                 go to state 132
    member_types_declaration  go to state 133


State 108

   71 member_types_declaration_list: member_types_declaration •

    $default  reduce using rule 71 (member_types_declaration_list)


State 109

   12 primary_expression: "(" expression ")" •

    $default  reduce using rule 12 (primary_expression)


State 110

   42 match_head: "match" "identifier" "->" • declaration_specifiers

    "type"                 shift, and go to state 64
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    declaration_specifiers    go to state 134
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    type_specifier_qualifier  go to state 16
    typedef_name              go to state 17


State 111

   97 if_expression_head: "if" "(" expression_body • ")"

    ")"  shift, and go to state 135


State 112

   14 postfix_expression: "identifier" "(" argument_expression_list • ")"
   17 argument_expression_list: argument_expression_list • "," assignment_expression

    ")"  shift, and go to state 136
    ","  shift, and go to state 137


State 113

   16 argument_expression_list: assignment_expression •

    $default  reduce using rule 16 (argument_expression_list)


State 114

   40 assignment_expression: unary_expression assignment_operator assignment_expression •

    $default  reduce using rule 40 (assignment_expression)


State 115

   27 multiplicative_expression: multiplicative_expression "*" cast_expression •

    $default  reduce using rule 27 (multiplicative_expression)


State 116

   28 multiplicative_expression: multiplicative_expression "/ or %" cast_expression •

    $default  reduce using rule 28 (multiplicative_expression)


State 117

   27 multiplicative_expression: multiplicative_expression • "*" cast_expression
   28                          | multiplicative_expression • "/ or %" cast_expression
   30 additive_expression: additive_expression "+ or -" multiplicative_expression •

    "*"       shift, and go to state 76
    "/ or %"  shift, and go to state 77

    $default  reduce using rule 30 (additive_expression)


State 118

   30 additive_expression: additive_expression • "+ or -" multiplicative_expression
   32 relational_expression: relational_expression "<, >, <=, or >=" additive_expression •

    "+ or -"  shift, and go to state 78

    $default  reduce using rule 32 (relational_expression)


State 119

   32 relational_expression: relational_expression • "<, >, <=, or >=" additive_expression
   34 equality_expression: equality_expression "== or !=" relational_expression •

    "<, >, <=, or >="  shift, and go to state 79

    $default  reduce using rule 34 (equality_expression)


State 120

   34 equality_expression: equality_expression • "== or !=" relational_expression
   36 logical_and_expression: logical_and_expression "&&" equality_expression •

    "== or !="  shift, and go to state 80

    $default  reduce using rule 36 (logical_and_expression)


State 121

   36 logical_and_expression: logical_and_expression • "&&" equality_expression
   38 logical_or_expression: logical_or_expression "||" logical_and_expression •

    "&&"  shift, and go to state 81

    $default  reduce using rule 38 (logical_or_expression)


State 122

   47 match_binders_list_head_start: match_head block_start match_binder_head •

    $default  reduce using rule 47 (match_binders_list_head_start)


State 123

   69 block_end: "NEW_LINE" "}" •

    $default  reduce using rule 69 (block_end)


State 124

   50 match_binder_definer: "identifier" • "(" match_binder_arguments_list ")"
   51                     | "identifier" •

    "("  shift, and go to state 138

    $default  reduce using rule 51 (match_binder_definer)


State 125

   49 match_binder_head: "|" match_binder_definer • "->"

    "->"  shift, and go to state 139


State 126

   93 parameter_declaration: declaration_specifiers • declarator
   94                      | declaration_specifiers •

    "*"           shift, and go to state 58
    "identifier"  shift, and go to state 59

    $default  reduce using rule 94 (parameter_declaration)

    declarator           go to state 140
    pointer              go to state 61
    direct_declarator    go to state 62
    function_declarator  go to state 63


State 127

   88 function_declarator: direct_declarator "[" parameter_type_list • "]"

    "]"  shift, and go to state 141


State 128

   89 parameter_type_list: parameter_list •
   92 parameter_list: parameter_list • "," parameter_declaration

    ","  shift, and go to state 142

    $default  reduce using rule 89 (parameter_type_list)


State 129

   91 parameter_list: parameter_declaration •

    $default  reduce using rule 91 (parameter_list)


State 130

   73 member_types_declaration: "identifier" "(" • member_declaration_list ")" ";"

    "type"                 shift, and go to state 64
    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 4

    type_specifier            go to state 12
    declared_type_name        go to state 13
    member_declaration_list   go to state 143
    member_declaration        go to state 144
    specifier_qualifier_list  go to state 145
    type_specifier_qualifier  go to state 146
    typedef_name              go to state 17


State 131

   74 member_types_declaration: "identifier" ";" •

    $default  reduce using rule 74 (member_types_declaration)


State 132

   70 enumtype_decl_specifier: enumtype_decl_head block_start member_types_declaration_list block_end • "NEW_LINE"

    "NEW_LINE"  shift, and go to state 147


State 133

   72 member_types_declaration_list: member_types_declaration_list member_types_declaration •

    $default  reduce using rule 72 (member_types_declaration_list)


State 134

   42 match_head: "match" "identifier" "->" declaration_specifiers •

    $default  reduce using rule 42 (match_head)


State 135

   97 if_expression_head: "if" "(" expression_body ")" •

    $default  reduce using rule 97 (if_expression_head)


State 136

   14 postfix_expression: "identifier" "(" argument_expression_list ")" •

    $default  reduce using rule 14 (postfix_expression)


State 137

   17 argument_expression_list: argument_expression_list "," • assignment_expression

    "("                shift, and go to state 22
    "&"                shift, and go to state 23
    "*"                shift, and go to state 24
    "+ or -"           shift, and go to state 25
    "!"                shift, and go to state 26
    "identifier"       shift, and go to state 29
    "integer literal"  shift, and go to state 30
    "string literal"   shift, and go to state 31

    primary_expression         go to state 32
    postfix_expression         go to state 33
    unary_expression           go to state 34
    unary_operator             go to state 35
    cast_expression            go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    assignment_expression      go to state 148


State 138

   50 match_binder_definer: "identifier" "(" • match_binder_arguments_list ")"

    "identifier"  shift, and go to state 149

    match_binder_arguments_list  go to state 150


State 139

   49 match_binder_head: "|" match_binder_definer "->" •

    $default  reduce using rule 49 (match_binder_head)


State 140

   93 parameter_declaration: declaration_specifiers declarator •

    $default  reduce using rule 93 (parameter_declaration)


State 141

   88 function_declarator: direct_declarator "[" parameter_type_list "]" •

    $default  reduce using rule 88 (function_declarator)


State 142

   92 parameter_list: parameter_list "," • parameter_declaration

    "type"                 shift, and go to state 64
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    declaration_specifiers    go to state 126
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    type_specifier_qualifier  go to state 16
    parameter_declaration     go to state 151
    typedef_name              go to state 17


State 143

   73 member_types_declaration: "identifier" "(" member_declaration_list • ")" ";"
   76 member_declaration_list: member_declaration_list • "," member_declaration

    ")"  shift, and go to state 152
    ","  shift, and go to state 153


State 144

   75 member_declaration_list: member_declaration •

    $default  reduce using rule 75 (member_declaration_list)


State 145

   77 member_declaration: specifier_qualifier_list • member_declarator

    "*"           shift, and go to state 58
    "identifier"  shift, and go to state 59

    member_declarator    go to state 154
    declarator           go to state 155
    pointer              go to state 61
    direct_declarator    go to state 62
    function_declarator  go to state 63


State 146

   78 specifier_qualifier_list: type_specifier_qualifier •
   79                         | type_specifier_qualifier • specifier_qualifier_list

    "type"                 shift, and go to state 64
    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 4

    $default  reduce using rule 78 (specifier_qualifier_list)

    type_specifier            go to state 12
    declared_type_name        go to state 13
    specifier_qualifier_list  go to state 156
    type_specifier_qualifier  go to state 146
    typedef_name              go to state 17


State 147

   70 enumtype_decl_specifier: enumtype_decl_head block_start member_types_declaration_list block_end "NEW_LINE" •

    $default  reduce using rule 70 (enumtype_decl_specifier)


State 148

   17 argument_expression_list: argument_expression_list "," assignment_expression •

    $default  reduce using rule 17 (argument_expression_list)


State 149

   52 match_binder_arguments_list: "identifier" •

    $default  reduce using rule 52 (match_binder_arguments_list)


State 150

   50 match_binder_definer: "identifier" "(" match_binder_arguments_list • ")"
   53 match_binder_arguments_list: match_binder_arguments_list • "," "identifier"

    ")"  shift, and go to state 157
    ","  shift, and go to state 158


State 151

   92 parameter_list: parameter_list "," parameter_declaration •

    $default  reduce using rule 92 (parameter_list)


State 152

   73 member_types_declaration: "identifier" "(" member_declaration_list ")" • ";"

    ";"  shift, and go to state 159


State 153

   76 member_declaration_list: member_declaration_list "," • member_declaration

    "type"                 shift, and go to state 64
    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 4

    type_specifier            go to state 12
    declared_type_name        go to state 13
    member_declaration        go to state 160
    specifier_qualifier_list  go to state 145
    type_specifier_qualifier  go to state 146
    typedef_name              go to state 17


State 154

   77 member_declaration: specifier_qualifier_list member_declarator •

    $default  reduce using rule 77 (member_declaration)


State 155

   81 member_declarator: declarator •

    $default  reduce using rule 81 (member_declarator)


State 156

   79 specifier_qualifier_list: type_specifier_qualifier specifier_qualifier_list •

    $default  reduce using rule 79 (specifier_qualifier_list)


State 157

   50 match_binder_definer: "identifier" "(" match_binder_arguments_list ")" •

    $default  reduce using rule 50 (match_binder_definer)


State 158

   53 match_binder_arguments_list: match_binder_arguments_list "," • "identifier"

    "identifier"  shift, and go to state 161


State 159

   73 member_types_declaration: "identifier" "(" member_declaration_list ")" ";" •

    $default  reduce using rule 73 (member_types_declaration)


State 160

   76 member_declaration_list: member_declaration_list "," member_declaration •

    $default  reduce using rule 76 (member_declaration_list)


State 161

   53 match_binder_arguments_list: match_binder_arguments_list "," "identifier" •

    $default  reduce using rule 53 (match_binder_arguments_list)
