Terminals unused in grammar

    ":"
    "sizeof"
    "in"
    "let"
    "fn"


Grammar

    0 $accept: translation_unit "end of file"

    1 translation_unit: external_declaration
    2                 | translation_unit external_declaration

    3 external_declaration: function_definition
    4                     | enumtype_decl_specifier

    5 expression_end: "NEW_LINE"
    6               | "end of file"

    7 function_definition: function_definition_head expression
    8                    | function_definition_info ";" expression_end

    9 function_definition_info: declaration_specifiers declarator

   10 function_definition_head: function_definition_info "="

   11 primary_expression: "integer literal"
   12                   | "string literal"
   13                   | "(" expression_body ")"

   14 postfix_expression: primary_expression
   15                   | "identifier" "(" argument_expression_list ")"
   16                   | "identifier"

   17 argument_expression_list: assignment_expression
   18                         | argument_expression_list "," assignment_expression
   19                         | ε

   20 unary_expression: postfix_expression
   21                 | unary_operator cast_expression

   22 unary_operator: "&"
   23               | "*"
   24               | "+ or -"
   25               | "!"

   26 cast_expression: unary_expression

   27 multiplicative_expression: cast_expression
   28                          | multiplicative_expression "*" cast_expression
   29                          | multiplicative_expression "/ or %" cast_expression

   30 additive_expression: multiplicative_expression
   31                    | additive_expression "+ or -" multiplicative_expression

   32 relational_expression: additive_expression
   33                      | relational_expression "<, >, <=, or >=" additive_expression

   34 equality_expression: relational_expression
   35                    | equality_expression "== or !=" relational_expression

   36 logical_and_expression: equality_expression
   37                       | logical_and_expression "&&" equality_expression

   38 logical_or_expression: logical_and_expression
   39                      | logical_or_expression "||" logical_and_expression

   40 assignment_expression: logical_or_expression
   41                      | unary_expression assignment_operator assignment_expression

   42 assignment_operator: "="

   43 match_head: "match" assignment_expression "->" declaration_specifiers

   44 match_expression: assignment_expression
   45                 | match_binders_list block_end

   46 match_binders_list: match_binders_list_head_start expression_body
   47                   | match_binders_list_head expression_body

   48 match_binders_list_head_start: match_head block_start match_binder_head

   49 match_binders_list_head: match_binders_list match_binder_head

   50 match_binder_head: "|" match_binder_definer "->"

   51 match_binder_definer: "identifier" "(" match_binder_arguments_list ")"
   52                     | "identifier"

   53 match_binder_arguments_list: "identifier"
   54                            | match_binder_arguments_list "," "identifier"

   55 expression_body: match_expression
   56                | flow_expression

   57 expression: expression_body expression_end

   58 declaration_specifiers: declaration_specifier
   59                       | declaration_specifier declaration_specifiers

   60 declaration_specifier: type_specifier_qualifier
   61                      | "fip"

   62 type_specifier: "_Bool, char, or int"
   63               | declared_type_name
   64               | typedef_name

   65 declared_type_name: "type" "identifier"

   66 enumtype_decl_head: "type" "identifier"

   67 block_start: "{"
   68            | "{" "NEW_LINE"

   69 block_end: "}"
   70          | "NEW_LINE" "}"

   71 enumtype_decl_specifier: enumtype_decl_head block_start member_types_declaration_list block_end "NEW_LINE"

   72 member_types_declaration_list: member_types_declaration
   73                              | member_types_declaration_list member_types_declaration

   74 member_types_declaration: "identifier" "(" member_declaration_list ")" ";"
   75                         | "identifier" ";"

   76 member_declaration_list: member_declaration
   77                        | member_declaration_list "," member_declaration

   78 member_declaration: specifier_qualifier_list member_declarator

   79 specifier_qualifier_list: type_specifier_qualifier
   80                         | type_specifier_qualifier specifier_qualifier_list

   81 type_specifier_qualifier: type_specifier

   82 member_declarator: declarator

   83 declarator: pointer direct_declarator
   84           | direct_declarator

   85 pointer: "*" pointer
   86        | "*"

   87 direct_declarator: "identifier"
   88                  | function_declarator

   89 function_declarator: direct_declarator "[" parameter_type_list "]"

   90 parameter_type_list: parameter_list
   91                    | ε

   92 parameter_list: parameter_declaration
   93               | parameter_list "," parameter_declaration

   94 parameter_declaration: declaration_specifiers declarator
   95                      | declaration_specifiers

   96 typedef_name: "type identifier"

   97 expression_statement: match_expression ";"

   98 if_expression_head: "if" "(" expression_body ")"

   99 if_non_split_expression: if_expression_head non_split_expression

  100 if_non_split_expression_else: if_non_split_expression "else"

  101 flow_expression: non_split_expression
  102                | split_expression

  103 non_split_expression: if_non_split_expression_else non_split_expression
  104                     | expression_statement

  105 split_expression: if_expression_head expression_body
  106                 | if_non_split_expression_else split_expression


Terminals, with rules where they appear

    "end of file" (0) 0 6
    error (256)
    "[" (258) 89
    "]" (259) 89
    "(" (260) 13 15 51 74 98
    ")" (261) 13 15 51 74 98
    "NEW_LINE" (262) 5 68 70 71
    "->" (263) 43 50
    "," (264) 18 54 77 93
    "&" (265) 22
    "|" (266) 50
    "*" (267) 23 28 85 86
    "+ or -" <cecko::gt_addop> (268) 24 31
    "!" (269) 25
    "/ or %" <cecko::gt_divop> (270) 29
    "<, >, <=, or >=" <cecko::gt_cmpo> (271) 33
    "== or !=" <cecko::gt_cmpe> (272) 35
    "&&" (273) 37
    "||" (274) 39
    "=" (275) 10 42
    ";" (276) 8 74 75 97
    ":" (277)
    "{" (278) 67 68
    "}" (279) 69 70
    "type" (280) 65 66
    "_Bool, char, or int" <cecko::gt_etype> (281) 62
    "sizeof" (282)
    "in" (283)
    "let" (284)
    "match" <cecko::match_type> (285) 43
    "fip" (286) 61
    "fn" (287)
    "if" (288) 98
    "else" (289) 100
    "identifier" <cecko::CIName> (290) 15 16 51 52 53 54 65 66 74 75 87
    "type identifier" <cecko::CIName> (291) 96
    "integer literal" <int> (292) 11
    "string literal" <cecko::CIName> (293) 12


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    translation_unit (40)
        on left: 1 2
        on right: 0 2
    external_declaration (41)
        on left: 3 4
        on right: 1 2
    expression_end (42)
        on left: 5 6
        on right: 8 57
    function_definition (43)
        on left: 7 8
        on right: 3
    function_definition_info <casem::FunctionDeclarationData> (44)
        on left: 9
        on right: 8 10
    function_definition_head <casem::FunctionDeclarationData> (45)
        on left: 10
        on right: 7
    primary_expression <casem::InstructionWrapper> (46)
        on left: 11 12 13
        on right: 14
    postfix_expression <casem::InstructionWrapper> (47)
        on left: 14 15 16
        on right: 20
    argument_expression_list <casem::InstructionArray> (48)
        on left: 17 18 19
        on right: 15 18
    unary_expression <casem::InstructionWrapper> (49)
        on left: 20 21
        on right: 26 41
    unary_operator <casem::UnaryOperator> (50)
        on left: 22 23 24 25
        on right: 21
    cast_expression <casem::InstructionWrapper> (51)
        on left: 26
        on right: 21 27 28 29
    multiplicative_expression <casem::InstructionWrapper> (52)
        on left: 27 28 29
        on right: 28 29 30 31
    additive_expression <casem::InstructionWrapper> (53)
        on left: 30 31
        on right: 31 32 33
    relational_expression <casem::InstructionWrapper> (54)
        on left: 32 33
        on right: 33 34 35
    equality_expression <casem::InstructionWrapper> (55)
        on left: 34 35
        on right: 35 36 37
    logical_and_expression <casem::InstructionWrapper> (56)
        on left: 36 37
        on right: 37 38 39
    logical_or_expression <casem::InstructionWrapper> (57)
        on left: 38 39
        on right: 39 40
    assignment_expression <casem::InstructionWrapper> (58)
        on left: 40 41
        on right: 17 18 41 43 44
    assignment_operator <cecko::gt_cass> (59)
        on left: 42
        on right: 41
    match_head <casem::MatchWrapper> (60)
        on left: 43
        on right: 48
    match_expression <casem::InstructionWrapper> (61)
        on left: 44 45
        on right: 55 97
    match_binders_list <casem::MatchWrapper> (62)
        on left: 46 47
        on right: 45 49
    match_binders_list_head_start <casem::MatchBinderListHeadData> (63)
        on left: 48
        on right: 46
    match_binders_list_head <casem::MatchBinderListHeadData> (64)
        on left: 49
        on right: 47
    match_binder_head <casem::MatchBinderChackerData> (65)
        on left: 50
        on right: 48 49
    match_binder_definer <casem::MatchBinderChackerData> (66)
        on left: 51 52
        on right: 50
    match_binder_arguments_list <std::vector<cecko::CIName>> (67)
        on left: 53 54
        on right: 51 54
    expression_body <casem::InstructionWrapper> (68)
        on left: 55 56
        on right: 13 46 47 57 98 105
    expression <casem::InstructionWrapper> (69)
        on left: 57
        on right: 7
    declaration_specifiers <casem::CKTypeRefDefPack> (70)
        on left: 58 59
        on right: 9 43 59 94 95
    declaration_specifier <casem::CKTypeRefDefPack> (71)
        on left: 60 61
        on right: 58 59
    type_specifier <cecko::CKTypeSafeObs> (72)
        on left: 62 63 64
        on right: 81
    declared_type_name <cecko::CIName> (73)
        on left: 65
        on right: 63
    enumtype_decl_head <casem::TaggedTypeDecl> (74)
        on left: 66
        on right: 71
    block_start (75)
        on left: 67 68
        on right: 48 71
    block_end (76)
        on left: 69 70
        on right: 45 71
    enumtype_decl_specifier <cecko::CKStructTypeSafeObs> (77)
        on left: 71
        on right: 4
    member_types_declaration_list <casem::StructObservers> (78)
        on left: 72 73
        on right: 71 73
    member_types_declaration <cecko::CKStructTypeSafeObs> (79)
        on left: 74 75
        on right: 72 73
    member_declaration_list <cecko::CKStructItemArray> (80)
        on left: 76 77
        on right: 74 77
    member_declaration <cecko::CKStructItemArray> (81)
        on left: 78
        on right: 76 77
    specifier_qualifier_list <casem::CKTypeRefDefPack> (82)
        on left: 79 80
        on right: 78 80
    type_specifier_qualifier <casem::CKTypeRefDefPack> (83)
        on left: 81
        on right: 60 79 80
    member_declarator <casem::TypeRefPack_Action> (84)
        on left: 82
        on right: 78
    declarator <casem::TypeRefPack_Action> (85)
        on left: 83 84
        on right: 9 82 94
    pointer <casem::TypeRefPack_Convertor> (86)
        on left: 85 86
        on right: 83 85
    direct_declarator <casem::TypeRefPack_Action> (87)
        on left: 87 88
        on right: 83 84 89
    function_declarator <casem::TypeRefPack_Action> (88)
        on left: 89
        on right: 88
    parameter_type_list <casem::TRDArray> (89)
        on left: 90 91
        on right: 89
    parameter_list <casem::TRDArray> (90)
        on left: 92 93
        on right: 90 93
    parameter_declaration <casem::CKTypeRefDefPack> (91)
        on left: 94 95
        on right: 92 93
    typedef_name <cecko::CIName> (92)
        on left: 96
        on right: 64
    expression_statement <casem::IfExpressionData> (93)
        on left: 97
        on right: 104
    if_expression_head <casem::IfExpressionData> (94)
        on left: 98
        on right: 99 105
    if_non_split_expression <casem::IfExpressionData> (95)
        on left: 99
        on right: 100
    if_non_split_expression_else <casem::IfExpressionData> (96)
        on left: 100
        on right: 103 106
    flow_expression <casem::IfExpressionData> (97)
        on left: 101 102
        on right: 56
    non_split_expression <casem::IfExpressionData> (98)
        on left: 103 104
        on right: 99 101 103
    split_expression <casem::IfExpressionData> (99)
        on left: 105 106
        on right: 102 106


State 0

    0 $accept: • translation_unit "end of file"

    "type"                 shift, and go to state 1
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    translation_unit          go to state 5
    external_declaration      go to state 6
    function_definition       go to state 7
    function_definition_info  go to state 8
    function_definition_head  go to state 9
    declaration_specifiers    go to state 10
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    enumtype_decl_head        go to state 14
    enumtype_decl_specifier   go to state 15
    type_specifier_qualifier  go to state 16
    typedef_name              go to state 17


State 1

   65 declared_type_name: "type" • "identifier"
   66 enumtype_decl_head: "type" • "identifier"

    "identifier"  shift, and go to state 18


State 2

   62 type_specifier: "_Bool, char, or int" •

    $default  reduce using rule 62 (type_specifier)


State 3

   61 declaration_specifier: "fip" •

    $default  reduce using rule 61 (declaration_specifier)


State 4

   96 typedef_name: "type identifier" •

    $default  reduce using rule 96 (typedef_name)


State 5

    0 $accept: translation_unit • "end of file"
    2 translation_unit: translation_unit • external_declaration

    "end of file"          shift, and go to state 19
    "type"                 shift, and go to state 1
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    external_declaration      go to state 20
    function_definition       go to state 7
    function_definition_info  go to state 8
    function_definition_head  go to state 9
    declaration_specifiers    go to state 10
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    enumtype_decl_head        go to state 14
    enumtype_decl_specifier   go to state 15
    type_specifier_qualifier  go to state 16
    typedef_name              go to state 17


State 6

    1 translation_unit: external_declaration •

    $default  reduce using rule 1 (translation_unit)


State 7

    3 external_declaration: function_definition •

    $default  reduce using rule 3 (external_declaration)


State 8

    8 function_definition: function_definition_info • ";" expression_end
   10 function_definition_head: function_definition_info • "="

    "="  shift, and go to state 21
    ";"  shift, and go to state 22


State 9

    7 function_definition: function_definition_head • expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "match"            shift, and go to state 28
    "if"               shift, and go to state 29
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression             go to state 33
    postfix_expression             go to state 34
    unary_expression               go to state 35
    unary_operator                 go to state 36
    cast_expression                go to state 37
    multiplicative_expression      go to state 38
    additive_expression            go to state 39
    relational_expression          go to state 40
    equality_expression            go to state 41
    logical_and_expression         go to state 42
    logical_or_expression          go to state 43
    assignment_expression          go to state 44
    match_head                     go to state 45
    match_expression               go to state 46
    match_binders_list             go to state 47
    match_binders_list_head_start  go to state 48
    match_binders_list_head        go to state 49
    expression_body                go to state 50
    expression                     go to state 51
    expression_statement           go to state 52
    if_expression_head             go to state 53
    if_non_split_expression        go to state 54
    if_non_split_expression_else   go to state 55
    flow_expression                go to state 56
    non_split_expression           go to state 57
    split_expression               go to state 58


State 10

    9 function_definition_info: declaration_specifiers • declarator

    "*"           shift, and go to state 59
    "identifier"  shift, and go to state 60

    declarator           go to state 61
    pointer              go to state 62
    direct_declarator    go to state 63
    function_declarator  go to state 64


State 11

   58 declaration_specifiers: declaration_specifier •
   59                       | declaration_specifier • declaration_specifiers

    "type"                 shift, and go to state 65
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    $default  reduce using rule 58 (declaration_specifiers)

    declaration_specifiers    go to state 66
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    type_specifier_qualifier  go to state 16
    typedef_name              go to state 17


State 12

   81 type_specifier_qualifier: type_specifier •

    $default  reduce using rule 81 (type_specifier_qualifier)


State 13

   63 type_specifier: declared_type_name •

    $default  reduce using rule 63 (type_specifier)


State 14

   71 enumtype_decl_specifier: enumtype_decl_head • block_start member_types_declaration_list block_end "NEW_LINE"

    "{"  shift, and go to state 67

    block_start  go to state 68


State 15

    4 external_declaration: enumtype_decl_specifier •

    $default  reduce using rule 4 (external_declaration)


State 16

   60 declaration_specifier: type_specifier_qualifier •

    $default  reduce using rule 60 (declaration_specifier)


State 17

   64 type_specifier: typedef_name •

    $default  reduce using rule 64 (type_specifier)


State 18

   65 declared_type_name: "type" "identifier" •
   66 enumtype_decl_head: "type" "identifier" •

    "{"       reduce using rule 66 (enumtype_decl_head)
    $default  reduce using rule 65 (declared_type_name)


State 19

    0 $accept: translation_unit "end of file" •

    $default  accept


State 20

    2 translation_unit: translation_unit external_declaration •

    $default  reduce using rule 2 (translation_unit)


State 21

   10 function_definition_head: function_definition_info "=" •

    $default  reduce using rule 10 (function_definition_head)


State 22

    8 function_definition: function_definition_info ";" • expression_end

    "end of file"  shift, and go to state 69
    "NEW_LINE"     shift, and go to state 70

    expression_end  go to state 71


State 23

   13 primary_expression: "(" • expression_body ")"

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "match"            shift, and go to state 28
    "if"               shift, and go to state 29
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression             go to state 33
    postfix_expression             go to state 34
    unary_expression               go to state 35
    unary_operator                 go to state 36
    cast_expression                go to state 37
    multiplicative_expression      go to state 38
    additive_expression            go to state 39
    relational_expression          go to state 40
    equality_expression            go to state 41
    logical_and_expression         go to state 42
    logical_or_expression          go to state 43
    assignment_expression          go to state 44
    match_head                     go to state 45
    match_expression               go to state 46
    match_binders_list             go to state 47
    match_binders_list_head_start  go to state 48
    match_binders_list_head        go to state 49
    expression_body                go to state 72
    expression_statement           go to state 52
    if_expression_head             go to state 53
    if_non_split_expression        go to state 54
    if_non_split_expression_else   go to state 55
    flow_expression                go to state 56
    non_split_expression           go to state 57
    split_expression               go to state 58


State 24

   22 unary_operator: "&" •

    $default  reduce using rule 22 (unary_operator)


State 25

   23 unary_operator: "*" •

    $default  reduce using rule 23 (unary_operator)


State 26

   24 unary_operator: "+ or -" •

    $default  reduce using rule 24 (unary_operator)


State 27

   25 unary_operator: "!" •

    $default  reduce using rule 25 (unary_operator)


State 28

   43 match_head: "match" • assignment_expression "->" declaration_specifiers

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_and_expression     go to state 42
    logical_or_expression      go to state 43
    assignment_expression      go to state 73


State 29

   98 if_expression_head: "if" • "(" expression_body ")"

    "("  shift, and go to state 74


State 30

   15 postfix_expression: "identifier" • "(" argument_expression_list ")"
   16                   | "identifier" •

    "("  shift, and go to state 75

    $default  reduce using rule 16 (postfix_expression)


State 31

   11 primary_expression: "integer literal" •

    $default  reduce using rule 11 (primary_expression)


State 32

   12 primary_expression: "string literal" •

    $default  reduce using rule 12 (primary_expression)


State 33

   14 postfix_expression: primary_expression •

    $default  reduce using rule 14 (postfix_expression)


State 34

   20 unary_expression: postfix_expression •

    $default  reduce using rule 20 (unary_expression)


State 35

   26 cast_expression: unary_expression •
   41 assignment_expression: unary_expression • assignment_operator assignment_expression

    "="  shift, and go to state 76

    $default  reduce using rule 26 (cast_expression)

    assignment_operator  go to state 77


State 36

   21 unary_expression: unary_operator • cast_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression  go to state 33
    postfix_expression  go to state 34
    unary_expression    go to state 78
    unary_operator      go to state 36
    cast_expression     go to state 79


State 37

   27 multiplicative_expression: cast_expression •

    $default  reduce using rule 27 (multiplicative_expression)


State 38

   28 multiplicative_expression: multiplicative_expression • "*" cast_expression
   29                          | multiplicative_expression • "/ or %" cast_expression
   30 additive_expression: multiplicative_expression •

    "*"       shift, and go to state 80
    "/ or %"  shift, and go to state 81

    $default  reduce using rule 30 (additive_expression)


State 39

   31 additive_expression: additive_expression • "+ or -" multiplicative_expression
   32 relational_expression: additive_expression •

    "+ or -"  shift, and go to state 82

    $default  reduce using rule 32 (relational_expression)


State 40

   33 relational_expression: relational_expression • "<, >, <=, or >=" additive_expression
   34 equality_expression: relational_expression •

    "<, >, <=, or >="  shift, and go to state 83

    $default  reduce using rule 34 (equality_expression)


State 41

   35 equality_expression: equality_expression • "== or !=" relational_expression
   36 logical_and_expression: equality_expression •

    "== or !="  shift, and go to state 84

    $default  reduce using rule 36 (logical_and_expression)


State 42

   37 logical_and_expression: logical_and_expression • "&&" equality_expression
   38 logical_or_expression: logical_and_expression •

    "&&"  shift, and go to state 85

    $default  reduce using rule 38 (logical_or_expression)


State 43

   39 logical_or_expression: logical_or_expression • "||" logical_and_expression
   40 assignment_expression: logical_or_expression •

    "||"  shift, and go to state 86

    $default  reduce using rule 40 (assignment_expression)


State 44

   44 match_expression: assignment_expression •

    $default  reduce using rule 44 (match_expression)


State 45

   48 match_binders_list_head_start: match_head • block_start match_binder_head

    "{"  shift, and go to state 67

    block_start  go to state 87


State 46

   55 expression_body: match_expression •
   97 expression_statement: match_expression • ";"

    ";"  shift, and go to state 88

    $default  reduce using rule 55 (expression_body)


State 47

   45 match_expression: match_binders_list • block_end
   49 match_binders_list_head: match_binders_list • match_binder_head

    "NEW_LINE"  shift, and go to state 89
    "|"         shift, and go to state 90
    "}"         shift, and go to state 91

    match_binder_head  go to state 92
    block_end          go to state 93


State 48

   46 match_binders_list: match_binders_list_head_start • expression_body

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "match"            shift, and go to state 28
    "if"               shift, and go to state 29
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression             go to state 33
    postfix_expression             go to state 34
    unary_expression               go to state 35
    unary_operator                 go to state 36
    cast_expression                go to state 37
    multiplicative_expression      go to state 38
    additive_expression            go to state 39
    relational_expression          go to state 40
    equality_expression            go to state 41
    logical_and_expression         go to state 42
    logical_or_expression          go to state 43
    assignment_expression          go to state 44
    match_head                     go to state 45
    match_expression               go to state 46
    match_binders_list             go to state 47
    match_binders_list_head_start  go to state 48
    match_binders_list_head        go to state 49
    expression_body                go to state 94
    expression_statement           go to state 52
    if_expression_head             go to state 53
    if_non_split_expression        go to state 54
    if_non_split_expression_else   go to state 55
    flow_expression                go to state 56
    non_split_expression           go to state 57
    split_expression               go to state 58


State 49

   47 match_binders_list: match_binders_list_head • expression_body

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "match"            shift, and go to state 28
    "if"               shift, and go to state 29
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression             go to state 33
    postfix_expression             go to state 34
    unary_expression               go to state 35
    unary_operator                 go to state 36
    cast_expression                go to state 37
    multiplicative_expression      go to state 38
    additive_expression            go to state 39
    relational_expression          go to state 40
    equality_expression            go to state 41
    logical_and_expression         go to state 42
    logical_or_expression          go to state 43
    assignment_expression          go to state 44
    match_head                     go to state 45
    match_expression               go to state 46
    match_binders_list             go to state 47
    match_binders_list_head_start  go to state 48
    match_binders_list_head        go to state 49
    expression_body                go to state 95
    expression_statement           go to state 52
    if_expression_head             go to state 53
    if_non_split_expression        go to state 54
    if_non_split_expression_else   go to state 55
    flow_expression                go to state 56
    non_split_expression           go to state 57
    split_expression               go to state 58


State 50

   57 expression: expression_body • expression_end

    "end of file"  shift, and go to state 69
    "NEW_LINE"     shift, and go to state 70

    expression_end  go to state 96


State 51

    7 function_definition: function_definition_head expression •

    $default  reduce using rule 7 (function_definition)


State 52

  104 non_split_expression: expression_statement •

    $default  reduce using rule 104 (non_split_expression)


State 53

   99 if_non_split_expression: if_expression_head • non_split_expression
  105 split_expression: if_expression_head • expression_body

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "match"            shift, and go to state 28
    "if"               shift, and go to state 29
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression             go to state 33
    postfix_expression             go to state 34
    unary_expression               go to state 35
    unary_operator                 go to state 36
    cast_expression                go to state 37
    multiplicative_expression      go to state 38
    additive_expression            go to state 39
    relational_expression          go to state 40
    equality_expression            go to state 41
    logical_and_expression         go to state 42
    logical_or_expression          go to state 43
    assignment_expression          go to state 44
    match_head                     go to state 45
    match_expression               go to state 46
    match_binders_list             go to state 47
    match_binders_list_head_start  go to state 48
    match_binders_list_head        go to state 49
    expression_body                go to state 97
    expression_statement           go to state 52
    if_expression_head             go to state 53
    if_non_split_expression        go to state 54
    if_non_split_expression_else   go to state 55
    flow_expression                go to state 56
    non_split_expression           go to state 98
    split_expression               go to state 58


State 54

  100 if_non_split_expression_else: if_non_split_expression • "else"

    "else"  shift, and go to state 99


State 55

  103 non_split_expression: if_non_split_expression_else • non_split_expression
  106 split_expression: if_non_split_expression_else • split_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "match"            shift, and go to state 28
    "if"               shift, and go to state 29
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression             go to state 33
    postfix_expression             go to state 34
    unary_expression               go to state 35
    unary_operator                 go to state 36
    cast_expression                go to state 37
    multiplicative_expression      go to state 38
    additive_expression            go to state 39
    relational_expression          go to state 40
    equality_expression            go to state 41
    logical_and_expression         go to state 42
    logical_or_expression          go to state 43
    assignment_expression          go to state 44
    match_head                     go to state 45
    match_expression               go to state 100
    match_binders_list             go to state 47
    match_binders_list_head_start  go to state 48
    match_binders_list_head        go to state 49
    expression_statement           go to state 52
    if_expression_head             go to state 53
    if_non_split_expression        go to state 54
    if_non_split_expression_else   go to state 55
    non_split_expression           go to state 101
    split_expression               go to state 102


State 56

   56 expression_body: flow_expression •

    $default  reduce using rule 56 (expression_body)


State 57

  101 flow_expression: non_split_expression •

    $default  reduce using rule 101 (flow_expression)


State 58

  102 flow_expression: split_expression •

    $default  reduce using rule 102 (flow_expression)


State 59

   85 pointer: "*" • pointer
   86        | "*" •

    "*"  shift, and go to state 59

    $default  reduce using rule 86 (pointer)

    pointer  go to state 103


State 60

   87 direct_declarator: "identifier" •

    $default  reduce using rule 87 (direct_declarator)


State 61

    9 function_definition_info: declaration_specifiers declarator •

    $default  reduce using rule 9 (function_definition_info)


State 62

   83 declarator: pointer • direct_declarator

    "identifier"  shift, and go to state 60

    direct_declarator    go to state 104
    function_declarator  go to state 64


State 63

   84 declarator: direct_declarator •
   89 function_declarator: direct_declarator • "[" parameter_type_list "]"

    "["  shift, and go to state 105

    $default  reduce using rule 84 (declarator)


State 64

   88 direct_declarator: function_declarator •

    $default  reduce using rule 88 (direct_declarator)


State 65

   65 declared_type_name: "type" • "identifier"

    "identifier"  shift, and go to state 106


State 66

   59 declaration_specifiers: declaration_specifier declaration_specifiers •

    $default  reduce using rule 59 (declaration_specifiers)


State 67

   67 block_start: "{" •
   68            | "{" • "NEW_LINE"

    "NEW_LINE"  shift, and go to state 107

    $default  reduce using rule 67 (block_start)


State 68

   71 enumtype_decl_specifier: enumtype_decl_head block_start • member_types_declaration_list block_end "NEW_LINE"

    "identifier"  shift, and go to state 108

    member_types_declaration_list  go to state 109
    member_types_declaration       go to state 110


State 69

    6 expression_end: "end of file" •

    $default  reduce using rule 6 (expression_end)


State 70

    5 expression_end: "NEW_LINE" •

    $default  reduce using rule 5 (expression_end)


State 71

    8 function_definition: function_definition_info ";" expression_end •

    $default  reduce using rule 8 (function_definition)


State 72

   13 primary_expression: "(" expression_body • ")"

    ")"  shift, and go to state 111


State 73

   43 match_head: "match" assignment_expression • "->" declaration_specifiers

    "->"  shift, and go to state 112


State 74

   98 if_expression_head: "if" "(" • expression_body ")"

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "match"            shift, and go to state 28
    "if"               shift, and go to state 29
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression             go to state 33
    postfix_expression             go to state 34
    unary_expression               go to state 35
    unary_operator                 go to state 36
    cast_expression                go to state 37
    multiplicative_expression      go to state 38
    additive_expression            go to state 39
    relational_expression          go to state 40
    equality_expression            go to state 41
    logical_and_expression         go to state 42
    logical_or_expression          go to state 43
    assignment_expression          go to state 44
    match_head                     go to state 45
    match_expression               go to state 46
    match_binders_list             go to state 47
    match_binders_list_head_start  go to state 48
    match_binders_list_head        go to state 49
    expression_body                go to state 113
    expression_statement           go to state 52
    if_expression_head             go to state 53
    if_non_split_expression        go to state 54
    if_non_split_expression_else   go to state 55
    flow_expression                go to state 56
    non_split_expression           go to state 57
    split_expression               go to state 58


State 75

   15 postfix_expression: "identifier" "(" • argument_expression_list ")"

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    $default  reduce using rule 19 (argument_expression_list)

    primary_expression         go to state 33
    postfix_expression         go to state 34
    argument_expression_list   go to state 114
    unary_expression           go to state 35
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_and_expression     go to state 42
    logical_or_expression      go to state 43
    assignment_expression      go to state 115


State 76

   42 assignment_operator: "=" •

    $default  reduce using rule 42 (assignment_operator)


State 77

   41 assignment_expression: unary_expression assignment_operator • assignment_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_and_expression     go to state 42
    logical_or_expression      go to state 43
    assignment_expression      go to state 116


State 78

   26 cast_expression: unary_expression •

    $default  reduce using rule 26 (cast_expression)


State 79

   21 unary_expression: unary_operator cast_expression •

    $default  reduce using rule 21 (unary_expression)


State 80

   28 multiplicative_expression: multiplicative_expression "*" • cast_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression  go to state 33
    postfix_expression  go to state 34
    unary_expression    go to state 78
    unary_operator      go to state 36
    cast_expression     go to state 117


State 81

   29 multiplicative_expression: multiplicative_expression "/ or %" • cast_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression  go to state 33
    postfix_expression  go to state 34
    unary_expression    go to state 78
    unary_operator      go to state 36
    cast_expression     go to state 118


State 82

   31 additive_expression: additive_expression "+ or -" • multiplicative_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 78
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 119


State 83

   33 relational_expression: relational_expression "<, >, <=, or >=" • additive_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 78
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 120


State 84

   35 equality_expression: equality_expression "== or !=" • relational_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 78
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 121


State 85

   37 logical_and_expression: logical_and_expression "&&" • equality_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 78
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 122


State 86

   39 logical_or_expression: logical_or_expression "||" • logical_and_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 78
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_and_expression     go to state 123


State 87

   48 match_binders_list_head_start: match_head block_start • match_binder_head

    "|"  shift, and go to state 90

    match_binder_head  go to state 124


State 88

   97 expression_statement: match_expression ";" •

    $default  reduce using rule 97 (expression_statement)


State 89

   70 block_end: "NEW_LINE" • "}"

    "}"  shift, and go to state 125


State 90

   50 match_binder_head: "|" • match_binder_definer "->"

    "identifier"  shift, and go to state 126

    match_binder_definer  go to state 127


State 91

   69 block_end: "}" •

    $default  reduce using rule 69 (block_end)


State 92

   49 match_binders_list_head: match_binders_list match_binder_head •

    $default  reduce using rule 49 (match_binders_list_head)


State 93

   45 match_expression: match_binders_list block_end •

    $default  reduce using rule 45 (match_expression)


State 94

   46 match_binders_list: match_binders_list_head_start expression_body •

    $default  reduce using rule 46 (match_binders_list)


State 95

   47 match_binders_list: match_binders_list_head expression_body •

    $default  reduce using rule 47 (match_binders_list)


State 96

   57 expression: expression_body expression_end •

    $default  reduce using rule 57 (expression)


State 97

  105 split_expression: if_expression_head expression_body •

    $default  reduce using rule 105 (split_expression)


State 98

   99 if_non_split_expression: if_expression_head non_split_expression •
  101 flow_expression: non_split_expression •

    "else"    reduce using rule 99 (if_non_split_expression)
    $default  reduce using rule 101 (flow_expression)


State 99

  100 if_non_split_expression_else: if_non_split_expression "else" •

    $default  reduce using rule 100 (if_non_split_expression_else)


State 100

   97 expression_statement: match_expression • ";"

    ";"  shift, and go to state 88


State 101

  103 non_split_expression: if_non_split_expression_else non_split_expression •

    $default  reduce using rule 103 (non_split_expression)


State 102

  106 split_expression: if_non_split_expression_else split_expression •

    $default  reduce using rule 106 (split_expression)


State 103

   85 pointer: "*" pointer •

    $default  reduce using rule 85 (pointer)


State 104

   83 declarator: pointer direct_declarator •
   89 function_declarator: direct_declarator • "[" parameter_type_list "]"

    "["  shift, and go to state 105

    $default  reduce using rule 83 (declarator)


State 105

   89 function_declarator: direct_declarator "[" • parameter_type_list "]"

    "type"                 shift, and go to state 65
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    $default  reduce using rule 91 (parameter_type_list)

    declaration_specifiers    go to state 128
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    type_specifier_qualifier  go to state 16
    parameter_type_list       go to state 129
    parameter_list            go to state 130
    parameter_declaration     go to state 131
    typedef_name              go to state 17


State 106

   65 declared_type_name: "type" "identifier" •

    $default  reduce using rule 65 (declared_type_name)


State 107

   68 block_start: "{" "NEW_LINE" •

    $default  reduce using rule 68 (block_start)


State 108

   74 member_types_declaration: "identifier" • "(" member_declaration_list ")" ";"
   75                         | "identifier" • ";"

    "("  shift, and go to state 132
    ";"  shift, and go to state 133


State 109

   71 enumtype_decl_specifier: enumtype_decl_head block_start member_types_declaration_list • block_end "NEW_LINE"
   73 member_types_declaration_list: member_types_declaration_list • member_types_declaration

    "NEW_LINE"    shift, and go to state 89
    "}"           shift, and go to state 91
    "identifier"  shift, and go to state 108

    block_end                 go to state 134
    member_types_declaration  go to state 135


State 110

   72 member_types_declaration_list: member_types_declaration •

    $default  reduce using rule 72 (member_types_declaration_list)


State 111

   13 primary_expression: "(" expression_body ")" •

    $default  reduce using rule 13 (primary_expression)


State 112

   43 match_head: "match" assignment_expression "->" • declaration_specifiers

    "type"                 shift, and go to state 65
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    declaration_specifiers    go to state 136
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    type_specifier_qualifier  go to state 16
    typedef_name              go to state 17


State 113

   98 if_expression_head: "if" "(" expression_body • ")"

    ")"  shift, and go to state 137


State 114

   15 postfix_expression: "identifier" "(" argument_expression_list • ")"
   18 argument_expression_list: argument_expression_list • "," assignment_expression

    ")"  shift, and go to state 138
    ","  shift, and go to state 139


State 115

   17 argument_expression_list: assignment_expression •

    $default  reduce using rule 17 (argument_expression_list)


State 116

   41 assignment_expression: unary_expression assignment_operator assignment_expression •

    $default  reduce using rule 41 (assignment_expression)


State 117

   28 multiplicative_expression: multiplicative_expression "*" cast_expression •

    $default  reduce using rule 28 (multiplicative_expression)


State 118

   29 multiplicative_expression: multiplicative_expression "/ or %" cast_expression •

    $default  reduce using rule 29 (multiplicative_expression)


State 119

   28 multiplicative_expression: multiplicative_expression • "*" cast_expression
   29                          | multiplicative_expression • "/ or %" cast_expression
   31 additive_expression: additive_expression "+ or -" multiplicative_expression •

    "*"       shift, and go to state 80
    "/ or %"  shift, and go to state 81

    $default  reduce using rule 31 (additive_expression)


State 120

   31 additive_expression: additive_expression • "+ or -" multiplicative_expression
   33 relational_expression: relational_expression "<, >, <=, or >=" additive_expression •

    "+ or -"  shift, and go to state 82

    $default  reduce using rule 33 (relational_expression)


State 121

   33 relational_expression: relational_expression • "<, >, <=, or >=" additive_expression
   35 equality_expression: equality_expression "== or !=" relational_expression •

    "<, >, <=, or >="  shift, and go to state 83

    $default  reduce using rule 35 (equality_expression)


State 122

   35 equality_expression: equality_expression • "== or !=" relational_expression
   37 logical_and_expression: logical_and_expression "&&" equality_expression •

    "== or !="  shift, and go to state 84

    $default  reduce using rule 37 (logical_and_expression)


State 123

   37 logical_and_expression: logical_and_expression • "&&" equality_expression
   39 logical_or_expression: logical_or_expression "||" logical_and_expression •

    "&&"  shift, and go to state 85

    $default  reduce using rule 39 (logical_or_expression)


State 124

   48 match_binders_list_head_start: match_head block_start match_binder_head •

    $default  reduce using rule 48 (match_binders_list_head_start)


State 125

   70 block_end: "NEW_LINE" "}" •

    $default  reduce using rule 70 (block_end)


State 126

   51 match_binder_definer: "identifier" • "(" match_binder_arguments_list ")"
   52                     | "identifier" •

    "("  shift, and go to state 140

    $default  reduce using rule 52 (match_binder_definer)


State 127

   50 match_binder_head: "|" match_binder_definer • "->"

    "->"  shift, and go to state 141


State 128

   94 parameter_declaration: declaration_specifiers • declarator
   95                      | declaration_specifiers •

    "*"           shift, and go to state 59
    "identifier"  shift, and go to state 60

    $default  reduce using rule 95 (parameter_declaration)

    declarator           go to state 142
    pointer              go to state 62
    direct_declarator    go to state 63
    function_declarator  go to state 64


State 129

   89 function_declarator: direct_declarator "[" parameter_type_list • "]"

    "]"  shift, and go to state 143


State 130

   90 parameter_type_list: parameter_list •
   93 parameter_list: parameter_list • "," parameter_declaration

    ","  shift, and go to state 144

    $default  reduce using rule 90 (parameter_type_list)


State 131

   92 parameter_list: parameter_declaration •

    $default  reduce using rule 92 (parameter_list)


State 132

   74 member_types_declaration: "identifier" "(" • member_declaration_list ")" ";"

    "type"                 shift, and go to state 65
    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 4

    type_specifier            go to state 12
    declared_type_name        go to state 13
    member_declaration_list   go to state 145
    member_declaration        go to state 146
    specifier_qualifier_list  go to state 147
    type_specifier_qualifier  go to state 148
    typedef_name              go to state 17


State 133

   75 member_types_declaration: "identifier" ";" •

    $default  reduce using rule 75 (member_types_declaration)


State 134

   71 enumtype_decl_specifier: enumtype_decl_head block_start member_types_declaration_list block_end • "NEW_LINE"

    "NEW_LINE"  shift, and go to state 149


State 135

   73 member_types_declaration_list: member_types_declaration_list member_types_declaration •

    $default  reduce using rule 73 (member_types_declaration_list)


State 136

   43 match_head: "match" assignment_expression "->" declaration_specifiers •

    $default  reduce using rule 43 (match_head)


State 137

   98 if_expression_head: "if" "(" expression_body ")" •

    $default  reduce using rule 98 (if_expression_head)


State 138

   15 postfix_expression: "identifier" "(" argument_expression_list ")" •

    $default  reduce using rule 15 (postfix_expression)


State 139

   18 argument_expression_list: argument_expression_list "," • assignment_expression

    "("                shift, and go to state 23
    "&"                shift, and go to state 24
    "*"                shift, and go to state 25
    "+ or -"           shift, and go to state 26
    "!"                shift, and go to state 27
    "identifier"       shift, and go to state 30
    "integer literal"  shift, and go to state 31
    "string literal"   shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    cast_expression            go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_and_expression     go to state 42
    logical_or_expression      go to state 43
    assignment_expression      go to state 150


State 140

   51 match_binder_definer: "identifier" "(" • match_binder_arguments_list ")"

    "identifier"  shift, and go to state 151

    match_binder_arguments_list  go to state 152


State 141

   50 match_binder_head: "|" match_binder_definer "->" •

    $default  reduce using rule 50 (match_binder_head)


State 142

   94 parameter_declaration: declaration_specifiers declarator •

    $default  reduce using rule 94 (parameter_declaration)


State 143

   89 function_declarator: direct_declarator "[" parameter_type_list "]" •

    $default  reduce using rule 89 (function_declarator)


State 144

   93 parameter_list: parameter_list "," • parameter_declaration

    "type"                 shift, and go to state 65
    "_Bool, char, or int"  shift, and go to state 2
    "fip"                  shift, and go to state 3
    "type identifier"      shift, and go to state 4

    declaration_specifiers    go to state 128
    declaration_specifier     go to state 11
    type_specifier            go to state 12
    declared_type_name        go to state 13
    type_specifier_qualifier  go to state 16
    parameter_declaration     go to state 153
    typedef_name              go to state 17


State 145

   74 member_types_declaration: "identifier" "(" member_declaration_list • ")" ";"
   77 member_declaration_list: member_declaration_list • "," member_declaration

    ")"  shift, and go to state 154
    ","  shift, and go to state 155


State 146

   76 member_declaration_list: member_declaration •

    $default  reduce using rule 76 (member_declaration_list)


State 147

   78 member_declaration: specifier_qualifier_list • member_declarator

    "*"           shift, and go to state 59
    "identifier"  shift, and go to state 60

    member_declarator    go to state 156
    declarator           go to state 157
    pointer              go to state 62
    direct_declarator    go to state 63
    function_declarator  go to state 64


State 148

   79 specifier_qualifier_list: type_specifier_qualifier •
   80                         | type_specifier_qualifier • specifier_qualifier_list

    "type"                 shift, and go to state 65
    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 4

    $default  reduce using rule 79 (specifier_qualifier_list)

    type_specifier            go to state 12
    declared_type_name        go to state 13
    specifier_qualifier_list  go to state 158
    type_specifier_qualifier  go to state 148
    typedef_name              go to state 17


State 149

   71 enumtype_decl_specifier: enumtype_decl_head block_start member_types_declaration_list block_end "NEW_LINE" •

    $default  reduce using rule 71 (enumtype_decl_specifier)


State 150

   18 argument_expression_list: argument_expression_list "," assignment_expression •

    $default  reduce using rule 18 (argument_expression_list)


State 151

   53 match_binder_arguments_list: "identifier" •

    $default  reduce using rule 53 (match_binder_arguments_list)


State 152

   51 match_binder_definer: "identifier" "(" match_binder_arguments_list • ")"
   54 match_binder_arguments_list: match_binder_arguments_list • "," "identifier"

    ")"  shift, and go to state 159
    ","  shift, and go to state 160


State 153

   93 parameter_list: parameter_list "," parameter_declaration •

    $default  reduce using rule 93 (parameter_list)


State 154

   74 member_types_declaration: "identifier" "(" member_declaration_list ")" • ";"

    ";"  shift, and go to state 161


State 155

   77 member_declaration_list: member_declaration_list "," • member_declaration

    "type"                 shift, and go to state 65
    "_Bool, char, or int"  shift, and go to state 2
    "type identifier"      shift, and go to state 4

    type_specifier            go to state 12
    declared_type_name        go to state 13
    member_declaration        go to state 162
    specifier_qualifier_list  go to state 147
    type_specifier_qualifier  go to state 148
    typedef_name              go to state 17


State 156

   78 member_declaration: specifier_qualifier_list member_declarator •

    $default  reduce using rule 78 (member_declaration)


State 157

   82 member_declarator: declarator •

    $default  reduce using rule 82 (member_declarator)


State 158

   80 specifier_qualifier_list: type_specifier_qualifier specifier_qualifier_list •

    $default  reduce using rule 80 (specifier_qualifier_list)


State 159

   51 match_binder_definer: "identifier" "(" match_binder_arguments_list ")" •

    $default  reduce using rule 51 (match_binder_definer)


State 160

   54 match_binder_arguments_list: match_binder_arguments_list "," • "identifier"

    "identifier"  shift, and go to state 163


State 161

   74 member_types_declaration: "identifier" "(" member_declaration_list ")" ";" •

    $default  reduce using rule 74 (member_types_declaration)


State 162

   77 member_declaration_list: member_declaration_list "," member_declaration •

    $default  reduce using rule 77 (member_declaration_list)


State 163

   54 match_binder_arguments_list: match_binder_arguments_list "," "identifier" •

    $default  reduce using rule 54 (match_binder_arguments_list)
