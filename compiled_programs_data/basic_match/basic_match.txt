; ModuleID = 'test'
source_filename = "test"

%Tagged = type { i32 }
%A = type { i32, i32, ptr }
%B = type { i32, i32 }
%C = type { i32 }

@0 = private unnamed_addr constant [92 x i8] c"[DEBUG] -- line: 2 -- |'declare_type_constructor' tag field after set in constructor| '%i'\0A\00", align 1
@1 = private unnamed_addr constant [81 x i8] c"[DEBUG] -- line: 2 -- |'declare_type_constructor'_const_Tagged -> _result| '%p'\0A\00", align 1
@2 = private unnamed_addr constant [65 x i8] c"[DEBUG] -- line: 2 -- |tag field after set in constructor| '%i'\0A\00", align 1
@3 = private unnamed_addr constant [55 x i8] c"[DEBUG] -- line: 2 -- |_reuse_Tagged -> _result| '%p'\0A\00", align 1
@4 = private unnamed_addr constant [92 x i8] c"[DEBUG] -- line: 6 -- |'declare_type_constructor' tag field after set in constructor| '%i'\0A\00", align 1
@5 = private unnamed_addr constant [76 x i8] c"[DEBUG] -- line: 6 -- |'declare_type_constructor'_const_A -> _result| '%p'\0A\00", align 1
@6 = private unnamed_addr constant [65 x i8] c"[DEBUG] -- line: 6 -- |tag field after set in constructor| '%i'\0A\00", align 1
@7 = private unnamed_addr constant [50 x i8] c"[DEBUG] -- line: 6 -- |_reuse_A -> _result| '%p'\0A\00", align 1
@8 = private unnamed_addr constant [92 x i8] c"[DEBUG] -- line: 7 -- |'declare_type_constructor' tag field after set in constructor| '%i'\0A\00", align 1
@9 = private unnamed_addr constant [76 x i8] c"[DEBUG] -- line: 7 -- |'declare_type_constructor'_const_B -> _result| '%p'\0A\00", align 1
@10 = private unnamed_addr constant [65 x i8] c"[DEBUG] -- line: 7 -- |tag field after set in constructor| '%i'\0A\00", align 1
@11 = private unnamed_addr constant [50 x i8] c"[DEBUG] -- line: 7 -- |_reuse_B -> _result| '%p'\0A\00", align 1
@12 = private unnamed_addr constant [10 x i8] c"res = %i\0A\00", align 1

declare ptr @ckrt_malloc(i32)

declare i32 @ckrt_printf(ptr, ...)

declare i32 @ckrt_scanf(ptr, ...)

declare i32 @ckrt_sprintf(ptr, ptr, ...)

declare i32 @ckrt_sscanf(ptr, ptr, ...)

declare ptr @ckrt_memset(ptr, i32, i32)

define ptr @_const_Tagged() {
prolog:
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %0 = call ptr @ckrt_malloc(i32 4)
  store ptr %0, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Tagged, ptr %"$_result", i32 0, i32 0
  store i32 0, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Tagged, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %1 = call i32 (ptr, ...) @ckrt_printf(ptr @0, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @1, ptr %"$_result3")
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_reuse_Tagged(ptr %0) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Tagged, ptr %"$_result", i32 0, i32 0
  store i32 0, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Tagged, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %1 = call i32 (ptr, ...) @ckrt_printf(ptr @2, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @3, ptr %"$_result3")
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_const_A(i32 %0, ptr %1) {
prolog:
  %i = alloca i32, align 4
  store i32 %0, ptr %i, align 4
  %next = alloca ptr, align 8
  store ptr %1, ptr %next, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @ckrt_malloc(i32 16)
  store ptr %2, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %A, ptr %"$_result", i32 0, i32 0
  store i32 1, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %A, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %3 = call i32 (ptr, ...) @ckrt_printf(ptr @4, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.i = getelementptr inbounds %A, ptr %"$_result3", i32 0, i32 1
  %"$i" = load i32, ptr %i, align 4
  store i32 %"$i", ptr %_result.i, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.next = getelementptr inbounds %A, ptr %"$_result4", i32 0, i32 2
  %"$next" = load ptr, ptr %next, align 8
  store ptr %"$next", ptr %_result.next, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %4 = call i32 (ptr, ...) @ckrt_printf(ptr @5, ptr %"$_result5")
  %"$_result6" = load ptr, ptr %_result, align 8
  ret ptr %"$_result6"
}

define ptr @_reuse_A(ptr %0, i32 %1, ptr %2) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %i = alloca i32, align 4
  store i32 %1, ptr %i, align 4
  %next = alloca ptr, align 8
  store ptr %2, ptr %next, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %A, ptr %"$_result", i32 0, i32 0
  store i32 1, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %A, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %3 = call i32 (ptr, ...) @ckrt_printf(ptr @6, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.i = getelementptr inbounds %A, ptr %"$_result3", i32 0, i32 1
  %"$i" = load i32, ptr %i, align 4
  store i32 %"$i", ptr %_result.i, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.next = getelementptr inbounds %A, ptr %"$_result4", i32 0, i32 2
  %"$next" = load ptr, ptr %next, align 8
  store ptr %"$next", ptr %_result.next, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %4 = call i32 (ptr, ...) @ckrt_printf(ptr @7, ptr %"$_result5")
  %"$_result6" = load ptr, ptr %_result, align 8
  ret ptr %"$_result6"
}

define ptr @_const_B(i32 %0) {
prolog:
  %i = alloca i32, align 4
  store i32 %0, ptr %i, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %1 = call ptr @ckrt_malloc(i32 8)
  store ptr %1, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %B, ptr %"$_result", i32 0, i32 0
  store i32 2, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %B, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @8, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.i = getelementptr inbounds %B, ptr %"$_result3", i32 0, i32 1
  %"$i" = load i32, ptr %i, align 4
  store i32 %"$i", ptr %_result.i, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  %3 = call i32 (ptr, ...) @ckrt_printf(ptr @9, ptr %"$_result4")
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_reuse_B(ptr %0, i32 %1) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %i = alloca i32, align 4
  store i32 %1, ptr %i, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %B, ptr %"$_result", i32 0, i32 0
  store i32 2, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %B, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @10, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.i = getelementptr inbounds %B, ptr %"$_result3", i32 0, i32 1
  %"$i" = load i32, ptr %i, align 4
  store i32 %"$i", ptr %_result.i, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  %3 = call i32 (ptr, ...) @ckrt_printf(ptr @11, ptr %"$_result4")
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define i32 @match_c(ptr %0) {
prolog:
  %_a = alloca ptr, align 8
  store ptr %0, ptr %_a, align 8
  %1 = alloca i32, align 4
  %x = alloca i32, align 4
  %x7 = alloca i32, align 4
  %n = alloca ptr, align 8
  %2 = alloca i32, align 4
  %x14 = alloca i32, align 4
  %n16 = alloca ptr, align 8
  %x24 = alloca i32, align 4
  br label %start

start:                                            ; preds = %prolog
  %"$_a" = load ptr, ptr %_a, align 8
  %_a.tag = getelementptr inbounds %C, ptr %"$_a", i32 0, i32 0
  %"$_a.tag" = load i32, ptr %_a.tag, align 4
  %"_a==2" = icmp eq i32 %"$_a.tag", 2
  br i1 %"_a==2", label %if.then, label %if.end

if.then:                                          ; preds = %start
  %"$_a1" = load ptr, ptr %_a, align 8
  %"_a.[1]" = getelementptr inbounds %B, ptr %"$_a1", i32 0, i32 1
  %"$_a.[1]" = load i32, ptr %"_a.[1]", align 4
  store i32 %"$_a.[1]", ptr %x, align 4
  %"$x" = load i32, ptr %x, align 4
  store i32 %"$x", ptr %1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %start
  %"$_a2" = load ptr, ptr %_a, align 8
  %_a.tag3 = getelementptr inbounds %C, ptr %"$_a2", i32 0, i32 0
  %"$_a.tag4" = load i32, ptr %_a.tag3, align 4
  %"_a==1" = icmp eq i32 %"$_a.tag4", 1
  br i1 %"_a==1", label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %"$_a8" = load ptr, ptr %_a, align 8
  %"_a.[1]9" = getelementptr inbounds %A, ptr %"$_a8", i32 0, i32 1
  %"$_a.[1]10" = load i32, ptr %"_a.[1]9", align 4
  store i32 %"$_a.[1]10", ptr %x7, align 4
  %"$_a11" = load ptr, ptr %_a, align 8
  %"_a.[2]" = getelementptr inbounds %A, ptr %"$_a11", i32 0, i32 2
  %"$_a.[2]" = load ptr, ptr %"_a.[2]", align 8
  store ptr %"$_a.[2]", ptr %n, align 8
  %"$n" = load ptr, ptr %n, align 8
  %n.tag = getelementptr inbounds %C, ptr %"$n", i32 0, i32 0
  %"$n.tag" = load i32, ptr %n.tag, align 4
  %"n==1" = icmp eq i32 %"$n.tag", 1
  br i1 %"n==1", label %if.then12, label %if.end13

if.end6:                                          ; preds = %if.end23, %if.end
  %"$29" = load i32, ptr %1, align 4
  ret i32 %"$29"

if.then12:                                        ; preds = %if.then5
  %"$n15" = load ptr, ptr %n, align 8
  %"n.[1]" = getelementptr inbounds %A, ptr %"$n15", i32 0, i32 1
  %"$n.[1]" = load i32, ptr %"n.[1]", align 4
  store i32 %"$n.[1]", ptr %x14, align 4
  %"$n17" = load ptr, ptr %n, align 8
  %"n.[2]" = getelementptr inbounds %A, ptr %"$n17", i32 0, i32 2
  %"$n.[2]" = load ptr, ptr %"n.[2]", align 8
  store ptr %"$n.[2]", ptr %n16, align 8
  %"$n18" = load ptr, ptr %n16, align 8
  %3 = call i32 @match_c(ptr %"$n18")
  store i32 %3, ptr %2, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.then5
  %"$n19" = load ptr, ptr %n, align 8
  %n.tag20 = getelementptr inbounds %C, ptr %"$n19", i32 0, i32 0
  %"$n.tag21" = load i32, ptr %n.tag20, align 4
  %"n==2" = icmp eq i32 %"$n.tag21", 2
  br i1 %"n==2", label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end13
  %"$n25" = load ptr, ptr %n, align 8
  %"n.[1]26" = getelementptr inbounds %B, ptr %"$n25", i32 0, i32 1
  %"$n.[1]27" = load i32, ptr %"n.[1]26", align 4
  store i32 %"$n.[1]27", ptr %x24, align 4
  %"$x28" = load i32, ptr %x24, align 4
  store i32 %"$x28", ptr %2, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %if.end13
  %"$" = load i32, ptr %2, align 4
  store i32 %"$", ptr %1, align 4
  br label %if.end6
}

define ptr @make_a() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  %0 = call ptr @_const_B(i32 3)
  %1 = call ptr @_const_A(i32 7, ptr %0)
  ret ptr %1
}

define ptr @make_b() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  %0 = call ptr @_const_B(i32 10)
  ret ptr %0
}

define i32 @main(i32 %0, ptr %1) {
prolog:
  %argc = alloca i32, align 4
  store i32 %0, ptr %argc, align 4
  %argv = alloca ptr, align 8
  store ptr %1, ptr %argv, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @make_b()
  %3 = call i32 @match_c(ptr %2)
  %4 = call i32 (ptr, ...) @ckrt_printf(ptr @12, i32 %3)
  ret i32 %4
}
