; ModuleID = 'test'
source_filename = "test"

%Tagged = type { i32 }
%Integer = type { i32, i32 }

@0 = private unnamed_addr constant [92 x i8] c"[DEBUG] -- line: 2 -- |'declare_type_constructor' tag field after set in constructor| '%i'\0A\00", align 1
@1 = private unnamed_addr constant [81 x i8] c"[DEBUG] -- line: 2 -- |'declare_type_constructor'_const_Tagged -> _result| '%p'\0A\00", align 1
@2 = private unnamed_addr constant [65 x i8] c"[DEBUG] -- line: 2 -- |tag field after set in constructor| '%i'\0A\00", align 1
@3 = private unnamed_addr constant [55 x i8] c"[DEBUG] -- line: 2 -- |_reuse_Tagged -> _result| '%p'\0A\00", align 1
@4 = private unnamed_addr constant [92 x i8] c"[DEBUG] -- line: 6 -- |'declare_type_constructor' tag field after set in constructor| '%i'\0A\00", align 1
@5 = private unnamed_addr constant [82 x i8] c"[DEBUG] -- line: 6 -- |'declare_type_constructor'_const_Integer -> _result| '%p'\0A\00", align 1
@6 = private unnamed_addr constant [65 x i8] c"[DEBUG] -- line: 6 -- |tag field after set in constructor| '%i'\0A\00", align 1
@7 = private unnamed_addr constant [56 x i8] c"[DEBUG] -- line: 6 -- |_reuse_Integer -> _result| '%p'\0A\00", align 1
@8 = private unnamed_addr constant [21 x i8] c"is the decided value\00", align 1
@9 = private unnamed_addr constant [6 x i8] c"%i %s\00", align 1

declare ptr @ckrt_malloc(i32)

declare i32 @ckrt_printf(ptr, ...)

declare i32 @ckrt_scanf(ptr, ...)

declare i32 @ckrt_sprintf(ptr, ptr, ...)

declare i32 @ckrt_sscanf(ptr, ptr, ...)

declare ptr @ckrt_memset(ptr, i32, i32)

define ptr @_const_Tagged() {
prolog:
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %0 = call ptr @ckrt_malloc(i32 4)
  store ptr %0, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Tagged, ptr %"$_result", i32 0, i32 0
  store i32 0, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Tagged, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %1 = call i32 (ptr, ...) @ckrt_printf(ptr @0, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @1, ptr %"$_result3")
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_reuse_Tagged(ptr %0) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Tagged, ptr %"$_result", i32 0, i32 0
  store i32 0, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Tagged, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %1 = call i32 (ptr, ...) @ckrt_printf(ptr @2, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @3, ptr %"$_result3")
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_const_Integer(i32 %0) {
prolog:
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %1 = call ptr @ckrt_malloc(i32 8)
  store ptr %1, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Integer, ptr %"$_result", i32 0, i32 0
  store i32 1, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Integer, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @4, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.x = getelementptr inbounds %Integer, ptr %"$_result3", i32 0, i32 1
  %"$x" = load i32, ptr %x, align 4
  store i32 %"$x", ptr %_result.x, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  %3 = call i32 (ptr, ...) @ckrt_printf(ptr @5, ptr %"$_result4")
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_reuse_Integer(ptr %0, i32 %1) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %x = alloca i32, align 4
  store i32 %1, ptr %x, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Integer, ptr %"$_result", i32 0, i32 0
  store i32 1, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Integer, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @6, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.x = getelementptr inbounds %Integer, ptr %"$_result3", i32 0, i32 1
  %"$x" = load i32, ptr %x, align 4
  store i32 %"$x", ptr %_result.x, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  %3 = call i32 (ptr, ...) @ckrt_printf(ptr @7, ptr %"$_result4")
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @decide(i32 %0) {
prolog:
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %_result = alloca ptr, align 8
  %_result4 = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$x" = load i32, ptr %x, align 4
  %"x>0" = icmp sgt i32 %"$x", 0
  br i1 %"x>0", label %if.then, label %if.else5

if.then:                                          ; preds = %start
  %"$x1" = load i32, ptr %x, align 4
  %"x<2" = icmp slt i32 %"$x1", 2
  br i1 %"x<2", label %if.then2, label %if.else

if.end:                                           ; preds = %if.else5, %if.end3
  %"$_result6" = load ptr, ptr %_result, align 8
  ret ptr %"$_result6"

if.then2:                                         ; preds = %if.then
  %1 = call ptr @_const_Integer(i32 0)
  store ptr %1, ptr %_result4, align 8
  br label %if.end3

if.end3:                                          ; preds = %if.else, %if.then2
  %"$_result" = load ptr, ptr %_result4, align 8
  store ptr %"$_result", ptr %_result, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %2 = call ptr @_const_Integer(i32 2)
  store ptr %2, ptr %_result4, align 8
  br label %if.end3

if.else5:                                         ; preds = %start
  %3 = call ptr @_const_Integer(i32 1)
  store ptr %3, ptr %_result, align 8
  br label %if.end
}

define i32 @finish(ptr %0) {
prolog:
  %x = alloca ptr, align 8
  store ptr %0, ptr %x, align 8
  %1 = alloca i32, align 4
  %x1 = alloca i32, align 4
  br label %start

start:                                            ; preds = %prolog
  %"$x" = load ptr, ptr %x, align 8
  %x.tag = getelementptr inbounds %Integer, ptr %"$x", i32 0, i32 0
  %"$x.tag" = load i32, ptr %x.tag, align 4
  %"x==1" = icmp eq i32 %"$x.tag", 1
  br i1 %"x==1", label %if.then, label %if.end

if.then:                                          ; preds = %start
  %"$x2" = load ptr, ptr %x, align 8
  %"x.[1]" = getelementptr inbounds %Integer, ptr %"$x2", i32 0, i32 1
  %"$x.[1]" = load i32, ptr %"x.[1]", align 4
  store i32 %"$x.[1]", ptr %x1, align 4
  %"$x3" = load i32, ptr %x1, align 4
  store i32 %"$x3", ptr %1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %start
  %"$" = load i32, ptr %1, align 4
  ret i32 %"$"
}

define i32 @main(i32 %0, ptr %1) {
prolog:
  %argc = alloca i32, align 4
  store i32 %0, ptr %argc, align 4
  %argv = alloca ptr, align 8
  store ptr %1, ptr %argv, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @decide(i32 1)
  %3 = call i32 @finish(ptr %2)
  %4 = call i32 (ptr, ...) @ckrt_printf(ptr @9, i32 %3, ptr @8)
  ret i32 %3
}
