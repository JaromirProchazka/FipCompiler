; ModuleID = 'test'
source_filename = "test"

%Tagged = type { i32 }
%Nil = type { i32 }
%Cons = type { i32, i32, ptr }
%list = type { i32 }

@0 = private unnamed_addr constant [92 x i8] c"[DEBUG] -- line: 2 -- |'declare_type_constructor' tag field after set in constructor| '%i'\0A\00", align 1
@1 = private unnamed_addr constant [81 x i8] c"[DEBUG] -- line: 2 -- |'declare_type_constructor'_const_Tagged -> _result| '%p'\0A\00", align 1
@2 = private unnamed_addr constant [65 x i8] c"[DEBUG] -- line: 2 -- |tag field after set in constructor| '%i'\0A\00", align 1
@3 = private unnamed_addr constant [55 x i8] c"[DEBUG] -- line: 2 -- |_reuse_Tagged -> _result| '%p'\0A\00", align 1
@4 = private unnamed_addr constant [92 x i8] c"[DEBUG] -- line: 6 -- |'declare_type_constructor' tag field after set in constructor| '%i'\0A\00", align 1
@5 = private unnamed_addr constant [78 x i8] c"[DEBUG] -- line: 6 -- |'declare_type_constructor'_const_Nil -> _result| '%p'\0A\00", align 1
@6 = private unnamed_addr constant [65 x i8] c"[DEBUG] -- line: 6 -- |tag field after set in constructor| '%i'\0A\00", align 1
@7 = private unnamed_addr constant [52 x i8] c"[DEBUG] -- line: 6 -- |_reuse_Nil -> _result| '%p'\0A\00", align 1
@8 = private unnamed_addr constant [92 x i8] c"[DEBUG] -- line: 7 -- |'declare_type_constructor' tag field after set in constructor| '%i'\0A\00", align 1
@9 = private unnamed_addr constant [79 x i8] c"[DEBUG] -- line: 7 -- |'declare_type_constructor'_const_Cons -> _result| '%p'\0A\00", align 1
@10 = private unnamed_addr constant [65 x i8] c"[DEBUG] -- line: 7 -- |tag field after set in constructor| '%i'\0A\00", align 1
@11 = private unnamed_addr constant [53 x i8] c"[DEBUG] -- line: 7 -- |_reuse_Cons -> _result| '%p'\0A\00", align 1
@12 = private unnamed_addr constant [4 x i8] c"-> \00", align 1
@13 = private unnamed_addr constant [6 x i8] c"%i %s\00", align 1
@14 = private unnamed_addr constant [5 x i8] c"Nil\0A\00", align 1

declare ptr @ckrt_malloc(i32)

declare i32 @ckrt_printf(ptr, ...)

declare i32 @ckrt_scanf(ptr, ...)

declare i32 @ckrt_sprintf(ptr, ptr, ...)

declare i32 @ckrt_sscanf(ptr, ptr, ...)

declare ptr @ckrt_memset(ptr, i32, i32)

define ptr @_const_Tagged() {
prolog:
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %0 = call ptr @ckrt_malloc(i32 4)
  store ptr %0, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Tagged, ptr %"$_result", i32 0, i32 0
  store i32 0, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Tagged, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %1 = call i32 (ptr, ...) @ckrt_printf(ptr @0, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @1, ptr %"$_result3")
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_reuse_Tagged(ptr %0) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Tagged, ptr %"$_result", i32 0, i32 0
  store i32 0, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Tagged, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %1 = call i32 (ptr, ...) @ckrt_printf(ptr @2, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @3, ptr %"$_result3")
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_const_Nil() {
prolog:
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %0 = call ptr @ckrt_malloc(i32 4)
  store ptr %0, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Nil, ptr %"$_result", i32 0, i32 0
  store i32 1, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Nil, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %1 = call i32 (ptr, ...) @ckrt_printf(ptr @4, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @5, ptr %"$_result3")
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_reuse_Nil(ptr %0) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Nil, ptr %"$_result", i32 0, i32 0
  store i32 1, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Nil, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %1 = call i32 (ptr, ...) @ckrt_printf(ptr @6, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @7, ptr %"$_result3")
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_const_Cons(i32 %0, ptr %1) {
prolog:
  %val = alloca i32, align 4
  store i32 %0, ptr %val, align 4
  %next = alloca ptr, align 8
  store ptr %1, ptr %next, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @ckrt_malloc(i32 16)
  store ptr %2, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Cons, ptr %"$_result", i32 0, i32 0
  store i32 2, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Cons, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %3 = call i32 (ptr, ...) @ckrt_printf(ptr @8, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.val = getelementptr inbounds %Cons, ptr %"$_result3", i32 0, i32 1
  %"$val" = load i32, ptr %val, align 4
  store i32 %"$val", ptr %_result.val, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.next = getelementptr inbounds %Cons, ptr %"$_result4", i32 0, i32 2
  %"$next" = load ptr, ptr %next, align 8
  store ptr %"$next", ptr %_result.next, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %4 = call i32 (ptr, ...) @ckrt_printf(ptr @9, ptr %"$_result5")
  %"$_result6" = load ptr, ptr %_result, align 8
  ret ptr %"$_result6"
}

define ptr @_reuse_Cons(ptr %0, i32 %1, ptr %2) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %val = alloca i32, align 4
  store i32 %1, ptr %val, align 4
  %next = alloca ptr, align 8
  store ptr %2, ptr %next, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Cons, ptr %"$_result", i32 0, i32 0
  store i32 2, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Cons, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %3 = call i32 (ptr, ...) @ckrt_printf(ptr @10, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.val = getelementptr inbounds %Cons, ptr %"$_result3", i32 0, i32 1
  %"$val" = load i32, ptr %val, align 4
  store i32 %"$val", ptr %_result.val, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.next = getelementptr inbounds %Cons, ptr %"$_result4", i32 0, i32 2
  %"$next" = load ptr, ptr %next, align 8
  store ptr %"$next", ptr %_result.next, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %4 = call i32 (ptr, ...) @ckrt_printf(ptr @11, ptr %"$_result5")
  %"$_result6" = load ptr, ptr %_result, align 8
  ret ptr %"$_result6"
}

define i32 @finish(ptr %0) {
prolog:
  %x = alloca ptr, align 8
  store ptr %0, ptr %x, align 8
  br label %start

start:                                            ; preds = %prolog
  ret i32 0
}

define i32 @head(ptr %0) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  %1 = alloca i32, align 4
  %x = alloca i32, align 4
  %xx = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xs" = load ptr, ptr %xs, align 8
  %xs.tag = getelementptr inbounds %list, ptr %"$xs", i32 0, i32 0
  %"$xs.tag" = load i32, ptr %xs.tag, align 4
  %"xs==2" = icmp eq i32 %"$xs.tag", 2
  br i1 %"xs==2", label %if.then, label %if.end

if.then:                                          ; preds = %start
  %"$xs1" = load ptr, ptr %xs, align 8
  %"xs.[1]" = getelementptr inbounds %Cons, ptr %"$xs1", i32 0, i32 1
  %"$xs.[1]" = load i32, ptr %"xs.[1]", align 4
  store i32 %"$xs.[1]", ptr %x, align 4
  %"$xs2" = load ptr, ptr %xs, align 8
  %"xs.[2]" = getelementptr inbounds %Cons, ptr %"$xs2", i32 0, i32 2
  %"$xs.[2]" = load ptr, ptr %"xs.[2]", align 8
  store ptr %"$xs.[2]", ptr %xx, align 8
  %"$x" = load i32, ptr %x, align 4
  store i32 %"$x", ptr %1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %start
  %"$xs3" = load ptr, ptr %xs, align 8
  %xs.tag4 = getelementptr inbounds %list, ptr %"$xs3", i32 0, i32 0
  %"$xs.tag5" = load i32, ptr %xs.tag4, align 4
  %"xs==1" = icmp eq i32 %"$xs.tag5", 1
  br i1 %"xs==1", label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  store i32 0, ptr %1, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end
  %"$" = load i32, ptr %1, align 4
  ret i32 %"$"
}

define ptr @second(i32 %0, ptr %1) {
prolog:
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %xx = alloca ptr, align 8
  store ptr %1, ptr %xx, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xx" = load ptr, ptr %xx, align 8
  ret ptr %"$xx"
}

define i32 @travers_list(ptr %0) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  %1 = alloca i32, align 4
  %x = alloca i32, align 4
  %xx = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xs" = load ptr, ptr %xs, align 8
  %xs.tag = getelementptr inbounds %list, ptr %"$xs", i32 0, i32 0
  %"$xs.tag" = load i32, ptr %xs.tag, align 4
  %"xs==2" = icmp eq i32 %"$xs.tag", 2
  br i1 %"xs==2", label %if.then, label %if.end

if.then:                                          ; preds = %start
  %"$xs1" = load ptr, ptr %xs, align 8
  %"xs.[1]" = getelementptr inbounds %Cons, ptr %"$xs1", i32 0, i32 1
  %"$xs.[1]" = load i32, ptr %"xs.[1]", align 4
  store i32 %"$xs.[1]", ptr %x, align 4
  %"$xs2" = load ptr, ptr %xs, align 8
  %"xs.[2]" = getelementptr inbounds %Cons, ptr %"$xs2", i32 0, i32 2
  %"$xs.[2]" = load ptr, ptr %"xs.[2]", align 8
  store ptr %"$xs.[2]", ptr %xx, align 8
  %"$x" = load i32, ptr %x, align 4
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @13, i32 %"$x", ptr @12)
  %"$x3" = load i32, ptr %x, align 4
  %"$xx" = load ptr, ptr %xx, align 8
  %3 = call ptr @second(i32 %"$x3", ptr %"$xx")
  %4 = call i32 @travers_list(ptr %3)
  store i32 %4, ptr %1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %start
  %"$xs4" = load ptr, ptr %xs, align 8
  %xs.tag5 = getelementptr inbounds %list, ptr %"$xs4", i32 0, i32 0
  %"$xs.tag6" = load i32, ptr %xs.tag5, align 4
  %"xs==1" = icmp eq i32 %"$xs.tag6", 1
  br i1 %"xs==1", label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end
  %5 = call i32 (ptr, ...) @ckrt_printf(ptr @14)
  store i32 %5, ptr %1, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end
  %"$" = load i32, ptr %1, align 4
  ret i32 %"$"
}

define ptr @log_list(ptr %0) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xs" = load ptr, ptr %xs, align 8
  %1 = call i32 @travers_list(ptr %"$xs")
  %"$xs1" = load ptr, ptr %xs, align 8
  %2 = call ptr @second(i32 %1, ptr %"$xs1")
  ret ptr %2
}

define ptr @freverse_acc(ptr %0, ptr %1) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  %acc = alloca ptr, align 8
  store ptr %1, ptr %acc, align 8
  %2 = alloca ptr, align 8
  %x = alloca i32, align 4
  %xx = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xs" = load ptr, ptr %xs, align 8
  %xs.tag = getelementptr inbounds %list, ptr %"$xs", i32 0, i32 0
  %"$xs.tag" = load i32, ptr %xs.tag, align 4
  %"xs==2" = icmp eq i32 %"$xs.tag", 2
  br i1 %"xs==2", label %if.then, label %if.end

if.then:                                          ; preds = %start
  %"$xs1" = load ptr, ptr %xs, align 8
  %"xs.[1]" = getelementptr inbounds %Cons, ptr %"$xs1", i32 0, i32 1
  %"$xs.[1]" = load i32, ptr %"xs.[1]", align 4
  store i32 %"$xs.[1]", ptr %x, align 4
  %"$xs2" = load ptr, ptr %xs, align 8
  %"xs.[2]" = getelementptr inbounds %Cons, ptr %"$xs2", i32 0, i32 2
  %"$xs.[2]" = load ptr, ptr %"xs.[2]", align 8
  store ptr %"$xs.[2]", ptr %xx, align 8
  %"$xs3" = load ptr, ptr %xs, align 8
  %"$x" = load i32, ptr %x, align 4
  %"$acc" = load ptr, ptr %acc, align 8
  %3 = call ptr @_reuse_Cons(ptr %"$xs3", i32 %"$x", ptr %"$acc")
  %"$xx" = load ptr, ptr %xx, align 8
  %4 = call ptr @freverse_acc(ptr %"$xx", ptr %3)
  store ptr %4, ptr %2, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %start
  %"$xs4" = load ptr, ptr %xs, align 8
  %xs.tag5 = getelementptr inbounds %list, ptr %"$xs4", i32 0, i32 0
  %"$xs.tag6" = load i32, ptr %xs.tag5, align 4
  %"xs==1" = icmp eq i32 %"$xs.tag6", 1
  br i1 %"xs==1", label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end
  %"$acc9" = load ptr, ptr %acc, align 8
  store ptr %"$acc9", ptr %2, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end
  %"$" = load ptr, ptr %2, align 8
  ret ptr %"$"
}

define ptr @reverse_acc(ptr %0, ptr %1) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  %acc = alloca ptr, align 8
  store ptr %1, ptr %acc, align 8
  %2 = alloca ptr, align 8
  %x = alloca i32, align 4
  %xx = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xs" = load ptr, ptr %xs, align 8
  %xs.tag = getelementptr inbounds %list, ptr %"$xs", i32 0, i32 0
  %"$xs.tag" = load i32, ptr %xs.tag, align 4
  %"xs==2" = icmp eq i32 %"$xs.tag", 2
  br i1 %"xs==2", label %if.then, label %if.end

if.then:                                          ; preds = %start
  %"$xs1" = load ptr, ptr %xs, align 8
  %"xs.[1]" = getelementptr inbounds %Cons, ptr %"$xs1", i32 0, i32 1
  %"$xs.[1]" = load i32, ptr %"xs.[1]", align 4
  store i32 %"$xs.[1]", ptr %x, align 4
  %"$xs2" = load ptr, ptr %xs, align 8
  %"xs.[2]" = getelementptr inbounds %Cons, ptr %"$xs2", i32 0, i32 2
  %"$xs.[2]" = load ptr, ptr %"xs.[2]", align 8
  store ptr %"$xs.[2]", ptr %xx, align 8
  %"$x" = load i32, ptr %x, align 4
  %"$acc" = load ptr, ptr %acc, align 8
  %3 = call ptr @_const_Cons(i32 %"$x", ptr %"$acc")
  %"$xx" = load ptr, ptr %xx, align 8
  %4 = call ptr @reverse_acc(ptr %"$xx", ptr %3)
  store ptr %4, ptr %2, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %start
  %"$xs3" = load ptr, ptr %xs, align 8
  %xs.tag4 = getelementptr inbounds %list, ptr %"$xs3", i32 0, i32 0
  %"$xs.tag5" = load i32, ptr %xs.tag4, align 4
  %"xs==1" = icmp eq i32 %"$xs.tag5", 1
  br i1 %"xs==1", label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  %"$acc8" = load ptr, ptr %acc, align 8
  store ptr %"$acc8", ptr %2, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end
  %"$" = load ptr, ptr %2, align 8
  ret ptr %"$"
}

define ptr @reverse(ptr %0) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  br label %start

start:                                            ; preds = %prolog
  %1 = call ptr @_const_Nil()
  %"$xs" = load ptr, ptr %xs, align 8
  %2 = call ptr @reverse_acc(ptr %"$xs", ptr %1)
  ret ptr %2
}

define ptr @freverse(ptr %0) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  br label %start

start:                                            ; preds = %prolog
  %1 = call ptr @_const_Nil()
  %"$xs" = load ptr, ptr %xs, align 8
  %2 = call ptr @freverse_acc(ptr %"$xs", ptr %1)
  ret ptr %2
}

define ptr @make_list() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  %0 = call ptr @_const_Nil()
  %1 = call ptr @_const_Cons(i32 3, ptr %0)
  %2 = call ptr @_const_Cons(i32 2, ptr %1)
  %3 = call ptr @_const_Cons(i32 1, ptr %2)
  ret ptr %3
}

define i32 @main(i32 %0, ptr %1) {
prolog:
  %argc = alloca i32, align 4
  store i32 %0, ptr %argc, align 4
  %argv = alloca ptr, align 8
  store ptr %1, ptr %argv, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @make_list()
  %3 = call ptr @log_list(ptr %2)
  %4 = call ptr @freverse(ptr %3)
  %5 = call ptr @log_list(ptr %4)
  %6 = call i32 @finish(ptr %5)
  ret i32 %6
}
