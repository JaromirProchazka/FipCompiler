; ModuleID = 'test'
source_filename = "test"

%Tagged = type { i32 }
%Integer = type { i32, i32 }
%Nil = type { i32 }
%Cons = type { i32, ptr, ptr }
%NodeL = type { i32, ptr, ptr, ptr }
%Root = type { i32 }
%NodeR = type { i32, ptr, ptr, ptr }

@0 = private unnamed_addr constant [92 x i8] c"[DEBUG] -- line: 2 -- |'declare_type_constructor' tag field after set in constructor| '%i'\0A\00", align 1
@1 = private unnamed_addr constant [81 x i8] c"[DEBUG] -- line: 2 -- |'declare_type_constructor'_const_Tagged -> _result| '%p'\0A\00", align 1
@2 = private unnamed_addr constant [65 x i8] c"[DEBUG] -- line: 2 -- |tag field after set in constructor| '%i'\0A\00", align 1
@3 = private unnamed_addr constant [55 x i8] c"[DEBUG] -- line: 2 -- |_reuse_Tagged -> _result| '%p'\0A\00", align 1
@4 = private unnamed_addr constant [92 x i8] c"[DEBUG] -- line: 6 -- |'declare_type_constructor' tag field after set in constructor| '%i'\0A\00", align 1
@5 = private unnamed_addr constant [82 x i8] c"[DEBUG] -- line: 6 -- |'declare_type_constructor'_const_Integer -> _result| '%p'\0A\00", align 1
@6 = private unnamed_addr constant [65 x i8] c"[DEBUG] -- line: 6 -- |tag field after set in constructor| '%i'\0A\00", align 1
@7 = private unnamed_addr constant [56 x i8] c"[DEBUG] -- line: 6 -- |_reuse_Integer -> _result| '%p'\0A\00", align 1
@8 = private unnamed_addr constant [93 x i8] c"[DEBUG] -- line: 10 -- |'declare_type_constructor' tag field after set in constructor| '%i'\0A\00", align 1
@9 = private unnamed_addr constant [79 x i8] c"[DEBUG] -- line: 10 -- |'declare_type_constructor'_const_Nil -> _result| '%p'\0A\00", align 1
@10 = private unnamed_addr constant [66 x i8] c"[DEBUG] -- line: 10 -- |tag field after set in constructor| '%i'\0A\00", align 1
@11 = private unnamed_addr constant [53 x i8] c"[DEBUG] -- line: 10 -- |_reuse_Nil -> _result| '%p'\0A\00", align 1
@12 = private unnamed_addr constant [93 x i8] c"[DEBUG] -- line: 11 -- |'declare_type_constructor' tag field after set in constructor| '%i'\0A\00", align 1
@13 = private unnamed_addr constant [80 x i8] c"[DEBUG] -- line: 11 -- |'declare_type_constructor'_const_Cons -> _result| '%p'\0A\00", align 1
@14 = private unnamed_addr constant [66 x i8] c"[DEBUG] -- line: 11 -- |tag field after set in constructor| '%i'\0A\00", align 1
@15 = private unnamed_addr constant [54 x i8] c"[DEBUG] -- line: 11 -- |_reuse_Cons -> _result| '%p'\0A\00", align 1
@16 = private unnamed_addr constant [93 x i8] c"[DEBUG] -- line: 15 -- |'declare_type_constructor' tag field after set in constructor| '%i'\0A\00", align 1
@17 = private unnamed_addr constant [81 x i8] c"[DEBUG] -- line: 15 -- |'declare_type_constructor'_const_NodeL -> _result| '%p'\0A\00", align 1
@18 = private unnamed_addr constant [66 x i8] c"[DEBUG] -- line: 15 -- |tag field after set in constructor| '%i'\0A\00", align 1
@19 = private unnamed_addr constant [55 x i8] c"[DEBUG] -- line: 15 -- |_reuse_NodeL -> _result| '%p'\0A\00", align 1
@20 = private unnamed_addr constant [93 x i8] c"[DEBUG] -- line: 16 -- |'declare_type_constructor' tag field after set in constructor| '%i'\0A\00", align 1
@21 = private unnamed_addr constant [80 x i8] c"[DEBUG] -- line: 16 -- |'declare_type_constructor'_const_Root -> _result| '%p'\0A\00", align 1
@22 = private unnamed_addr constant [66 x i8] c"[DEBUG] -- line: 16 -- |tag field after set in constructor| '%i'\0A\00", align 1
@23 = private unnamed_addr constant [54 x i8] c"[DEBUG] -- line: 16 -- |_reuse_Root -> _result| '%p'\0A\00", align 1
@24 = private unnamed_addr constant [93 x i8] c"[DEBUG] -- line: 18 -- |'declare_type_constructor' tag field after set in constructor| '%i'\0A\00", align 1
@25 = private unnamed_addr constant [81 x i8] c"[DEBUG] -- line: 18 -- |'declare_type_constructor'_const_NodeR -> _result| '%p'\0A\00", align 1
@26 = private unnamed_addr constant [66 x i8] c"[DEBUG] -- line: 18 -- |tag field after set in constructor| '%i'\0A\00", align 1
@27 = private unnamed_addr constant [55 x i8] c"[DEBUG] -- line: 18 -- |_reuse_NodeR -> _result| '%p'\0A\00", align 1

declare ptr @ckrt_malloc(i32)

declare i32 @ckrt_printf(ptr, ...)

declare i32 @ckrt_scanf(ptr, ...)

declare i32 @ckrt_sprintf(ptr, ptr, ...)

declare i32 @ckrt_sscanf(ptr, ptr, ...)

declare ptr @ckrt_memset(ptr, i32, i32)

define ptr @_const_Tagged() {
prolog:
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %0 = call ptr @ckrt_malloc(i32 4)
  store ptr %0, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Tagged, ptr %"$_result", i32 0, i32 0
  store i32 0, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Tagged, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %1 = call i32 (ptr, ...) @ckrt_printf(ptr @0, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @1, ptr %"$_result3")
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_reuse_Tagged(ptr %0) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Tagged, ptr %"$_result", i32 0, i32 0
  store i32 0, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Tagged, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %1 = call i32 (ptr, ...) @ckrt_printf(ptr @2, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @3, ptr %"$_result3")
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_const_Integer(i32 %0) {
prolog:
  %value = alloca i32, align 4
  store i32 %0, ptr %value, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %1 = call ptr @ckrt_malloc(i32 8)
  store ptr %1, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Integer, ptr %"$_result", i32 0, i32 0
  store i32 1, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Integer, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @4, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %Integer, ptr %"$_result3", i32 0, i32 1
  %"$value" = load i32, ptr %value, align 4
  store i32 %"$value", ptr %_result.value, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  %3 = call i32 (ptr, ...) @ckrt_printf(ptr @5, ptr %"$_result4")
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_reuse_Integer(ptr %0, i32 %1) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %value = alloca i32, align 4
  store i32 %1, ptr %value, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Integer, ptr %"$_result", i32 0, i32 0
  store i32 1, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Integer, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @6, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %Integer, ptr %"$_result3", i32 0, i32 1
  %"$value" = load i32, ptr %value, align 4
  store i32 %"$value", ptr %_result.value, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  %3 = call i32 (ptr, ...) @ckrt_printf(ptr @7, ptr %"$_result4")
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_const_Nil() {
prolog:
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %0 = call ptr @ckrt_malloc(i32 4)
  store ptr %0, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Nil, ptr %"$_result", i32 0, i32 0
  store i32 2, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Nil, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %1 = call i32 (ptr, ...) @ckrt_printf(ptr @8, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @9, ptr %"$_result3")
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_reuse_Nil(ptr %0) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Nil, ptr %"$_result", i32 0, i32 0
  store i32 2, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Nil, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %1 = call i32 (ptr, ...) @ckrt_printf(ptr @10, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @11, ptr %"$_result3")
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_const_Cons(ptr %0, ptr %1) {
prolog:
  %value = alloca ptr, align 8
  store ptr %0, ptr %value, align 8
  %tail = alloca ptr, align 8
  store ptr %1, ptr %tail, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @ckrt_malloc(i32 24)
  store ptr %2, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Cons, ptr %"$_result", i32 0, i32 0
  store i32 3, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Cons, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %3 = call i32 (ptr, ...) @ckrt_printf(ptr @12, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %Cons, ptr %"$_result3", i32 0, i32 1
  %"$value" = load ptr, ptr %value, align 8
  store ptr %"$value", ptr %_result.value, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.tail = getelementptr inbounds %Cons, ptr %"$_result4", i32 0, i32 2
  %"$tail" = load ptr, ptr %tail, align 8
  store ptr %"$tail", ptr %_result.tail, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %4 = call i32 (ptr, ...) @ckrt_printf(ptr @13, ptr %"$_result5")
  %"$_result6" = load ptr, ptr %_result, align 8
  ret ptr %"$_result6"
}

define ptr @_reuse_Cons(ptr %0, ptr %1, ptr %2) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %value = alloca ptr, align 8
  store ptr %1, ptr %value, align 8
  %tail = alloca ptr, align 8
  store ptr %2, ptr %tail, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Cons, ptr %"$_result", i32 0, i32 0
  store i32 3, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Cons, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %3 = call i32 (ptr, ...) @ckrt_printf(ptr @14, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %Cons, ptr %"$_result3", i32 0, i32 1
  %"$value" = load ptr, ptr %value, align 8
  store ptr %"$value", ptr %_result.value, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.tail = getelementptr inbounds %Cons, ptr %"$_result4", i32 0, i32 2
  %"$tail" = load ptr, ptr %tail, align 8
  store ptr %"$tail", ptr %_result.tail, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %4 = call i32 (ptr, ...) @ckrt_printf(ptr @15, ptr %"$_result5")
  %"$_result6" = load ptr, ptr %_result, align 8
  ret ptr %"$_result6"
}

define ptr @_const_NodeL(ptr %0, ptr %1, ptr %2) {
prolog:
  %left = alloca ptr, align 8
  store ptr %0, ptr %left, align 8
  %value = alloca ptr, align 8
  store ptr %1, ptr %value, align 8
  %right = alloca ptr, align 8
  store ptr %2, ptr %right, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %3 = call ptr @ckrt_malloc(i32 32)
  store ptr %3, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %NodeL, ptr %"$_result", i32 0, i32 0
  store i32 4, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %NodeL, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %4 = call i32 (ptr, ...) @ckrt_printf(ptr @16, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.left = getelementptr inbounds %NodeL, ptr %"$_result3", i32 0, i32 1
  %"$left" = load ptr, ptr %left, align 8
  store ptr %"$left", ptr %_result.left, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %NodeL, ptr %"$_result4", i32 0, i32 2
  %"$value" = load ptr, ptr %value, align 8
  store ptr %"$value", ptr %_result.value, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.right = getelementptr inbounds %NodeL, ptr %"$_result5", i32 0, i32 3
  %"$right" = load ptr, ptr %right, align 8
  store ptr %"$right", ptr %_result.right, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  %5 = call i32 (ptr, ...) @ckrt_printf(ptr @17, ptr %"$_result6")
  %"$_result7" = load ptr, ptr %_result, align 8
  ret ptr %"$_result7"
}

define ptr @_reuse_NodeL(ptr %0, ptr %1, ptr %2, ptr %3) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %left = alloca ptr, align 8
  store ptr %1, ptr %left, align 8
  %value = alloca ptr, align 8
  store ptr %2, ptr %value, align 8
  %right = alloca ptr, align 8
  store ptr %3, ptr %right, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %NodeL, ptr %"$_result", i32 0, i32 0
  store i32 4, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %NodeL, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %4 = call i32 (ptr, ...) @ckrt_printf(ptr @18, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.left = getelementptr inbounds %NodeL, ptr %"$_result3", i32 0, i32 1
  %"$left" = load ptr, ptr %left, align 8
  store ptr %"$left", ptr %_result.left, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %NodeL, ptr %"$_result4", i32 0, i32 2
  %"$value" = load ptr, ptr %value, align 8
  store ptr %"$value", ptr %_result.value, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.right = getelementptr inbounds %NodeL, ptr %"$_result5", i32 0, i32 3
  %"$right" = load ptr, ptr %right, align 8
  store ptr %"$right", ptr %_result.right, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  %5 = call i32 (ptr, ...) @ckrt_printf(ptr @19, ptr %"$_result6")
  %"$_result7" = load ptr, ptr %_result, align 8
  ret ptr %"$_result7"
}

define ptr @_const_Root() {
prolog:
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %0 = call ptr @ckrt_malloc(i32 4)
  store ptr %0, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Root, ptr %"$_result", i32 0, i32 0
  store i32 5, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Root, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %1 = call i32 (ptr, ...) @ckrt_printf(ptr @20, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @21, ptr %"$_result3")
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_reuse_Root(ptr %0) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Root, ptr %"$_result", i32 0, i32 0
  store i32 5, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Root, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %1 = call i32 (ptr, ...) @ckrt_printf(ptr @22, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @23, ptr %"$_result3")
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_const_NodeR(ptr %0, ptr %1, ptr %2) {
prolog:
  %left = alloca ptr, align 8
  store ptr %0, ptr %left, align 8
  %value = alloca ptr, align 8
  store ptr %1, ptr %value, align 8
  %up = alloca ptr, align 8
  store ptr %2, ptr %up, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %3 = call ptr @ckrt_malloc(i32 32)
  store ptr %3, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %NodeR, ptr %"$_result", i32 0, i32 0
  store i32 6, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %NodeR, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %4 = call i32 (ptr, ...) @ckrt_printf(ptr @24, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.left = getelementptr inbounds %NodeR, ptr %"$_result3", i32 0, i32 1
  %"$left" = load ptr, ptr %left, align 8
  store ptr %"$left", ptr %_result.left, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %NodeR, ptr %"$_result4", i32 0, i32 2
  %"$value" = load ptr, ptr %value, align 8
  store ptr %"$value", ptr %_result.value, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.up = getelementptr inbounds %NodeR, ptr %"$_result5", i32 0, i32 3
  %"$up" = load ptr, ptr %up, align 8
  store ptr %"$up", ptr %_result.up, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  %5 = call i32 (ptr, ...) @ckrt_printf(ptr @25, ptr %"$_result6")
  %"$_result7" = load ptr, ptr %_result, align 8
  ret ptr %"$_result7"
}

define ptr @_reuse_NodeR(ptr %0, ptr %1, ptr %2, ptr %3) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %left = alloca ptr, align 8
  store ptr %1, ptr %left, align 8
  %value = alloca ptr, align 8
  store ptr %2, ptr %value, align 8
  %up = alloca ptr, align 8
  store ptr %3, ptr %up, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %NodeR, ptr %"$_result", i32 0, i32 0
  store i32 6, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %NodeR, ptr %"$_result1", i32 0, i32 0
  %"$_result._tag" = load i32, ptr %_result._tag2, align 4
  %4 = call i32 (ptr, ...) @ckrt_printf(ptr @26, i32 %"$_result._tag")
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.left = getelementptr inbounds %NodeR, ptr %"$_result3", i32 0, i32 1
  %"$left" = load ptr, ptr %left, align 8
  store ptr %"$left", ptr %_result.left, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %NodeR, ptr %"$_result4", i32 0, i32 2
  %"$value" = load ptr, ptr %value, align 8
  store ptr %"$value", ptr %_result.value, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.up = getelementptr inbounds %NodeR, ptr %"$_result5", i32 0, i32 3
  %"$up" = load ptr, ptr %up, align 8
  store ptr %"$up", ptr %_result.up, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  %5 = call i32 (ptr, ...) @ckrt_printf(ptr @27, ptr %"$_result6")
  %"$_result7" = load ptr, ptr %_result, align 8
  ret ptr %"$_result7"
}

define i32 @main(i32 %0, ptr %1) {
prolog:
  %argc = alloca i32, align 4
  store i32 %0, ptr %argc, align 4
  %argv = alloca ptr, align 8
  store ptr %1, ptr %argv, align 8
  br label %start

start:                                            ; preds = %prolog
  ret i32 0
}
