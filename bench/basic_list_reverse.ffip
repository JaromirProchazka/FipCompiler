type list {
    Nil;
    Cons(int val, type list next);
}




int head [type list xs] = match xs -> int {
    | Nil               -> 0
    | Cons(x, xx)       -> x
}

int finish [type Tagged x] = 0

type list second [int x, type list xx] = xx

int travers_list [type list xs] = match xs -> int {
    | Nil               -> printf("Nil\n")
    | Cons(x, xx)       -> travers_list( second( log(x, "-> "), xx ))
}

type list log_list [type list xs] = second( travers_list(xs), xs)


type list reverse [type list xs];
type list freverse [type list xs];

fip type list freverse_acc [type list xs, type list acc] 
    = match! xs -> type list {
        | Nil           -> acc
        | Cons(x, xx)   -> freverse_acc(xx, Cons(x, acc))
}

type list reverse_acc [type list xs, type list acc] 
    = match xs -> type list {
        | Nil           -> acc
        | Cons(x, xx)   -> reverse_acc(xx, Cons(x, acc))
}

type list reverse [type list xs] = reverse_acc(xs, Nil)

type list freverse [type list xs] = freverse_acc(xs, Nil)

type list make_list [] = Cons(1, Cons(2, Cons(3, Nil )))

int main [int argc, char** argv] = 
    finish( log_list( freverse( log_list( make_list() ))))