; ModuleID = 'test'
source_filename = "test"

%Pair = type { i32, ptr, ptr }
%Tuple3 = type { i32, ptr, ptr, ptr }
%Tuple4 = type { i32, ptr, ptr, ptr, ptr }
%Boolean = type { i32, i32 }
%Integer = type { i32, i32 }
%Cons = type { i32, ptr, ptr }
%NodeL = type { i32, ptr, ptr, ptr }
%NodeR = type { i32, ptr, ptr, ptr }

@Pair_global_stored = global %Pair zeroinitializer
@Tuple3_global_stored = global %Tuple3 zeroinitializer
@Tuple4_global_stored = global %Tuple4 zeroinitializer
@Boolean_global_stored = global %Boolean zeroinitializer

declare ptr @ckrt_malloc(i32)

declare i32 @ckrt_printf(ptr, ...)

declare i32 @ckrt_scanf(ptr, ...)

declare i32 @ckrt_sprintf(ptr, ptr, ...)

declare i32 @ckrt_sscanf(ptr, ptr, ...)

declare ptr @ckrt_memset(ptr, i32, i32)

declare void @ckrt_measure_cpu_time()

define ptr @_const_Tagged() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  ret ptr null
}

define ptr @_const_Pair(ptr %0, ptr %1) {
prolog:
  %first = alloca ptr, align 8
  store ptr %0, ptr %first, align 8
  %second = alloca ptr, align 8
  store ptr %1, ptr %second, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  store ptr @Pair_global_stored, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Pair, ptr %"$_result", i32 0, i32 0
  store i32 1, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Pair, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.first = getelementptr inbounds %Pair, ptr %"$_result3", i32 0, i32 1
  %"$first" = load ptr, ptr %first, align 8
  store ptr %"$first", ptr %_result.first, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.second = getelementptr inbounds %Pair, ptr %"$_result4", i32 0, i32 2
  %"$second" = load ptr, ptr %second, align 8
  store ptr %"$second", ptr %_result.second, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_const_Tuple3(ptr %0, ptr %1, ptr %2) {
prolog:
  %first = alloca ptr, align 8
  store ptr %0, ptr %first, align 8
  %second = alloca ptr, align 8
  store ptr %1, ptr %second, align 8
  %third = alloca ptr, align 8
  store ptr %2, ptr %third, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  store ptr @Tuple3_global_stored, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Tuple3, ptr %"$_result", i32 0, i32 0
  store i32 2, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Tuple3, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.first = getelementptr inbounds %Tuple3, ptr %"$_result3", i32 0, i32 1
  %"$first" = load ptr, ptr %first, align 8
  store ptr %"$first", ptr %_result.first, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.second = getelementptr inbounds %Tuple3, ptr %"$_result4", i32 0, i32 2
  %"$second" = load ptr, ptr %second, align 8
  store ptr %"$second", ptr %_result.second, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.third = getelementptr inbounds %Tuple3, ptr %"$_result5", i32 0, i32 3
  %"$third" = load ptr, ptr %third, align 8
  store ptr %"$third", ptr %_result.third, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  ret ptr %"$_result6"
}

define ptr @_const_Tuple4(ptr %0, ptr %1, ptr %2, ptr %3) {
prolog:
  %first = alloca ptr, align 8
  store ptr %0, ptr %first, align 8
  %second = alloca ptr, align 8
  store ptr %1, ptr %second, align 8
  %third = alloca ptr, align 8
  store ptr %2, ptr %third, align 8
  %forth = alloca ptr, align 8
  store ptr %3, ptr %forth, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  store ptr @Tuple4_global_stored, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Tuple4, ptr %"$_result", i32 0, i32 0
  store i32 3, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Tuple4, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.first = getelementptr inbounds %Tuple4, ptr %"$_result3", i32 0, i32 1
  %"$first" = load ptr, ptr %first, align 8
  store ptr %"$first", ptr %_result.first, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.second = getelementptr inbounds %Tuple4, ptr %"$_result4", i32 0, i32 2
  %"$second" = load ptr, ptr %second, align 8
  store ptr %"$second", ptr %_result.second, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.third = getelementptr inbounds %Tuple4, ptr %"$_result5", i32 0, i32 3
  %"$third" = load ptr, ptr %third, align 8
  store ptr %"$third", ptr %_result.third, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  %_result.forth = getelementptr inbounds %Tuple4, ptr %"$_result6", i32 0, i32 4
  %"$forth" = load ptr, ptr %forth, align 8
  store ptr %"$forth", ptr %_result.forth, align 8
  %"$_result7" = load ptr, ptr %_result, align 8
  ret ptr %"$_result7"
}

define ptr @_const_Boolean(i32 %0) {
prolog:
  %value = alloca i32, align 4
  store i32 %0, ptr %value, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  store ptr @Boolean_global_stored, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Boolean, ptr %"$_result", i32 0, i32 0
  store i32 4, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Boolean, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %Boolean, ptr %"$_result3", i32 0, i32 1
  %"$value" = load i32, ptr %value, align 4
  store i32 %"$value", ptr %_result.value, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_const_Integer(i32 %0) {
prolog:
  %value = alloca i32, align 4
  store i32 %0, ptr %value, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %1 = call ptr @ckrt_malloc(i32 16)
  store ptr %1, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Integer, ptr %"$_result", i32 0, i32 0
  store i32 5, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Integer, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %Integer, ptr %"$_result3", i32 0, i32 1
  %"$value" = load i32, ptr %value, align 4
  store i32 %"$value", ptr %_result.value, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_reuse_Integer(ptr %0, i32 %1) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %value = alloca i32, align 4
  store i32 %1, ptr %value, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Integer, ptr %"$_result", i32 0, i32 0
  store i32 5, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Integer, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %Integer, ptr %"$_result3", i32 0, i32 1
  %"$value" = load i32, ptr %value, align 4
  store i32 %"$value", ptr %_result.value, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_const_Nil() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  ret ptr null
}

define ptr @_const_Cons(ptr %0, ptr %1) {
prolog:
  %value = alloca ptr, align 8
  store ptr %0, ptr %value, align 8
  %tail = alloca ptr, align 8
  store ptr %1, ptr %tail, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @ckrt_malloc(i32 24)
  store ptr %2, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Cons, ptr %"$_result", i32 0, i32 0
  store i32 7, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Cons, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %Cons, ptr %"$_result3", i32 0, i32 1
  %"$value" = load ptr, ptr %value, align 8
  store ptr %"$value", ptr %_result.value, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.tail = getelementptr inbounds %Cons, ptr %"$_result4", i32 0, i32 2
  %"$tail" = load ptr, ptr %tail, align 8
  store ptr %"$tail", ptr %_result.tail, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_reuse_Cons(ptr %0, ptr %1, ptr %2) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %value = alloca ptr, align 8
  store ptr %1, ptr %value, align 8
  %tail = alloca ptr, align 8
  store ptr %2, ptr %tail, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Cons, ptr %"$_result", i32 0, i32 0
  store i32 7, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Cons, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %Cons, ptr %"$_result3", i32 0, i32 1
  %"$value" = load ptr, ptr %value, align 8
  store ptr %"$value", ptr %_result.value, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.tail = getelementptr inbounds %Cons, ptr %"$_result4", i32 0, i32 2
  %"$tail" = load ptr, ptr %tail, align 8
  store ptr %"$tail", ptr %_result.tail, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_const_NodeL(ptr %0, ptr %1, ptr %2) {
prolog:
  %left = alloca ptr, align 8
  store ptr %0, ptr %left, align 8
  %value = alloca ptr, align 8
  store ptr %1, ptr %value, align 8
  %right = alloca ptr, align 8
  store ptr %2, ptr %right, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %3 = call ptr @ckrt_malloc(i32 32)
  store ptr %3, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %NodeL, ptr %"$_result", i32 0, i32 0
  store i32 8, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %NodeL, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.left = getelementptr inbounds %NodeL, ptr %"$_result3", i32 0, i32 1
  %"$left" = load ptr, ptr %left, align 8
  store ptr %"$left", ptr %_result.left, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %NodeL, ptr %"$_result4", i32 0, i32 2
  %"$value" = load ptr, ptr %value, align 8
  store ptr %"$value", ptr %_result.value, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.right = getelementptr inbounds %NodeL, ptr %"$_result5", i32 0, i32 3
  %"$right" = load ptr, ptr %right, align 8
  store ptr %"$right", ptr %_result.right, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  ret ptr %"$_result6"
}

define ptr @_reuse_NodeL(ptr %0, ptr %1, ptr %2, ptr %3) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %left = alloca ptr, align 8
  store ptr %1, ptr %left, align 8
  %value = alloca ptr, align 8
  store ptr %2, ptr %value, align 8
  %right = alloca ptr, align 8
  store ptr %3, ptr %right, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %NodeL, ptr %"$_result", i32 0, i32 0
  store i32 8, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %NodeL, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.left = getelementptr inbounds %NodeL, ptr %"$_result3", i32 0, i32 1
  %"$left" = load ptr, ptr %left, align 8
  store ptr %"$left", ptr %_result.left, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %NodeL, ptr %"$_result4", i32 0, i32 2
  %"$value" = load ptr, ptr %value, align 8
  store ptr %"$value", ptr %_result.value, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.right = getelementptr inbounds %NodeL, ptr %"$_result5", i32 0, i32 3
  %"$right" = load ptr, ptr %right, align 8
  store ptr %"$right", ptr %_result.right, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  ret ptr %"$_result6"
}

define ptr @_const_Root() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  ret ptr null
}

define ptr @_const_NodeR(ptr %0, ptr %1, ptr %2) {
prolog:
  %left = alloca ptr, align 8
  store ptr %0, ptr %left, align 8
  %value = alloca ptr, align 8
  store ptr %1, ptr %value, align 8
  %up = alloca ptr, align 8
  store ptr %2, ptr %up, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %3 = call ptr @ckrt_malloc(i32 32)
  store ptr %3, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %NodeR, ptr %"$_result", i32 0, i32 0
  store i32 10, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %NodeR, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.left = getelementptr inbounds %NodeR, ptr %"$_result3", i32 0, i32 1
  %"$left" = load ptr, ptr %left, align 8
  store ptr %"$left", ptr %_result.left, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %NodeR, ptr %"$_result4", i32 0, i32 2
  %"$value" = load ptr, ptr %value, align 8
  store ptr %"$value", ptr %_result.value, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.up = getelementptr inbounds %NodeR, ptr %"$_result5", i32 0, i32 3
  %"$up" = load ptr, ptr %up, align 8
  store ptr %"$up", ptr %_result.up, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  ret ptr %"$_result6"
}

define ptr @_reuse_NodeR(ptr %0, ptr %1, ptr %2, ptr %3) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %left = alloca ptr, align 8
  store ptr %1, ptr %left, align 8
  %value = alloca ptr, align 8
  store ptr %2, ptr %value, align 8
  %up = alloca ptr, align 8
  store ptr %3, ptr %up, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %NodeR, ptr %"$_result", i32 0, i32 0
  store i32 10, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %NodeR, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.left = getelementptr inbounds %NodeR, ptr %"$_result3", i32 0, i32 1
  %"$left" = load ptr, ptr %left, align 8
  store ptr %"$left", ptr %_result.left, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %NodeR, ptr %"$_result4", i32 0, i32 2
  %"$value" = load ptr, ptr %value, align 8
  store ptr %"$value", ptr %_result.value, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.up = getelementptr inbounds %NodeR, ptr %"$_result5", i32 0, i32 3
  %"$up" = load ptr, ptr %up, align 8
  store ptr %"$up", ptr %_result.up, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  ret ptr %"$_result6"
}

define i32 @main(i32 %0, ptr %1) {
prolog:
  %argc = alloca i32, align 4
  store i32 %0, ptr %argc, align 4
  %argv = alloca ptr, align 8
  store ptr %1, ptr %argv, align 8
  br label %start

start:                                            ; preds = %prolog
  ret i32 0
}
