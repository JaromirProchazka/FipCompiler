; ModuleID = 'test'
source_filename = "test"

%Pair = type { i32, ptr, ptr }
%Tuple3 = type { i32, ptr, ptr, ptr }
%Tuple4 = type { i32, ptr, ptr, ptr, ptr }
%Boolean = type { i32, i32 }
%Elem = type { i32, i32 }
%Cons_elem = type { i32, ptr, ptr }
%elem = type { i32 }
%list_elem = type { i32 }

@Pair_global_stored = global %Pair zeroinitializer
@Tuple3_global_stored = global %Tuple3 zeroinitializer
@Tuple4_global_stored = global %Tuple4 zeroinitializer
@Boolean_global_stored = global %Boolean zeroinitializer
@0 = private unnamed_addr constant [4 x i8] c"-> \00", align 1
@1 = private unnamed_addr constant [6 x i8] c"%i %s\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"Nil\0A\00", align 1
@3 = private unnamed_addr constant [13 x i8] c"log started\0A\00", align 1
@4 = private unnamed_addr constant [6 x i8] c"%p %s\00", align 1

declare ptr @ckrt_malloc(i32)

declare i32 @ckrt_printf(ptr, ...)

declare i32 @ckrt_scanf(ptr, ...)

declare i32 @ckrt_sprintf(ptr, ptr, ...)

declare i32 @ckrt_sscanf(ptr, ptr, ...)

declare ptr @ckrt_memset(ptr, i32, i32)

declare void @ckrt_measure_cpu_time()

define ptr @_const_Tagged() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  ret ptr null
}

define ptr @_const_Pair(ptr %0, ptr %1) {
prolog:
  %first = alloca ptr, align 8
  store ptr %0, ptr %first, align 8
  %second = alloca ptr, align 8
  store ptr %1, ptr %second, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  store ptr @Pair_global_stored, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Pair, ptr %"$_result", i32 0, i32 0
  store i32 1, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Pair, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.first = getelementptr inbounds %Pair, ptr %"$_result3", i32 0, i32 1
  %"$first" = load ptr, ptr %first, align 8
  store ptr %"$first", ptr %_result.first, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.second = getelementptr inbounds %Pair, ptr %"$_result4", i32 0, i32 2
  %"$second" = load ptr, ptr %second, align 8
  store ptr %"$second", ptr %_result.second, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_const_Tuple3(ptr %0, ptr %1, ptr %2) {
prolog:
  %first = alloca ptr, align 8
  store ptr %0, ptr %first, align 8
  %second = alloca ptr, align 8
  store ptr %1, ptr %second, align 8
  %third = alloca ptr, align 8
  store ptr %2, ptr %third, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  store ptr @Tuple3_global_stored, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Tuple3, ptr %"$_result", i32 0, i32 0
  store i32 2, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Tuple3, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.first = getelementptr inbounds %Tuple3, ptr %"$_result3", i32 0, i32 1
  %"$first" = load ptr, ptr %first, align 8
  store ptr %"$first", ptr %_result.first, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.second = getelementptr inbounds %Tuple3, ptr %"$_result4", i32 0, i32 2
  %"$second" = load ptr, ptr %second, align 8
  store ptr %"$second", ptr %_result.second, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.third = getelementptr inbounds %Tuple3, ptr %"$_result5", i32 0, i32 3
  %"$third" = load ptr, ptr %third, align 8
  store ptr %"$third", ptr %_result.third, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  ret ptr %"$_result6"
}

define ptr @_const_Tuple4(ptr %0, ptr %1, ptr %2, ptr %3) {
prolog:
  %first = alloca ptr, align 8
  store ptr %0, ptr %first, align 8
  %second = alloca ptr, align 8
  store ptr %1, ptr %second, align 8
  %third = alloca ptr, align 8
  store ptr %2, ptr %third, align 8
  %forth = alloca ptr, align 8
  store ptr %3, ptr %forth, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  store ptr @Tuple4_global_stored, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Tuple4, ptr %"$_result", i32 0, i32 0
  store i32 3, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Tuple4, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.first = getelementptr inbounds %Tuple4, ptr %"$_result3", i32 0, i32 1
  %"$first" = load ptr, ptr %first, align 8
  store ptr %"$first", ptr %_result.first, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.second = getelementptr inbounds %Tuple4, ptr %"$_result4", i32 0, i32 2
  %"$second" = load ptr, ptr %second, align 8
  store ptr %"$second", ptr %_result.second, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.third = getelementptr inbounds %Tuple4, ptr %"$_result5", i32 0, i32 3
  %"$third" = load ptr, ptr %third, align 8
  store ptr %"$third", ptr %_result.third, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  %_result.forth = getelementptr inbounds %Tuple4, ptr %"$_result6", i32 0, i32 4
  %"$forth" = load ptr, ptr %forth, align 8
  store ptr %"$forth", ptr %_result.forth, align 8
  %"$_result7" = load ptr, ptr %_result, align 8
  ret ptr %"$_result7"
}

define ptr @_const_Boolean(i32 %0) {
prolog:
  %value = alloca i32, align 4
  store i32 %0, ptr %value, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  store ptr @Boolean_global_stored, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Boolean, ptr %"$_result", i32 0, i32 0
  store i32 4, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Boolean, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %Boolean, ptr %"$_result3", i32 0, i32 1
  %"$value" = load i32, ptr %value, align 4
  store i32 %"$value", ptr %_result.value, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_const_Elem(i32 %0) {
prolog:
  %val = alloca i32, align 4
  store i32 %0, ptr %val, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %1 = call ptr @ckrt_malloc(i32 16)
  store ptr %1, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Elem, ptr %"$_result", i32 0, i32 0
  store i32 5, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Elem, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.val = getelementptr inbounds %Elem, ptr %"$_result3", i32 0, i32 1
  %"$val" = load i32, ptr %val, align 4
  store i32 %"$val", ptr %_result.val, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_reuse_Elem(ptr %0, i32 %1) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %val = alloca i32, align 4
  store i32 %1, ptr %val, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Elem, ptr %"$_result", i32 0, i32 0
  store i32 5, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Elem, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.val = getelementptr inbounds %Elem, ptr %"$_result3", i32 0, i32 1
  %"$val" = load i32, ptr %val, align 4
  store i32 %"$val", ptr %_result.val, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_const_Nil_elem() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  ret ptr null
}

define ptr @_const_Cons_elem(ptr %0, ptr %1) {
prolog:
  %val = alloca ptr, align 8
  store ptr %0, ptr %val, align 8
  %next = alloca ptr, align 8
  store ptr %1, ptr %next, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @ckrt_malloc(i32 24)
  store ptr %2, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Cons_elem, ptr %"$_result", i32 0, i32 0
  store i32 7, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Cons_elem, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.val = getelementptr inbounds %Cons_elem, ptr %"$_result3", i32 0, i32 1
  %"$val" = load ptr, ptr %val, align 8
  store ptr %"$val", ptr %_result.val, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.next = getelementptr inbounds %Cons_elem, ptr %"$_result4", i32 0, i32 2
  %"$next" = load ptr, ptr %next, align 8
  store ptr %"$next", ptr %_result.next, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_reuse_Cons_elem(ptr %0, ptr %1, ptr %2) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %val = alloca ptr, align 8
  store ptr %1, ptr %val, align 8
  %next = alloca ptr, align 8
  store ptr %2, ptr %next, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Cons_elem, ptr %"$_result", i32 0, i32 0
  store i32 7, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Cons_elem, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.val = getelementptr inbounds %Cons_elem, ptr %"$_result3", i32 0, i32 1
  %"$val" = load ptr, ptr %val, align 8
  store ptr %"$val", ptr %_result.val, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.next = getelementptr inbounds %Cons_elem, ptr %"$_result4", i32 0, i32 2
  %"$next" = load ptr, ptr %next, align 8
  store ptr %"$next", ptr %_result.next, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define i32 @_elem(ptr %0) {
prolog:
  %e = alloca ptr, align 8
  store ptr %0, ptr %e, align 8
  %1 = alloca i32, align 4
  %i = alloca i32, align 4
  br label %start

start:                                            ; preds = %prolog
  %"$e" = load ptr, ptr %e, align 8
  %e.tag = getelementptr inbounds %elem, ptr %"$e", i32 0, i32 0
  %"$e.tag" = load i32, ptr %e.tag, align 4
  %"e==5" = icmp eq i32 %"$e.tag", 5
  br i1 %"e==5", label %if.then, label %if.end

if.then:                                          ; preds = %start
  %"$e1" = load ptr, ptr %e, align 8
  %"e.[1]" = getelementptr inbounds %Elem, ptr %"$e1", i32 0, i32 1
  %"$e.[1]" = load i32, ptr %"e.[1]", align 4
  store i32 %"$e.[1]", ptr %i, align 4
  %"$i" = load i32, ptr %i, align 4
  store i32 %"$i", ptr %1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %start
  %"$" = load i32, ptr %1, align 4
  ret i32 %"$"
}

define ptr @partition(ptr %0, ptr %1) {
prolog:
  %x = alloca ptr, align 8
  store ptr %0, ptr %x, align 8
  %ys = alloca ptr, align 8
  store ptr %1, ptr %ys, align 8
  %2 = alloca ptr, align 8
  %y = alloca ptr, align 8
  %yy = alloca ptr, align 8
  %_result = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %lo = alloca ptr, align 8
  %hi = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %lo20 = alloca ptr, align 8
  %hi23 = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$ys" = load ptr, ptr %ys, align 8
  %"(bool)ys" = icmp ne ptr %"$ys", null
  %"!(bool)ys" = xor i1 %"(bool)ys", true
  br i1 %"!(bool)ys", label %if.then, label %if.else

if.then:                                          ; preds = %start
  %5 = call ptr @_const_Nil_elem()
  %6 = call ptr @_const_Nil_elem()
  %7 = call ptr @_const_Pair(ptr %5, ptr %6)
  store ptr %7, ptr %2, align 8
  br label %if.end

if.end:                                           ; preds = %if.end3, %if.then
  %"$30" = load ptr, ptr %2, align 8
  ret ptr %"$30"

if.else:                                          ; preds = %start
  %"$ys1" = load ptr, ptr %ys, align 8
  %ys.tag = getelementptr inbounds %list_elem, ptr %"$ys1", i32 0, i32 0
  %"$ys.tag" = load i32, ptr %ys.tag, align 4
  %"ys==7" = icmp eq i32 %"$ys.tag", 7
  br i1 %"ys==7", label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.else
  %"$ys4" = load ptr, ptr %ys, align 8
  %"ys.[1]" = getelementptr inbounds %Cons_elem, ptr %"$ys4", i32 0, i32 1
  %"$ys.[1]" = load ptr, ptr %"ys.[1]", align 8
  store ptr %"$ys.[1]", ptr %y, align 8
  %"$ys5" = load ptr, ptr %ys, align 8
  %"ys.[2]" = getelementptr inbounds %Cons_elem, ptr %"$ys5", i32 0, i32 2
  %"$ys.[2]" = load ptr, ptr %"ys.[2]", align 8
  store ptr %"$ys.[2]", ptr %yy, align 8
  %"$y" = load ptr, ptr %y, align 8
  %8 = call i32 @_elem(ptr %"$y")
  %"$x" = load ptr, ptr %x, align 8
  %9 = call i32 @_elem(ptr %"$x")
  %"_elem_call<_elem_call" = icmp slt i32 %8, %9
  br i1 %"_elem_call<_elem_call", label %if.then6, label %if.else12

if.end3:                                          ; preds = %if.end7, %if.else
  br label %if.end

if.then6:                                         ; preds = %if.then2
  %"$x8" = load ptr, ptr %x, align 8
  %"$yy" = load ptr, ptr %yy, align 8
  %10 = call ptr @partition(ptr %"$x8", ptr %"$yy")
  %partition_call.tag = getelementptr inbounds %Pair, ptr %10, i32 0, i32 0
  %"$partition_call.tag" = load i32, ptr %partition_call.tag, align 4
  %"partition_call==1" = icmp eq i32 %"$partition_call.tag", 1
  br i1 %"partition_call==1", label %if.then9, label %if.end10

if.end7:                                          ; preds = %if.end19, %if.end10
  %"$_result" = load ptr, ptr %_result, align 8
  store ptr %"$_result", ptr %2, align 8
  br label %if.end3

if.then9:                                         ; preds = %if.then6
  %"partition_call.[1]" = getelementptr inbounds %Pair, ptr %10, i32 0, i32 1
  %"$partition_call.[1]" = load ptr, ptr %"partition_call.[1]", align 8
  store ptr %"$partition_call.[1]", ptr %lo, align 8
  %"partition_call.[2]" = getelementptr inbounds %Pair, ptr %10, i32 0, i32 2
  %"$partition_call.[2]" = load ptr, ptr %"partition_call.[2]", align 8
  store ptr %"$partition_call.[2]", ptr %hi, align 8
  %"$y11" = load ptr, ptr %y, align 8
  %"$lo" = load ptr, ptr %lo, align 8
  %11 = call ptr @_const_Cons_elem(ptr %"$y11", ptr %"$lo")
  %"$hi" = load ptr, ptr %hi, align 8
  %12 = call ptr @_const_Pair(ptr %11, ptr %"$hi")
  store ptr %12, ptr %3, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.then6
  %"$" = load ptr, ptr %3, align 8
  store ptr %"$", ptr %_result, align 8
  br label %if.end7

if.else12:                                        ; preds = %if.then2
  %"$x13" = load ptr, ptr %x, align 8
  %"$yy14" = load ptr, ptr %yy, align 8
  %13 = call ptr @partition(ptr %"$x13", ptr %"$yy14")
  %partition_call.tag15 = getelementptr inbounds %Pair, ptr %13, i32 0, i32 0
  %"$partition_call.tag16" = load i32, ptr %partition_call.tag15, align 4
  %"partition_call==117" = icmp eq i32 %"$partition_call.tag16", 1
  br i1 %"partition_call==117", label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.else12
  %"partition_call.[1]21" = getelementptr inbounds %Pair, ptr %13, i32 0, i32 1
  %"$partition_call.[1]22" = load ptr, ptr %"partition_call.[1]21", align 8
  store ptr %"$partition_call.[1]22", ptr %lo20, align 8
  %"partition_call.[2]24" = getelementptr inbounds %Pair, ptr %13, i32 0, i32 2
  %"$partition_call.[2]25" = load ptr, ptr %"partition_call.[2]24", align 8
  store ptr %"$partition_call.[2]25", ptr %hi23, align 8
  %"$y26" = load ptr, ptr %y, align 8
  %"$hi27" = load ptr, ptr %hi23, align 8
  %14 = call ptr @_const_Cons_elem(ptr %"$y26", ptr %"$hi27")
  %"$lo28" = load ptr, ptr %lo20, align 8
  %15 = call ptr @_const_Pair(ptr %"$lo28", ptr %14)
  store ptr %15, ptr %4, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %if.else12
  %"$29" = load ptr, ptr %4, align 8
  store ptr %"$29", ptr %_result, align 8
  br label %if.end7
}

define ptr @quicksort_helper(ptr %0, ptr %1) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  %res = alloca ptr, align 8
  store ptr %1, ptr %res, align 8
  %2 = alloca ptr, align 8
  %x = alloca ptr, align 8
  %xx = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %lo = alloca ptr, align 8
  %hi = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xs" = load ptr, ptr %xs, align 8
  %"(bool)xs" = icmp ne ptr %"$xs", null
  %"!(bool)xs" = xor i1 %"(bool)xs", true
  br i1 %"!(bool)xs", label %if.then, label %if.else

if.then:                                          ; preds = %start
  %"$res" = load ptr, ptr %res, align 8
  store ptr %"$res", ptr %2, align 8
  br label %if.end

if.end:                                           ; preds = %if.end3, %if.then
  %"$10" = load ptr, ptr %2, align 8
  ret ptr %"$10"

if.else:                                          ; preds = %start
  %"$xs1" = load ptr, ptr %xs, align 8
  %xs.tag = getelementptr inbounds %list_elem, ptr %"$xs1", i32 0, i32 0
  %"$xs.tag" = load i32, ptr %xs.tag, align 4
  %"xs==7" = icmp eq i32 %"$xs.tag", 7
  br i1 %"xs==7", label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.else
  %"$xs4" = load ptr, ptr %xs, align 8
  %"xs.[1]" = getelementptr inbounds %Cons_elem, ptr %"$xs4", i32 0, i32 1
  %"$xs.[1]" = load ptr, ptr %"xs.[1]", align 8
  store ptr %"$xs.[1]", ptr %x, align 8
  %"$xs5" = load ptr, ptr %xs, align 8
  %"xs.[2]" = getelementptr inbounds %Cons_elem, ptr %"$xs5", i32 0, i32 2
  %"$xs.[2]" = load ptr, ptr %"xs.[2]", align 8
  store ptr %"$xs.[2]", ptr %xx, align 8
  %"$x" = load ptr, ptr %x, align 8
  %"$xx" = load ptr, ptr %xx, align 8
  %4 = call ptr @partition(ptr %"$x", ptr %"$xx")
  %partition_call.tag = getelementptr inbounds %Pair, ptr %4, i32 0, i32 0
  %"$partition_call.tag" = load i32, ptr %partition_call.tag, align 4
  %"partition_call==1" = icmp eq i32 %"$partition_call.tag", 1
  br i1 %"partition_call==1", label %if.then6, label %if.end7

if.end3:                                          ; preds = %if.end7, %if.else
  br label %if.end

if.then6:                                         ; preds = %if.then2
  %"partition_call.[1]" = getelementptr inbounds %Pair, ptr %4, i32 0, i32 1
  %"$partition_call.[1]" = load ptr, ptr %"partition_call.[1]", align 8
  store ptr %"$partition_call.[1]", ptr %lo, align 8
  %"partition_call.[2]" = getelementptr inbounds %Pair, ptr %4, i32 0, i32 2
  %"$partition_call.[2]" = load ptr, ptr %"partition_call.[2]", align 8
  store ptr %"$partition_call.[2]", ptr %hi, align 8
  %"$hi" = load ptr, ptr %hi, align 8
  %"$res8" = load ptr, ptr %res, align 8
  %5 = call ptr @quicksort_helper(ptr %"$hi", ptr %"$res8")
  %"$x9" = load ptr, ptr %x, align 8
  %6 = call ptr @_const_Cons_elem(ptr %"$x9", ptr %5)
  %"$lo" = load ptr, ptr %lo, align 8
  %7 = call ptr @quicksort_helper(ptr %"$lo", ptr %6)
  store ptr %7, ptr %3, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.then2
  %"$" = load ptr, ptr %3, align 8
  store ptr %"$", ptr %2, align 8
  br label %if.end3
}

define ptr @quicksort(ptr %0) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  br label %start

start:                                            ; preds = %prolog
  %1 = call ptr @_const_Nil_elem()
  %"$xs" = load ptr, ptr %xs, align 8
  %2 = call ptr @quicksort_helper(ptr %"$xs", ptr %1)
  ret ptr %2
}

define i32 @finish(ptr %0) {
prolog:
  %x = alloca ptr, align 8
  store ptr %0, ptr %x, align 8
  br label %start

start:                                            ; preds = %prolog
  ret i32 0
}

define ptr @second(ptr %0, ptr %1) {
prolog:
  %x = alloca ptr, align 8
  store ptr %0, ptr %x, align 8
  %xx = alloca ptr, align 8
  store ptr %1, ptr %xx, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xx" = load ptr, ptr %xx, align 8
  ret ptr %"$xx"
}

define ptr @second_first_int(i32 %0, ptr %1) {
prolog:
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %xx = alloca ptr, align 8
  store ptr %1, ptr %xx, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xx" = load ptr, ptr %xx, align 8
  ret ptr %"$xx"
}

define ptr @log_elem(ptr %0) {
prolog:
  %e = alloca ptr, align 8
  store ptr %0, ptr %e, align 8
  %1 = alloca ptr, align 8
  %i = alloca i32, align 4
  br label %start

start:                                            ; preds = %prolog
  %"$e" = load ptr, ptr %e, align 8
  %e.tag = getelementptr inbounds %elem, ptr %"$e", i32 0, i32 0
  %"$e.tag" = load i32, ptr %e.tag, align 4
  %"e==5" = icmp eq i32 %"$e.tag", 5
  br i1 %"e==5", label %if.then, label %if.end

if.then:                                          ; preds = %start
  %"$e1" = load ptr, ptr %e, align 8
  %"e.[1]" = getelementptr inbounds %Elem, ptr %"$e1", i32 0, i32 1
  %"$e.[1]" = load i32, ptr %"e.[1]", align 4
  store i32 %"$e.[1]", ptr %i, align 4
  %"$i" = load i32, ptr %i, align 4
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @1, i32 %"$i", ptr @0)
  %"$e2" = load ptr, ptr %e, align 8
  %"$i3" = load i32, ptr %i, align 4
  %3 = call ptr @_reuse_Elem(ptr %"$e2", i32 %"$i3")
  store ptr %3, ptr %1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %start
  %"$" = load ptr, ptr %1, align 8
  ret ptr %"$"
}

define i32 @_travers_list(ptr %0) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  %1 = alloca i32, align 4
  %x = alloca ptr, align 8
  %xx = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xs" = load ptr, ptr %xs, align 8
  %"(bool)xs" = icmp ne ptr %"$xs", null
  %"!(bool)xs" = xor i1 %"(bool)xs", true
  br i1 %"!(bool)xs", label %if.then, label %if.else

if.then:                                          ; preds = %start
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @2)
  store i32 %2, ptr %1, align 4
  br label %if.end

if.end:                                           ; preds = %if.end3, %if.then
  %"$" = load i32, ptr %1, align 4
  ret i32 %"$"

if.else:                                          ; preds = %start
  %"$xs1" = load ptr, ptr %xs, align 8
  %xs.tag = getelementptr inbounds %list_elem, ptr %"$xs1", i32 0, i32 0
  %"$xs.tag" = load i32, ptr %xs.tag, align 4
  %"xs==7" = icmp eq i32 %"$xs.tag", 7
  br i1 %"xs==7", label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.else
  %"$xs4" = load ptr, ptr %xs, align 8
  %"xs.[1]" = getelementptr inbounds %Cons_elem, ptr %"$xs4", i32 0, i32 1
  %"$xs.[1]" = load ptr, ptr %"xs.[1]", align 8
  store ptr %"$xs.[1]", ptr %x, align 8
  %"$xs5" = load ptr, ptr %xs, align 8
  %"xs.[2]" = getelementptr inbounds %Cons_elem, ptr %"$xs5", i32 0, i32 2
  %"$xs.[2]" = load ptr, ptr %"xs.[2]", align 8
  store ptr %"$xs.[2]", ptr %xx, align 8
  %"$x" = load ptr, ptr %x, align 8
  %3 = call ptr @log_elem(ptr %"$x")
  %"$xx" = load ptr, ptr %xx, align 8
  %4 = call ptr @second(ptr %3, ptr %"$xx")
  %5 = call i32 @_travers_list(ptr %4)
  store i32 %5, ptr %1, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.else
  br label %if.end
}

define i32 @travers_list(ptr %0) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xs" = load ptr, ptr %xs, align 8
  %1 = call i32 (ptr, ...) @ckrt_printf(ptr @4, ptr %"$xs", ptr @3)
  %"$xs1" = load ptr, ptr %xs, align 8
  %2 = call i32 @_travers_list(ptr %"$xs1")
  ret i32 %2
}

define ptr @log_list(ptr %0) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xs" = load ptr, ptr %xs, align 8
  %1 = call i32 @travers_list(ptr %"$xs")
  %"$xs1" = load ptr, ptr %xs, align 8
  %2 = call ptr @second_first_int(i32 %1, ptr %"$xs1")
  ret ptr %2
}

define ptr @make_list() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  %0 = call ptr @_const_Elem(i32 -1)
  %1 = call ptr @_const_Elem(i32 5)
  %2 = call ptr @_const_Elem(i32 3)
  %3 = call ptr @_const_Elem(i32 1)
  %4 = call ptr @_const_Elem(i32 2)
  %5 = call ptr @_const_Elem(i32 8)
  %6 = call ptr @_const_Elem(i32 -2)
  %7 = call ptr @_const_Elem(i32 -1)
  %8 = call ptr @_const_Nil_elem()
  %9 = call ptr @_const_Cons_elem(ptr %7, ptr %8)
  %10 = call ptr @_const_Cons_elem(ptr %6, ptr %9)
  %11 = call ptr @_const_Cons_elem(ptr %5, ptr %10)
  %12 = call ptr @_const_Cons_elem(ptr %4, ptr %11)
  %13 = call ptr @_const_Cons_elem(ptr %3, ptr %12)
  %14 = call ptr @_const_Cons_elem(ptr %2, ptr %13)
  %15 = call ptr @_const_Cons_elem(ptr %1, ptr %14)
  %16 = call ptr @_const_Cons_elem(ptr %0, ptr %15)
  ret ptr %16
}

define ptr @make_n_list_helper(i32 %0, i32 %1, ptr %2) {
prolog:
  %n = alloca i32, align 4
  store i32 %0, ptr %n, align 4
  %cur = alloca i32, align 4
  store i32 %1, ptr %cur, align 4
  %acc = alloca ptr, align 8
  store ptr %2, ptr %acc, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$n" = load i32, ptr %n, align 4
  %"$cur" = load i32, ptr %cur, align 4
  %"n<=cur" = icmp sle i32 %"$n", %"$cur"
  br i1 %"n<=cur", label %if.then, label %if.else

if.then:                                          ; preds = %start
  %"$acc" = load ptr, ptr %acc, align 8
  store ptr %"$acc", ptr %_result, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %"$_result" = load ptr, ptr %_result, align 8
  ret ptr %"$_result"

if.else:                                          ; preds = %start
  %"$cur1" = load i32, ptr %cur, align 4
  %"cur+1" = add i32 %"$cur1", 1
  %"$cur2" = load i32, ptr %cur, align 4
  %3 = call ptr @_const_Elem(i32 %"$cur2")
  %"$acc3" = load ptr, ptr %acc, align 8
  %4 = call ptr @_const_Cons_elem(ptr %3, ptr %"$acc3")
  %"$n4" = load i32, ptr %n, align 4
  %5 = call ptr @make_n_list_helper(i32 %"$n4", i32 %"cur+1", ptr %4)
  store ptr %5, ptr %_result, align 8
  br label %if.end
}

define ptr @make_n_list(i32 %0) {
prolog:
  %n = alloca i32, align 4
  store i32 %0, ptr %n, align 4
  br label %start

start:                                            ; preds = %prolog
  %1 = call ptr @_const_Nil_elem()
  %"$n" = load i32, ptr %n, align 4
  %2 = call ptr @make_n_list_helper(i32 %"$n", i32 0, ptr %1)
  ret ptr %2
}

define i32 @main(i32 %0, ptr %1) {
prolog:
  %argc = alloca i32, align 4
  store i32 %0, ptr %argc, align 4
  %argv = alloca ptr, align 8
  store ptr %1, ptr %argv, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @make_n_list(i32 1116)
  %3 = call ptr @log_list(ptr %2)
  call void @ckrt_measure_cpu_time()
  %4 = call ptr @quicksort(ptr %3)
  call void @ckrt_measure_cpu_time()
  %5 = call ptr @log_list(ptr %4)
  %6 = call i32 @finish(ptr %5)
  ret i32 %6
}
