; ModuleID = 'test'
source_filename = "test"

%Pair = type { i32, ptr, ptr }
%Tuple3 = type { i32, ptr, ptr, ptr }
%Tuple4 = type { i32, ptr, ptr, ptr, ptr }
%Boolean = type { i32, i32 }
%Elem = type { i32, i32 }
%elem = type { i32 }
%Unit2 = type { i32, i32, i32 }
%Just2 = type { i32, ptr, i32 }
%SCons = type { i32, ptr, ptr }
%STuple = type { i32, ptr, ptr }
%Sublist = type { i32, ptr, ptr }
%Singleton = type { i32, ptr, ptr }
%Cons_elem = type { i32, ptr, ptr }
%unit2 = type { i32 }
%list_elem = type { i32 }
%partition = type { i32 }
%sublist = type { i32 }

@Pair_global_stored = global %Pair zeroinitializer
@Tuple3_global_stored = global %Tuple3 zeroinitializer
@Tuple4_global_stored = global %Tuple4 zeroinitializer
@Boolean_global_stored = global %Boolean zeroinitializer
@0 = private unnamed_addr constant [4 x i8] c"-> \00", align 1
@1 = private unnamed_addr constant [6 x i8] c"%i %s\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"Nil\0A\00", align 1
@3 = private unnamed_addr constant [13 x i8] c"log started\0A\00", align 1
@4 = private unnamed_addr constant [6 x i8] c"%p %s\00", align 1

declare ptr @ckrt_malloc(i32)

declare i32 @ckrt_printf(ptr, ...)

declare i32 @ckrt_scanf(ptr, ...)

declare i32 @ckrt_sprintf(ptr, ptr, ...)

declare i32 @ckrt_sscanf(ptr, ptr, ...)

declare ptr @ckrt_memset(ptr, i32, i32)

define ptr @_const_Tagged() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  ret ptr null
}

define ptr @_const_Pair(ptr %0, ptr %1) {
prolog:
  %first = alloca ptr, align 8
  store ptr %0, ptr %first, align 8
  %second = alloca ptr, align 8
  store ptr %1, ptr %second, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  store ptr @Pair_global_stored, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Pair, ptr %"$_result", i32 0, i32 0
  store i32 1, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Pair, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.first = getelementptr inbounds %Pair, ptr %"$_result3", i32 0, i32 1
  %"$first" = load ptr, ptr %first, align 8
  store ptr %"$first", ptr %_result.first, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.second = getelementptr inbounds %Pair, ptr %"$_result4", i32 0, i32 2
  %"$second" = load ptr, ptr %second, align 8
  store ptr %"$second", ptr %_result.second, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_const_Tuple3(ptr %0, ptr %1, ptr %2) {
prolog:
  %first = alloca ptr, align 8
  store ptr %0, ptr %first, align 8
  %second = alloca ptr, align 8
  store ptr %1, ptr %second, align 8
  %third = alloca ptr, align 8
  store ptr %2, ptr %third, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  store ptr @Tuple3_global_stored, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Tuple3, ptr %"$_result", i32 0, i32 0
  store i32 2, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Tuple3, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.first = getelementptr inbounds %Tuple3, ptr %"$_result3", i32 0, i32 1
  %"$first" = load ptr, ptr %first, align 8
  store ptr %"$first", ptr %_result.first, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.second = getelementptr inbounds %Tuple3, ptr %"$_result4", i32 0, i32 2
  %"$second" = load ptr, ptr %second, align 8
  store ptr %"$second", ptr %_result.second, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.third = getelementptr inbounds %Tuple3, ptr %"$_result5", i32 0, i32 3
  %"$third" = load ptr, ptr %third, align 8
  store ptr %"$third", ptr %_result.third, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  ret ptr %"$_result6"
}

define ptr @_const_Tuple4(ptr %0, ptr %1, ptr %2, ptr %3) {
prolog:
  %first = alloca ptr, align 8
  store ptr %0, ptr %first, align 8
  %second = alloca ptr, align 8
  store ptr %1, ptr %second, align 8
  %third = alloca ptr, align 8
  store ptr %2, ptr %third, align 8
  %forth = alloca ptr, align 8
  store ptr %3, ptr %forth, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  store ptr @Tuple4_global_stored, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Tuple4, ptr %"$_result", i32 0, i32 0
  store i32 3, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Tuple4, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.first = getelementptr inbounds %Tuple4, ptr %"$_result3", i32 0, i32 1
  %"$first" = load ptr, ptr %first, align 8
  store ptr %"$first", ptr %_result.first, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.second = getelementptr inbounds %Tuple4, ptr %"$_result4", i32 0, i32 2
  %"$second" = load ptr, ptr %second, align 8
  store ptr %"$second", ptr %_result.second, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.third = getelementptr inbounds %Tuple4, ptr %"$_result5", i32 0, i32 3
  %"$third" = load ptr, ptr %third, align 8
  store ptr %"$third", ptr %_result.third, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  %_result.forth = getelementptr inbounds %Tuple4, ptr %"$_result6", i32 0, i32 4
  %"$forth" = load ptr, ptr %forth, align 8
  store ptr %"$forth", ptr %_result.forth, align 8
  %"$_result7" = load ptr, ptr %_result, align 8
  ret ptr %"$_result7"
}

define ptr @_const_Boolean(i32 %0) {
prolog:
  %value = alloca i32, align 4
  store i32 %0, ptr %value, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  store ptr @Boolean_global_stored, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Boolean, ptr %"$_result", i32 0, i32 0
  store i32 4, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Boolean, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %Boolean, ptr %"$_result3", i32 0, i32 1
  %"$value" = load i32, ptr %value, align 4
  store i32 %"$value", ptr %_result.value, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_const_Elem(i32 %0) {
prolog:
  %val = alloca i32, align 4
  store i32 %0, ptr %val, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %1 = call ptr @ckrt_malloc(i32 16)
  store ptr %1, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Elem, ptr %"$_result", i32 0, i32 0
  store i32 5, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Elem, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.val = getelementptr inbounds %Elem, ptr %"$_result3", i32 0, i32 1
  %"$val" = load i32, ptr %val, align 4
  store i32 %"$val", ptr %_result.val, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_reuse_Elem(ptr %0, i32 %1) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %val = alloca i32, align 4
  store i32 %1, ptr %val, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Elem, ptr %"$_result", i32 0, i32 0
  store i32 5, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Elem, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.val = getelementptr inbounds %Elem, ptr %"$_result3", i32 0, i32 1
  %"$val" = load i32, ptr %val, align 4
  store i32 %"$val", ptr %_result.val, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define i32 @_elem(ptr %0) {
prolog:
  %e = alloca ptr, align 8
  store ptr %0, ptr %e, align 8
  %1 = alloca i32, align 4
  %i = alloca i32, align 4
  br label %start

start:                                            ; preds = %prolog
  %"$e" = load ptr, ptr %e, align 8
  %e.tag = getelementptr inbounds %elem, ptr %"$e", i32 0, i32 0
  %"$e.tag" = load i32, ptr %e.tag, align 4
  %"e==5" = icmp eq i32 %"$e.tag", 5
  br i1 %"e==5", label %if.then, label %if.end

if.then:                                          ; preds = %start
  %"$e1" = load ptr, ptr %e, align 8
  %"e.[1]" = getelementptr inbounds %Elem, ptr %"$e1", i32 0, i32 1
  %"$e.[1]" = load i32, ptr %"e.[1]", align 4
  store i32 %"$e.[1]", ptr %i, align 4
  %"$i" = load i32, ptr %i, align 4
  store i32 %"$i", ptr %1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %start
  %"$" = load i32, ptr %1, align 4
  ret i32 %"$"
}

define ptr @_const_Unit2(i32 %0, i32 %1) {
prolog:
  %a = alloca i32, align 4
  store i32 %0, ptr %a, align 4
  %b = alloca i32, align 4
  store i32 %1, ptr %b, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @ckrt_malloc(i32 24)
  store ptr %2, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Unit2, ptr %"$_result", i32 0, i32 0
  store i32 6, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Unit2, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.a = getelementptr inbounds %Unit2, ptr %"$_result3", i32 0, i32 1
  %"$a" = load i32, ptr %a, align 4
  store i32 %"$a", ptr %_result.a, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.b = getelementptr inbounds %Unit2, ptr %"$_result4", i32 0, i32 2
  %"$b" = load i32, ptr %b, align 4
  store i32 %"$b", ptr %_result.b, align 4
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_reuse_Unit2(ptr %0, i32 %1, i32 %2) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %a = alloca i32, align 4
  store i32 %1, ptr %a, align 4
  %b = alloca i32, align 4
  store i32 %2, ptr %b, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Unit2, ptr %"$_result", i32 0, i32 0
  store i32 6, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Unit2, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.a = getelementptr inbounds %Unit2, ptr %"$_result3", i32 0, i32 1
  %"$a" = load i32, ptr %a, align 4
  store i32 %"$a", ptr %_result.a, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.b = getelementptr inbounds %Unit2, ptr %"$_result4", i32 0, i32 2
  %"$b" = load i32, ptr %b, align 4
  store i32 %"$b", ptr %_result.b, align 4
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_const_Nothing2() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  ret ptr null
}

define ptr @_const_Just2(ptr %0, i32 %1) {
prolog:
  %a = alloca ptr, align 8
  store ptr %0, ptr %a, align 8
  %b = alloca i32, align 4
  store i32 %1, ptr %b, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @ckrt_malloc(i32 24)
  store ptr %2, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Just2, ptr %"$_result", i32 0, i32 0
  store i32 8, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Just2, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.a = getelementptr inbounds %Just2, ptr %"$_result3", i32 0, i32 1
  %"$a" = load ptr, ptr %a, align 8
  store ptr %"$a", ptr %_result.a, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.b = getelementptr inbounds %Just2, ptr %"$_result4", i32 0, i32 2
  %"$b" = load i32, ptr %b, align 4
  store i32 %"$b", ptr %_result.b, align 4
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_reuse_Just2(ptr %0, ptr %1, i32 %2) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %a = alloca ptr, align 8
  store ptr %1, ptr %a, align 8
  %b = alloca i32, align 4
  store i32 %2, ptr %b, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Just2, ptr %"$_result", i32 0, i32 0
  store i32 8, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Just2, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.a = getelementptr inbounds %Just2, ptr %"$_result3", i32 0, i32 1
  %"$a" = load ptr, ptr %a, align 8
  store ptr %"$a", ptr %_result.a, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.b = getelementptr inbounds %Just2, ptr %"$_result4", i32 0, i32 2
  %"$b" = load i32, ptr %b, align 4
  store i32 %"$b", ptr %_result.b, align 4
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_const_SCons(ptr %0, ptr %1) {
prolog:
  %a = alloca ptr, align 8
  store ptr %0, ptr %a, align 8
  %cs = alloca ptr, align 8
  store ptr %1, ptr %cs, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @ckrt_malloc(i32 24)
  store ptr %2, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %SCons, ptr %"$_result", i32 0, i32 0
  store i32 9, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %SCons, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.a = getelementptr inbounds %SCons, ptr %"$_result3", i32 0, i32 1
  %"$a" = load ptr, ptr %a, align 8
  store ptr %"$a", ptr %_result.a, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.cs = getelementptr inbounds %SCons, ptr %"$_result4", i32 0, i32 2
  %"$cs" = load ptr, ptr %cs, align 8
  store ptr %"$cs", ptr %_result.cs, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_reuse_SCons(ptr %0, ptr %1, ptr %2) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %a = alloca ptr, align 8
  store ptr %1, ptr %a, align 8
  %cs = alloca ptr, align 8
  store ptr %2, ptr %cs, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %SCons, ptr %"$_result", i32 0, i32 0
  store i32 9, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %SCons, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.a = getelementptr inbounds %SCons, ptr %"$_result3", i32 0, i32 1
  %"$a" = load ptr, ptr %a, align 8
  store ptr %"$a", ptr %_result.a, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.cs = getelementptr inbounds %SCons, ptr %"$_result4", i32 0, i32 2
  %"$cs" = load ptr, ptr %cs, align 8
  store ptr %"$cs", ptr %_result.cs, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_const_STuple(ptr %0, ptr %1) {
prolog:
  %a = alloca ptr, align 8
  store ptr %0, ptr %a, align 8
  %b = alloca ptr, align 8
  store ptr %1, ptr %b, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @ckrt_malloc(i32 24)
  store ptr %2, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %STuple, ptr %"$_result", i32 0, i32 0
  store i32 10, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %STuple, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.a = getelementptr inbounds %STuple, ptr %"$_result3", i32 0, i32 1
  %"$a" = load ptr, ptr %a, align 8
  store ptr %"$a", ptr %_result.a, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.b = getelementptr inbounds %STuple, ptr %"$_result4", i32 0, i32 2
  %"$b" = load ptr, ptr %b, align 8
  store ptr %"$b", ptr %_result.b, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_reuse_STuple(ptr %0, ptr %1, ptr %2) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %a = alloca ptr, align 8
  store ptr %1, ptr %a, align 8
  %b = alloca ptr, align 8
  store ptr %2, ptr %b, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %STuple, ptr %"$_result", i32 0, i32 0
  store i32 10, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %STuple, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.a = getelementptr inbounds %STuple, ptr %"$_result3", i32 0, i32 1
  %"$a" = load ptr, ptr %a, align 8
  store ptr %"$a", ptr %_result.a, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.b = getelementptr inbounds %STuple, ptr %"$_result4", i32 0, i32 2
  %"$b" = load ptr, ptr %b, align 8
  store ptr %"$b", ptr %_result.b, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_const_Sublist(ptr %0, ptr %1) {
prolog:
  %c = alloca ptr, align 8
  store ptr %0, ptr %c, align 8
  %bdl = alloca ptr, align 8
  store ptr %1, ptr %bdl, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @ckrt_malloc(i32 24)
  store ptr %2, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Sublist, ptr %"$_result", i32 0, i32 0
  store i32 11, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Sublist, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.c = getelementptr inbounds %Sublist, ptr %"$_result3", i32 0, i32 1
  %"$c" = load ptr, ptr %c, align 8
  store ptr %"$c", ptr %_result.c, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.bdl = getelementptr inbounds %Sublist, ptr %"$_result4", i32 0, i32 2
  %"$bdl" = load ptr, ptr %bdl, align 8
  store ptr %"$bdl", ptr %_result.bdl, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_reuse_Sublist(ptr %0, ptr %1, ptr %2) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %c = alloca ptr, align 8
  store ptr %1, ptr %c, align 8
  %bdl = alloca ptr, align 8
  store ptr %2, ptr %bdl, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Sublist, ptr %"$_result", i32 0, i32 0
  store i32 11, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Sublist, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.c = getelementptr inbounds %Sublist, ptr %"$_result3", i32 0, i32 1
  %"$c" = load ptr, ptr %c, align 8
  store ptr %"$c", ptr %_result.c, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.bdl = getelementptr inbounds %Sublist, ptr %"$_result4", i32 0, i32 2
  %"$bdl" = load ptr, ptr %bdl, align 8
  store ptr %"$bdl", ptr %_result.bdl, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_const_Singleton(ptr %0, ptr %1) {
prolog:
  %c = alloca ptr, align 8
  store ptr %0, ptr %c, align 8
  %bdl = alloca ptr, align 8
  store ptr %1, ptr %bdl, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @ckrt_malloc(i32 24)
  store ptr %2, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Singleton, ptr %"$_result", i32 0, i32 0
  store i32 12, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Singleton, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.c = getelementptr inbounds %Singleton, ptr %"$_result3", i32 0, i32 1
  %"$c" = load ptr, ptr %c, align 8
  store ptr %"$c", ptr %_result.c, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.bdl = getelementptr inbounds %Singleton, ptr %"$_result4", i32 0, i32 2
  %"$bdl" = load ptr, ptr %bdl, align 8
  store ptr %"$bdl", ptr %_result.bdl, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_reuse_Singleton(ptr %0, ptr %1, ptr %2) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %c = alloca ptr, align 8
  store ptr %1, ptr %c, align 8
  %bdl = alloca ptr, align 8
  store ptr %2, ptr %bdl, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Singleton, ptr %"$_result", i32 0, i32 0
  store i32 12, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Singleton, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.c = getelementptr inbounds %Singleton, ptr %"$_result3", i32 0, i32 1
  %"$c" = load ptr, ptr %c, align 8
  store ptr %"$c", ptr %_result.c, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.bdl = getelementptr inbounds %Singleton, ptr %"$_result4", i32 0, i32 2
  %"$bdl" = load ptr, ptr %bdl, align 8
  store ptr %"$bdl", ptr %_result.bdl, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_const_End() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  ret ptr null
}

define ptr @_const_Nil_elem() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  ret ptr null
}

define ptr @_const_Cons_elem(ptr %0, ptr %1) {
prolog:
  %val = alloca ptr, align 8
  store ptr %0, ptr %val, align 8
  %next = alloca ptr, align 8
  store ptr %1, ptr %next, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @ckrt_malloc(i32 24)
  store ptr %2, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Cons_elem, ptr %"$_result", i32 0, i32 0
  store i32 15, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Cons_elem, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.val = getelementptr inbounds %Cons_elem, ptr %"$_result3", i32 0, i32 1
  %"$val" = load ptr, ptr %val, align 8
  store ptr %"$val", ptr %_result.val, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.next = getelementptr inbounds %Cons_elem, ptr %"$_result4", i32 0, i32 2
  %"$next" = load ptr, ptr %next, align 8
  store ptr %"$next", ptr %_result.next, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_reuse_Cons_elem(ptr %0, ptr %1, ptr %2) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %val = alloca ptr, align 8
  store ptr %1, ptr %val, align 8
  %next = alloca ptr, align 8
  store ptr %2, ptr %next, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Cons_elem, ptr %"$_result", i32 0, i32 0
  store i32 15, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Cons_elem, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.val = getelementptr inbounds %Cons_elem, ptr %"$_result3", i32 0, i32 1
  %"$val" = load ptr, ptr %val, align 8
  store ptr %"$val", ptr %_result.val, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.next = getelementptr inbounds %Cons_elem, ptr %"$_result4", i32 0, i32 2
  %"$next" = load ptr, ptr %next, align 8
  store ptr %"$next", ptr %_result.next, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @from_list(ptr %0, ptr %1, ptr %2, ptr %3) {
prolog:
  %x = alloca ptr, align 8
  store ptr %0, ptr %x, align 8
  %y = alloca ptr, align 8
  store ptr %1, ptr %y, align 8
  %u = alloca ptr, align 8
  store ptr %2, ptr %u, align 8
  %xs = alloca ptr, align 8
  store ptr %3, ptr %xs, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %_1 = alloca i32, align 4
  %_2 = alloca i32, align 4
  %z = alloca ptr, align 8
  %zs = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xs" = load ptr, ptr %xs, align 8
  %"(bool)xs" = icmp ne ptr %"$xs", null
  %"!(bool)xs" = xor i1 %"(bool)xs", true
  br i1 %"!(bool)xs", label %if.then, label %if.else

if.then:                                          ; preds = %start
  %"$u" = load ptr, ptr %u, align 8
  %u.tag = getelementptr inbounds %unit2, ptr %"$u", i32 0, i32 0
  %"$u.tag" = load i32, ptr %u.tag, align 4
  %"u==6" = icmp eq i32 %"$u.tag", 6
  br i1 %"u==6", label %if.then1, label %if.end2

if.end:                                           ; preds = %if.end8, %if.end2
  %"$15" = load ptr, ptr %4, align 8
  ret ptr %"$15"

if.then1:                                         ; preds = %if.then
  %"$u3" = load ptr, ptr %u, align 8
  %"u.[1]" = getelementptr inbounds %Unit2, ptr %"$u3", i32 0, i32 1
  %"$u.[1]" = load i32, ptr %"u.[1]", align 4
  store i32 %"$u.[1]", ptr %_1, align 4
  %"$u4" = load ptr, ptr %u, align 8
  %"u.[2]" = getelementptr inbounds %Unit2, ptr %"$u4", i32 0, i32 2
  %"$u.[2]" = load i32, ptr %"u.[2]", align 4
  store i32 %"$u.[2]", ptr %_2, align 4
  %"$u5" = load ptr, ptr %u, align 8
  %"$x" = load ptr, ptr %x, align 8
  %"$y" = load ptr, ptr %y, align 8
  %6 = call ptr @_reuse_STuple(ptr %"$u5", ptr %"$x", ptr %"$y")
  store ptr %6, ptr %5, align 8
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.then
  %"$" = load ptr, ptr %5, align 8
  store ptr %"$", ptr %4, align 8
  br label %if.end

if.else:                                          ; preds = %start
  %"$xs6" = load ptr, ptr %xs, align 8
  %xs.tag = getelementptr inbounds %list_elem, ptr %"$xs6", i32 0, i32 0
  %"$xs.tag" = load i32, ptr %xs.tag, align 4
  %"xs==15" = icmp eq i32 %"$xs.tag", 15
  br i1 %"xs==15", label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.else
  %"$xs9" = load ptr, ptr %xs, align 8
  %"xs.[1]" = getelementptr inbounds %Cons_elem, ptr %"$xs9", i32 0, i32 1
  %"$xs.[1]" = load ptr, ptr %"xs.[1]", align 8
  store ptr %"$xs.[1]", ptr %z, align 8
  %"$xs10" = load ptr, ptr %xs, align 8
  %"xs.[2]" = getelementptr inbounds %Cons_elem, ptr %"$xs10", i32 0, i32 2
  %"$xs.[2]" = load ptr, ptr %"xs.[2]", align 8
  store ptr %"$xs.[2]", ptr %zs, align 8
  %"$y11" = load ptr, ptr %y, align 8
  %"$z" = load ptr, ptr %z, align 8
  %"$u12" = load ptr, ptr %u, align 8
  %"$zs" = load ptr, ptr %zs, align 8
  %7 = call ptr @from_list(ptr %"$y11", ptr %"$z", ptr %"$u12", ptr %"$zs")
  %"$xs13" = load ptr, ptr %xs, align 8
  %"$x14" = load ptr, ptr %x, align 8
  %8 = call ptr @_reuse_SCons(ptr %"$xs13", ptr %"$x14", ptr %7)
  store ptr %8, ptr %4, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.else
  br label %if.end
}

define ptr @to_bundle(ptr %0, ptr %1) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  %bdl_ = alloca ptr, align 8
  store ptr %1, ptr %bdl_, align 8
  %2 = alloca ptr, align 8
  %x = alloca ptr, align 8
  %next = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %y = alloca ptr, align 8
  %yy = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xs" = load ptr, ptr %xs, align 8
  %"(bool)xs" = icmp ne ptr %"$xs", null
  %"!(bool)xs" = xor i1 %"(bool)xs", true
  br i1 %"!(bool)xs", label %if.then, label %if.else

if.then:                                          ; preds = %start
  %"$bdl_" = load ptr, ptr %bdl_, align 8
  store ptr %"$bdl_", ptr %2, align 8
  br label %if.end

if.end:                                           ; preds = %if.end3, %if.then
  %"$20" = load ptr, ptr %2, align 8
  ret ptr %"$20"

if.else:                                          ; preds = %start
  %"$xs1" = load ptr, ptr %xs, align 8
  %xs.tag = getelementptr inbounds %list_elem, ptr %"$xs1", i32 0, i32 0
  %"$xs.tag" = load i32, ptr %xs.tag, align 4
  %"xs==15" = icmp eq i32 %"$xs.tag", 15
  br i1 %"xs==15", label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.else
  %"$xs4" = load ptr, ptr %xs, align 8
  %"xs.[1]" = getelementptr inbounds %Cons_elem, ptr %"$xs4", i32 0, i32 1
  %"$xs.[1]" = load ptr, ptr %"xs.[1]", align 8
  store ptr %"$xs.[1]", ptr %x, align 8
  %"$xs5" = load ptr, ptr %xs, align 8
  %"xs.[2]" = getelementptr inbounds %Cons_elem, ptr %"$xs5", i32 0, i32 2
  %"$xs.[2]" = load ptr, ptr %"xs.[2]", align 8
  store ptr %"$xs.[2]", ptr %next, align 8
  %"$next" = load ptr, ptr %next, align 8
  %"(bool)next" = icmp ne ptr %"$next", null
  %"!(bool)next" = xor i1 %"(bool)next", true
  br i1 %"!(bool)next", label %if.then6, label %if.else10

if.end3:                                          ; preds = %if.end7, %if.else
  br label %if.end

if.then6:                                         ; preds = %if.then2
  %"$xs8" = load ptr, ptr %xs, align 8
  %"$x" = load ptr, ptr %x, align 8
  %"$bdl_9" = load ptr, ptr %bdl_, align 8
  %4 = call ptr @_reuse_Singleton(ptr %"$xs8", ptr %"$x", ptr %"$bdl_9")
  store ptr %4, ptr %3, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.end13, %if.then6
  %"$" = load ptr, ptr %3, align 8
  store ptr %"$", ptr %2, align 8
  br label %if.end3

if.else10:                                        ; preds = %if.then2
  %"$next11" = load ptr, ptr %next, align 8
  %next.tag = getelementptr inbounds %list_elem, ptr %"$next11", i32 0, i32 0
  %"$next.tag" = load i32, ptr %next.tag, align 4
  %"next==15" = icmp eq i32 %"$next.tag", 15
  br i1 %"next==15", label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.else10
  %"$next14" = load ptr, ptr %next, align 8
  %"next.[1]" = getelementptr inbounds %Cons_elem, ptr %"$next14", i32 0, i32 1
  %"$next.[1]" = load ptr, ptr %"next.[1]", align 8
  store ptr %"$next.[1]", ptr %y, align 8
  %"$next15" = load ptr, ptr %next, align 8
  %"next.[2]" = getelementptr inbounds %Cons_elem, ptr %"$next15", i32 0, i32 2
  %"$next.[2]" = load ptr, ptr %"next.[2]", align 8
  store ptr %"$next.[2]", ptr %yy, align 8
  %"$next16" = load ptr, ptr %next, align 8
  %5 = call ptr @_reuse_Unit2(ptr %"$next16", i32 0, i32 0)
  %"$x17" = load ptr, ptr %x, align 8
  %"$y" = load ptr, ptr %y, align 8
  %"$yy" = load ptr, ptr %yy, align 8
  %6 = call ptr @from_list(ptr %"$x17", ptr %"$y", ptr %5, ptr %"$yy")
  %"$xs18" = load ptr, ptr %xs, align 8
  %"$bdl_19" = load ptr, ptr %bdl_, align 8
  %7 = call ptr @_reuse_Sublist(ptr %"$xs18", ptr %6, ptr %"$bdl_19")
  store ptr %7, ptr %3, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.else10
  br label %if.end7
}

define ptr @quicksort_go(ptr %0) {
prolog:
  %bdl = alloca ptr, align 8
  store ptr %0, ptr %bdl, align 8
  %1 = alloca ptr, align 8
  %xs = alloca ptr, align 8
  %bdl_ = alloca ptr, align 8
  %2 = alloca ptr, align 8
  %p = alloca ptr, align 8
  %xx = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %lo = alloca ptr, align 8
  %hi = alloca ptr, align 8
  %x = alloca ptr, align 8
  %y = alloca ptr, align 8
  %_result = alloca ptr, align 8
  %p45 = alloca ptr, align 8
  %b = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$bdl" = load ptr, ptr %bdl, align 8
  %"(bool)bdl" = icmp ne ptr %"$bdl", null
  %"!(bool)bdl" = xor i1 %"(bool)bdl", true
  br i1 %"!(bool)bdl", label %if.then, label %if.else

if.then:                                          ; preds = %start
  %4 = call ptr @_const_Nil_elem()
  store ptr %4, ptr %1, align 8
  br label %if.end

if.end:                                           ; preds = %if.end44, %if.then
  %"$54" = load ptr, ptr %1, align 8
  ret ptr %"$54"

if.else:                                          ; preds = %start
  %"$bdl1" = load ptr, ptr %bdl, align 8
  %bdl.tag = getelementptr inbounds %partition, ptr %"$bdl1", i32 0, i32 0
  %"$bdl.tag" = load i32, ptr %bdl.tag, align 4
  %"bdl==11" = icmp eq i32 %"$bdl.tag", 11
  br i1 %"bdl==11", label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.else
  %"$bdl4" = load ptr, ptr %bdl, align 8
  %"bdl.[1]" = getelementptr inbounds %Sublist, ptr %"$bdl4", i32 0, i32 1
  %"$bdl.[1]" = load ptr, ptr %"bdl.[1]", align 8
  store ptr %"$bdl.[1]", ptr %xs, align 8
  %"$bdl5" = load ptr, ptr %bdl, align 8
  %"bdl.[2]" = getelementptr inbounds %Sublist, ptr %"$bdl5", i32 0, i32 2
  %"$bdl.[2]" = load ptr, ptr %"bdl.[2]", align 8
  store ptr %"$bdl.[2]", ptr %bdl_, align 8
  %"$xs" = load ptr, ptr %xs, align 8
  %xs.tag = getelementptr inbounds %sublist, ptr %"$xs", i32 0, i32 0
  %"$xs.tag" = load i32, ptr %xs.tag, align 4
  %"xs==9" = icmp eq i32 %"$xs.tag", 9
  br i1 %"xs==9", label %if.then6, label %if.end7

if.end3:                                          ; preds = %if.end19, %if.else
  %"$bdl40" = load ptr, ptr %bdl, align 8
  %bdl.tag41 = getelementptr inbounds %partition, ptr %"$bdl40", i32 0, i32 0
  %"$bdl.tag42" = load i32, ptr %bdl.tag41, align 4
  %"bdl==12" = icmp eq i32 %"$bdl.tag42", 12
  br i1 %"bdl==12", label %if.then43, label %if.end44

if.then6:                                         ; preds = %if.then2
  %"$xs8" = load ptr, ptr %xs, align 8
  %"xs.[1]" = getelementptr inbounds %SCons, ptr %"$xs8", i32 0, i32 1
  %"$xs.[1]" = load ptr, ptr %"xs.[1]", align 8
  store ptr %"$xs.[1]", ptr %p, align 8
  %"$xs9" = load ptr, ptr %xs, align 8
  %"xs.[2]" = getelementptr inbounds %SCons, ptr %"$xs9", i32 0, i32 2
  %"$xs.[2]" = load ptr, ptr %"xs.[2]", align 8
  store ptr %"$xs.[2]", ptr %xx, align 8
  %"$bdl10" = load ptr, ptr %bdl, align 8
  %5 = call ptr @_reuse_Unit2(ptr %"$bdl10", i32 0, i32 0)
  %"$p" = load ptr, ptr %p, align 8
  %"$xx" = load ptr, ptr %xx, align 8
  %6 = call ptr @partition(ptr %"$p", ptr %"$xx", ptr %5)
  %partition_call.tag = getelementptr inbounds %Pair, ptr %6, i32 0, i32 0
  %"$partition_call.tag" = load i32, ptr %partition_call.tag, align 4
  %"partition_call==1" = icmp eq i32 %"$partition_call.tag", 1
  br i1 %"partition_call==1", label %if.then11, label %if.end12

if.end7:                                          ; preds = %if.end12, %if.then2
  %"$xs15" = load ptr, ptr %xs, align 8
  %xs.tag16 = getelementptr inbounds %sublist, ptr %"$xs15", i32 0, i32 0
  %"$xs.tag17" = load i32, ptr %xs.tag16, align 4
  %"xs==10" = icmp eq i32 %"$xs.tag17", 10
  br i1 %"xs==10", label %if.then18, label %if.end19

if.then11:                                        ; preds = %if.then6
  %"partition_call.[1]" = getelementptr inbounds %Pair, ptr %6, i32 0, i32 1
  %"$partition_call.[1]" = load ptr, ptr %"partition_call.[1]", align 8
  store ptr %"$partition_call.[1]", ptr %lo, align 8
  %"partition_call.[2]" = getelementptr inbounds %Pair, ptr %6, i32 0, i32 2
  %"$partition_call.[2]" = load ptr, ptr %"partition_call.[2]", align 8
  store ptr %"$partition_call.[2]", ptr %hi, align 8
  %"$hi" = load ptr, ptr %hi, align 8
  %"$bdl_" = load ptr, ptr %bdl_, align 8
  %7 = call ptr @to_bundle(ptr %"$hi", ptr %"$bdl_")
  %"$xs13" = load ptr, ptr %xs, align 8
  %"$p14" = load ptr, ptr %p, align 8
  %8 = call ptr @_reuse_Singleton(ptr %"$xs13", ptr %"$p14", ptr %7)
  %"$lo" = load ptr, ptr %lo, align 8
  %9 = call ptr @to_bundle(ptr %"$lo", ptr %8)
  %10 = call ptr @quicksort_go(ptr %9)
  store ptr %10, ptr %3, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.then6
  %"$" = load ptr, ptr %3, align 8
  store ptr %"$", ptr %2, align 8
  br label %if.end7

if.then18:                                        ; preds = %if.end7
  %"$xs20" = load ptr, ptr %xs, align 8
  %"xs.[1]21" = getelementptr inbounds %STuple, ptr %"$xs20", i32 0, i32 1
  %"$xs.[1]22" = load ptr, ptr %"xs.[1]21", align 8
  store ptr %"$xs.[1]22", ptr %x, align 8
  %"$xs23" = load ptr, ptr %xs, align 8
  %"xs.[2]24" = getelementptr inbounds %STuple, ptr %"$xs23", i32 0, i32 2
  %"$xs.[2]25" = load ptr, ptr %"xs.[2]24", align 8
  store ptr %"$xs.[2]25", ptr %y, align 8
  %"$x" = load ptr, ptr %x, align 8
  %11 = call i32 @_elem(ptr %"$x")
  %"$y" = load ptr, ptr %y, align 8
  %12 = call i32 @_elem(ptr %"$y")
  %"_elem_call<=_elem_call" = icmp sle i32 %11, %12
  br i1 %"_elem_call<=_elem_call", label %if.then26, label %if.else33

if.end19:                                         ; preds = %if.end27, %if.end7
  %"$39" = load ptr, ptr %2, align 8
  store ptr %"$39", ptr %1, align 8
  br label %if.end3

if.then26:                                        ; preds = %if.then18
  %"$bdl_28" = load ptr, ptr %bdl_, align 8
  %13 = call ptr @quicksort_go(ptr %"$bdl_28")
  %"$bdl29" = load ptr, ptr %bdl, align 8
  %"$y30" = load ptr, ptr %y, align 8
  %14 = call ptr @_reuse_Cons_elem(ptr %"$bdl29", ptr %"$y30", ptr %13)
  %"$xs31" = load ptr, ptr %xs, align 8
  %"$x32" = load ptr, ptr %x, align 8
  %15 = call ptr @_reuse_Cons_elem(ptr %"$xs31", ptr %"$x32", ptr %14)
  store ptr %15, ptr %_result, align 8
  br label %if.end27

if.end27:                                         ; preds = %if.else33, %if.then26
  %"$_result" = load ptr, ptr %_result, align 8
  store ptr %"$_result", ptr %2, align 8
  br label %if.end19

if.else33:                                        ; preds = %if.then18
  %"$bdl_34" = load ptr, ptr %bdl_, align 8
  %16 = call ptr @quicksort_go(ptr %"$bdl_34")
  %"$bdl35" = load ptr, ptr %bdl, align 8
  %"$x36" = load ptr, ptr %x, align 8
  %17 = call ptr @_reuse_Cons_elem(ptr %"$bdl35", ptr %"$x36", ptr %16)
  %"$xs37" = load ptr, ptr %xs, align 8
  %"$y38" = load ptr, ptr %y, align 8
  %18 = call ptr @_reuse_Cons_elem(ptr %"$xs37", ptr %"$y38", ptr %17)
  store ptr %18, ptr %_result, align 8
  br label %if.end27

if.then43:                                        ; preds = %if.end3
  %"$bdl46" = load ptr, ptr %bdl, align 8
  %"bdl.[1]47" = getelementptr inbounds %Singleton, ptr %"$bdl46", i32 0, i32 1
  %"$bdl.[1]48" = load ptr, ptr %"bdl.[1]47", align 8
  store ptr %"$bdl.[1]48", ptr %p45, align 8
  %"$bdl49" = load ptr, ptr %bdl, align 8
  %"bdl.[2]50" = getelementptr inbounds %Singleton, ptr %"$bdl49", i32 0, i32 2
  %"$bdl.[2]51" = load ptr, ptr %"bdl.[2]50", align 8
  store ptr %"$bdl.[2]51", ptr %b, align 8
  %"$b" = load ptr, ptr %b, align 8
  %19 = call ptr @quicksort_go(ptr %"$b")
  %"$bdl52" = load ptr, ptr %bdl, align 8
  %"$p53" = load ptr, ptr %p45, align 8
  %20 = call ptr @_reuse_Cons_elem(ptr %"$bdl52", ptr %"$p53", ptr %19)
  store ptr %20, ptr %1, align 8
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %if.end3
  br label %if.end
}

define ptr @partition(ptr %0, ptr %1, ptr %2) {
prolog:
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %xs = alloca ptr, align 8
  store ptr %1, ptr %xs, align 8
  %u = alloca ptr, align 8
  store ptr %2, ptr %u, align 8
  %3 = alloca ptr, align 8
  %x = alloca ptr, align 8
  %xx = alloca ptr, align 8
  %_result = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %lo = alloca ptr, align 8
  %hi = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %lo18 = alloca ptr, align 8
  %hi21 = alloca ptr, align 8
  %x34 = alloca ptr, align 8
  %y = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %_1 = alloca i32, align 4
  %_2 = alloca i32, align 4
  %_result51 = alloca ptr, align 8
  %_result56 = alloca ptr, align 8
  %_result73 = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xs" = load ptr, ptr %xs, align 8
  %xs.tag = getelementptr inbounds %sublist, ptr %"$xs", i32 0, i32 0
  %"$xs.tag" = load i32, ptr %xs.tag, align 4
  %"xs==9" = icmp eq i32 %"$xs.tag", 9
  br i1 %"xs==9", label %if.then, label %if.end

if.then:                                          ; preds = %start
  %"$xs1" = load ptr, ptr %xs, align 8
  %"xs.[1]" = getelementptr inbounds %SCons, ptr %"$xs1", i32 0, i32 1
  %"$xs.[1]" = load ptr, ptr %"xs.[1]", align 8
  store ptr %"$xs.[1]", ptr %x, align 8
  %"$xs2" = load ptr, ptr %xs, align 8
  %"xs.[2]" = getelementptr inbounds %SCons, ptr %"$xs2", i32 0, i32 2
  %"$xs.[2]" = load ptr, ptr %"xs.[2]", align 8
  store ptr %"$xs.[2]", ptr %xx, align 8
  %"$p" = load ptr, ptr %p, align 8
  %7 = call i32 @_elem(ptr %"$p")
  %"$x" = load ptr, ptr %x, align 8
  %8 = call i32 @_elem(ptr %"$x")
  %"_elem_call<=_elem_call" = icmp sle i32 %7, %8
  br i1 %"_elem_call<=_elem_call", label %if.then3, label %if.else

if.end:                                           ; preds = %if.end4, %start
  %"$xs29" = load ptr, ptr %xs, align 8
  %xs.tag30 = getelementptr inbounds %sublist, ptr %"$xs29", i32 0, i32 0
  %"$xs.tag31" = load i32, ptr %xs.tag30, align 4
  %"xs==10" = icmp eq i32 %"$xs.tag31", 10
  br i1 %"xs==10", label %if.then32, label %if.end33

if.then3:                                         ; preds = %if.then
  %"$p5" = load ptr, ptr %p, align 8
  %"$xx" = load ptr, ptr %xx, align 8
  %"$u" = load ptr, ptr %u, align 8
  %9 = call ptr @partition(ptr %"$p5", ptr %"$xx", ptr %"$u")
  %partition_call.tag = getelementptr inbounds %Pair, ptr %9, i32 0, i32 0
  %"$partition_call.tag" = load i32, ptr %partition_call.tag, align 4
  %"partition_call==1" = icmp eq i32 %"$partition_call.tag", 1
  br i1 %"partition_call==1", label %if.then6, label %if.end7

if.end4:                                          ; preds = %if.end17, %if.end7
  %"$_result" = load ptr, ptr %_result, align 8
  store ptr %"$_result", ptr %3, align 8
  br label %if.end

if.then6:                                         ; preds = %if.then3
  %"partition_call.[1]" = getelementptr inbounds %Pair, ptr %9, i32 0, i32 1
  %"$partition_call.[1]" = load ptr, ptr %"partition_call.[1]", align 8
  store ptr %"$partition_call.[1]", ptr %lo, align 8
  %"partition_call.[2]" = getelementptr inbounds %Pair, ptr %9, i32 0, i32 2
  %"$partition_call.[2]" = load ptr, ptr %"partition_call.[2]", align 8
  store ptr %"$partition_call.[2]", ptr %hi, align 8
  %"$xs8" = load ptr, ptr %xs, align 8
  %"$x9" = load ptr, ptr %x, align 8
  %"$hi" = load ptr, ptr %hi, align 8
  %10 = call ptr @_reuse_Cons_elem(ptr %"$xs8", ptr %"$x9", ptr %"$hi")
  %"$lo" = load ptr, ptr %lo, align 8
  %11 = call ptr @_const_Pair(ptr %"$lo", ptr %10)
  store ptr %11, ptr %4, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.then3
  %"$" = load ptr, ptr %4, align 8
  store ptr %"$", ptr %_result, align 8
  br label %if.end4

if.else:                                          ; preds = %if.then
  %"$p10" = load ptr, ptr %p, align 8
  %"$xx11" = load ptr, ptr %xx, align 8
  %"$u12" = load ptr, ptr %u, align 8
  %12 = call ptr @partition(ptr %"$p10", ptr %"$xx11", ptr %"$u12")
  %partition_call.tag13 = getelementptr inbounds %Pair, ptr %12, i32 0, i32 0
  %"$partition_call.tag14" = load i32, ptr %partition_call.tag13, align 4
  %"partition_call==115" = icmp eq i32 %"$partition_call.tag14", 1
  br i1 %"partition_call==115", label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.else
  %"partition_call.[1]19" = getelementptr inbounds %Pair, ptr %12, i32 0, i32 1
  %"$partition_call.[1]20" = load ptr, ptr %"partition_call.[1]19", align 8
  store ptr %"$partition_call.[1]20", ptr %lo18, align 8
  %"partition_call.[2]22" = getelementptr inbounds %Pair, ptr %12, i32 0, i32 2
  %"$partition_call.[2]23" = load ptr, ptr %"partition_call.[2]22", align 8
  store ptr %"$partition_call.[2]23", ptr %hi21, align 8
  %"$xs24" = load ptr, ptr %xs, align 8
  %"$x25" = load ptr, ptr %x, align 8
  %"$lo26" = load ptr, ptr %lo18, align 8
  %13 = call ptr @_reuse_Cons_elem(ptr %"$xs24", ptr %"$x25", ptr %"$lo26")
  %"$hi27" = load ptr, ptr %hi21, align 8
  %14 = call ptr @_const_Pair(ptr %13, ptr %"$hi27")
  store ptr %14, ptr %5, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %if.else
  %"$28" = load ptr, ptr %5, align 8
  store ptr %"$28", ptr %_result, align 8
  br label %if.end4

if.then32:                                        ; preds = %if.end
  %"$xs35" = load ptr, ptr %xs, align 8
  %"xs.[1]36" = getelementptr inbounds %STuple, ptr %"$xs35", i32 0, i32 1
  %"$xs.[1]37" = load ptr, ptr %"xs.[1]36", align 8
  store ptr %"$xs.[1]37", ptr %x34, align 8
  %"$xs38" = load ptr, ptr %xs, align 8
  %"xs.[2]39" = getelementptr inbounds %STuple, ptr %"$xs38", i32 0, i32 2
  %"$xs.[2]40" = load ptr, ptr %"xs.[2]39", align 8
  store ptr %"$xs.[2]40", ptr %y, align 8
  %"$u41" = load ptr, ptr %u, align 8
  %u.tag = getelementptr inbounds %unit2, ptr %"$u41", i32 0, i32 0
  %"$u.tag" = load i32, ptr %u.tag, align 4
  %"u==6" = icmp eq i32 %"$u.tag", 6
  br i1 %"u==6", label %if.then42, label %if.end43

if.end33:                                         ; preds = %if.end43, %if.end
  %"$86" = load ptr, ptr %3, align 8
  ret ptr %"$86"

if.then42:                                        ; preds = %if.then32
  %"$u44" = load ptr, ptr %u, align 8
  %"u.[1]" = getelementptr inbounds %Unit2, ptr %"$u44", i32 0, i32 1
  %"$u.[1]" = load i32, ptr %"u.[1]", align 4
  store i32 %"$u.[1]", ptr %_1, align 4
  %"$u45" = load ptr, ptr %u, align 8
  %"u.[2]" = getelementptr inbounds %Unit2, ptr %"$u45", i32 0, i32 2
  %"$u.[2]" = load i32, ptr %"u.[2]", align 4
  store i32 %"$u.[2]", ptr %_2, align 4
  %"$p46" = load ptr, ptr %p, align 8
  %15 = call i32 @_elem(ptr %"$p46")
  %"$x47" = load ptr, ptr %x34, align 8
  %16 = call i32 @_elem(ptr %"$x47")
  %"_elem_call<=_elem_call48" = icmp sle i32 %15, %16
  br i1 %"_elem_call<=_elem_call48", label %if.then49, label %if.else67

if.end43:                                         ; preds = %if.end50, %if.then32
  %"$85" = load ptr, ptr %6, align 8
  store ptr %"$85", ptr %3, align 8
  br label %if.end33

if.then49:                                        ; preds = %if.then42
  %"$p52" = load ptr, ptr %p, align 8
  %17 = call i32 @_elem(ptr %"$p52")
  %"$y" = load ptr, ptr %y, align 8
  %18 = call i32 @_elem(ptr %"$y")
  %"_elem_call<=_elem_call53" = icmp sle i32 %17, %18
  br i1 %"_elem_call<=_elem_call53", label %if.then54, label %if.else61

if.end50:                                         ; preds = %if.end72, %if.end55
  %"$_result84" = load ptr, ptr %_result51, align 8
  store ptr %"$_result84", ptr %6, align 8
  br label %if.end43

if.then54:                                        ; preds = %if.then49
  %19 = call ptr @_const_Nil_elem()
  %20 = call ptr @_const_Nil_elem()
  %"$u57" = load ptr, ptr %u, align 8
  %"$y58" = load ptr, ptr %y, align 8
  %21 = call ptr @_reuse_Cons_elem(ptr %"$u57", ptr %"$y58", ptr %20)
  %"$xs59" = load ptr, ptr %xs, align 8
  %"$x60" = load ptr, ptr %x34, align 8
  %22 = call ptr @_reuse_Cons_elem(ptr %"$xs59", ptr %"$x60", ptr %21)
  %23 = call ptr @_const_Pair(ptr %19, ptr %22)
  store ptr %23, ptr %_result56, align 8
  br label %if.end55

if.end55:                                         ; preds = %if.else61, %if.then54
  %"$_result66" = load ptr, ptr %_result56, align 8
  store ptr %"$_result66", ptr %_result51, align 8
  br label %if.end50

if.else61:                                        ; preds = %if.then49
  %24 = call ptr @_const_Nil_elem()
  %"$u62" = load ptr, ptr %u, align 8
  %"$y63" = load ptr, ptr %y, align 8
  %25 = call ptr @_reuse_Cons_elem(ptr %"$u62", ptr %"$y63", ptr %24)
  %26 = call ptr @_const_Nil_elem()
  %"$xs64" = load ptr, ptr %xs, align 8
  %"$x65" = load ptr, ptr %x34, align 8
  %27 = call ptr @_reuse_Cons_elem(ptr %"$xs64", ptr %"$x65", ptr %26)
  %28 = call ptr @_const_Pair(ptr %25, ptr %27)
  store ptr %28, ptr %_result56, align 8
  br label %if.end55

if.else67:                                        ; preds = %if.then42
  %"$p68" = load ptr, ptr %p, align 8
  %29 = call i32 @_elem(ptr %"$p68")
  %"$y69" = load ptr, ptr %y, align 8
  %30 = call i32 @_elem(ptr %"$y69")
  %"_elem_call<=_elem_call70" = icmp sle i32 %29, %30
  br i1 %"_elem_call<=_elem_call70", label %if.then71, label %if.else78

if.then71:                                        ; preds = %if.else67
  %31 = call ptr @_const_Nil_elem()
  %"$u74" = load ptr, ptr %u, align 8
  %"$x75" = load ptr, ptr %x34, align 8
  %32 = call ptr @_reuse_Cons_elem(ptr %"$u74", ptr %"$x75", ptr %31)
  %33 = call ptr @_const_Nil_elem()
  %"$xs76" = load ptr, ptr %xs, align 8
  %"$y77" = load ptr, ptr %y, align 8
  %34 = call ptr @_reuse_Cons_elem(ptr %"$xs76", ptr %"$y77", ptr %33)
  %35 = call ptr @_const_Pair(ptr %32, ptr %34)
  store ptr %35, ptr %_result73, align 8
  br label %if.end72

if.end72:                                         ; preds = %if.else78, %if.then71
  %"$_result83" = load ptr, ptr %_result73, align 8
  store ptr %"$_result83", ptr %_result51, align 8
  br label %if.end50

if.else78:                                        ; preds = %if.else67
  %36 = call ptr @_const_Nil_elem()
  %"$u79" = load ptr, ptr %u, align 8
  %"$y80" = load ptr, ptr %y, align 8
  %37 = call ptr @_reuse_Cons_elem(ptr %"$u79", ptr %"$y80", ptr %36)
  %"$xs81" = load ptr, ptr %xs, align 8
  %"$x82" = load ptr, ptr %x34, align 8
  %38 = call ptr @_reuse_Cons_elem(ptr %"$xs81", ptr %"$x82", ptr %37)
  %39 = call ptr @_const_Nil_elem()
  %40 = call ptr @_const_Pair(ptr %38, ptr %39)
  store ptr %40, ptr %_result73, align 8
  br label %if.end72
}

define ptr @quicksort(ptr %0) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  br label %start

start:                                            ; preds = %prolog
  %1 = call ptr @_const_End()
  %"$xs" = load ptr, ptr %xs, align 8
  %2 = call ptr @to_bundle(ptr %"$xs", ptr %1)
  %3 = call ptr @quicksort_go(ptr %2)
  ret ptr %3
}

define i32 @finish(ptr %0) {
prolog:
  %x = alloca ptr, align 8
  store ptr %0, ptr %x, align 8
  br label %start

start:                                            ; preds = %prolog
  ret i32 0
}

define ptr @second(ptr %0, ptr %1) {
prolog:
  %x = alloca ptr, align 8
  store ptr %0, ptr %x, align 8
  %xx = alloca ptr, align 8
  store ptr %1, ptr %xx, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xx" = load ptr, ptr %xx, align 8
  ret ptr %"$xx"
}

define ptr @second_first_int(i32 %0, ptr %1) {
prolog:
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %xx = alloca ptr, align 8
  store ptr %1, ptr %xx, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xx" = load ptr, ptr %xx, align 8
  ret ptr %"$xx"
}

define ptr @log_elem(ptr %0) {
prolog:
  %e = alloca ptr, align 8
  store ptr %0, ptr %e, align 8
  %1 = alloca ptr, align 8
  %i = alloca i32, align 4
  br label %start

start:                                            ; preds = %prolog
  %"$e" = load ptr, ptr %e, align 8
  %e.tag = getelementptr inbounds %elem, ptr %"$e", i32 0, i32 0
  %"$e.tag" = load i32, ptr %e.tag, align 4
  %"e==5" = icmp eq i32 %"$e.tag", 5
  br i1 %"e==5", label %if.then, label %if.end

if.then:                                          ; preds = %start
  %"$e1" = load ptr, ptr %e, align 8
  %"e.[1]" = getelementptr inbounds %Elem, ptr %"$e1", i32 0, i32 1
  %"$e.[1]" = load i32, ptr %"e.[1]", align 4
  store i32 %"$e.[1]", ptr %i, align 4
  %"$i" = load i32, ptr %i, align 4
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @1, i32 %"$i", ptr @0)
  %"$e2" = load ptr, ptr %e, align 8
  %"$i3" = load i32, ptr %i, align 4
  %3 = call ptr @_reuse_Elem(ptr %"$e2", i32 %"$i3")
  store ptr %3, ptr %1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %start
  %"$" = load ptr, ptr %1, align 8
  ret ptr %"$"
}

define i32 @_travers_list(ptr %0) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  %1 = alloca i32, align 4
  %x = alloca ptr, align 8
  %xx = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xs" = load ptr, ptr %xs, align 8
  %"(bool)xs" = icmp ne ptr %"$xs", null
  %"!(bool)xs" = xor i1 %"(bool)xs", true
  br i1 %"!(bool)xs", label %if.then, label %if.else

if.then:                                          ; preds = %start
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @2)
  store i32 %2, ptr %1, align 4
  br label %if.end

if.end:                                           ; preds = %if.end3, %if.then
  %"$" = load i32, ptr %1, align 4
  ret i32 %"$"

if.else:                                          ; preds = %start
  %"$xs1" = load ptr, ptr %xs, align 8
  %xs.tag = getelementptr inbounds %list_elem, ptr %"$xs1", i32 0, i32 0
  %"$xs.tag" = load i32, ptr %xs.tag, align 4
  %"xs==15" = icmp eq i32 %"$xs.tag", 15
  br i1 %"xs==15", label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.else
  %"$xs4" = load ptr, ptr %xs, align 8
  %"xs.[1]" = getelementptr inbounds %Cons_elem, ptr %"$xs4", i32 0, i32 1
  %"$xs.[1]" = load ptr, ptr %"xs.[1]", align 8
  store ptr %"$xs.[1]", ptr %x, align 8
  %"$xs5" = load ptr, ptr %xs, align 8
  %"xs.[2]" = getelementptr inbounds %Cons_elem, ptr %"$xs5", i32 0, i32 2
  %"$xs.[2]" = load ptr, ptr %"xs.[2]", align 8
  store ptr %"$xs.[2]", ptr %xx, align 8
  %"$x" = load ptr, ptr %x, align 8
  %3 = call ptr @log_elem(ptr %"$x")
  %"$xx" = load ptr, ptr %xx, align 8
  %4 = call ptr @second(ptr %3, ptr %"$xx")
  %5 = call i32 @_travers_list(ptr %4)
  store i32 %5, ptr %1, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.else
  br label %if.end
}

define i32 @travers_list(ptr %0) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xs" = load ptr, ptr %xs, align 8
  %1 = call i32 (ptr, ...) @ckrt_printf(ptr @4, ptr %"$xs", ptr @3)
  %"$xs1" = load ptr, ptr %xs, align 8
  %2 = call i32 @_travers_list(ptr %"$xs1")
  ret i32 %2
}

define ptr @log_list(ptr %0) {
prolog:
  %xs = alloca ptr, align 8
  store ptr %0, ptr %xs, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$xs" = load ptr, ptr %xs, align 8
  %1 = call i32 @travers_list(ptr %"$xs")
  %"$xs1" = load ptr, ptr %xs, align 8
  %2 = call ptr @second_first_int(i32 %1, ptr %"$xs1")
  ret ptr %2
}

define ptr @make_list() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  %0 = call ptr @_const_Elem(i32 -1)
  %1 = call ptr @_const_Elem(i32 5)
  %2 = call ptr @_const_Elem(i32 3)
  %3 = call ptr @_const_Elem(i32 1)
  %4 = call ptr @_const_Elem(i32 2)
  %5 = call ptr @_const_Elem(i32 8)
  %6 = call ptr @_const_Elem(i32 -2)
  %7 = call ptr @_const_Elem(i32 -1)
  %8 = call ptr @_const_Nil_elem()
  %9 = call ptr @_const_Cons_elem(ptr %7, ptr %8)
  %10 = call ptr @_const_Cons_elem(ptr %6, ptr %9)
  %11 = call ptr @_const_Cons_elem(ptr %5, ptr %10)
  %12 = call ptr @_const_Cons_elem(ptr %4, ptr %11)
  %13 = call ptr @_const_Cons_elem(ptr %3, ptr %12)
  %14 = call ptr @_const_Cons_elem(ptr %2, ptr %13)
  %15 = call ptr @_const_Cons_elem(ptr %1, ptr %14)
  %16 = call ptr @_const_Cons_elem(ptr %0, ptr %15)
  ret ptr %16
}

define i32 @main(i32 %0, ptr %1) {
prolog:
  %argc = alloca i32, align 4
  store i32 %0, ptr %argc, align 4
  %argv = alloca ptr, align 8
  store ptr %1, ptr %argv, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @make_list()
  %3 = call ptr @log_list(ptr %2)
  %4 = call ptr @quicksort(ptr %3)
  %5 = call ptr @log_list(ptr %4)
  %6 = call i32 @finish(ptr %5)
  ret i32 %6
}
