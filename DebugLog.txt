; ModuleID = 'test'
source_filename = "test"

%Pair = type { i32, ptr, ptr }
%Tuple3 = type { i32, ptr, ptr, ptr }
%Tuple4 = type { i32, ptr, ptr, ptr, ptr }
%Boolean = type { i32, i32 }
%Integer = type { i32, i32 }
%Node = type { i32, i32, ptr, ptr, i1, ptr }
%number = type { i32 }
%tree = type { i32 }
%object = type { i32 }
%Cons = type { i32, i32, ptr }
%list = type { i32 }

@Pair_global_stored = global %Pair zeroinitializer
@Tuple3_global_stored = global %Tuple3 zeroinitializer
@Tuple4_global_stored = global %Tuple4 zeroinitializer
@Boolean_global_stored = global %Boolean zeroinitializer
@0 = private unnamed_addr constant [13 x i8] c"<Red color, \00", align 1
@1 = private unnamed_addr constant [6 x i8] c"%i %s\00", align 1
@2 = private unnamed_addr constant [15 x i8] c"<Black color, \00", align 1
@3 = private unnamed_addr constant [6 x i8] c"%i %s\00", align 1
@4 = private unnamed_addr constant [7 x i8] c"level \00", align 1
@5 = private unnamed_addr constant [6 x i8] c"%i %s\00", align 1
@6 = private unnamed_addr constant [8 x i8] c"<leaf>\0A\00", align 1
@7 = private unnamed_addr constant [6 x i8] c"%p %s\00", align 1
@8 = private unnamed_addr constant [8 x i8] c"level, \00", align 1
@9 = private unnamed_addr constant [6 x i8] c"%i %s\00", align 1
@10 = private unnamed_addr constant [13 x i8] c"node value>\0A\00", align 1
@11 = private unnamed_addr constant [6 x i8] c"%i %s\00", align 1
@12 = private unnamed_addr constant [15 x i8] c"Log Tree Done\0A\00", align 1
@13 = private unnamed_addr constant [6 x i8] c"%p %s\00", align 1
@14 = private unnamed_addr constant [18 x i8] c"Insertions done\0A\0A\00", align 1
@15 = private unnamed_addr constant [6 x i8] c"%p %s\00", align 1

declare ptr @ckrt_malloc(i32)

declare i32 @ckrt_printf(ptr, ...)

declare i32 @ckrt_scanf(ptr, ...)

declare i32 @ckrt_sprintf(ptr, ptr, ...)

declare i32 @ckrt_sscanf(ptr, ptr, ...)

declare ptr @ckrt_memset(ptr, i32, i32)

declare void @ckrt_measure_cpu_time()

define ptr @_const_Tagged() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  ret ptr null
}

define ptr @_const_Pair(ptr %0, ptr %1) {
prolog:
  %first = alloca ptr, align 8
  store ptr %0, ptr %first, align 8
  %second = alloca ptr, align 8
  store ptr %1, ptr %second, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  store ptr @Pair_global_stored, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Pair, ptr %"$_result", i32 0, i32 0
  store i32 1, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Pair, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.first = getelementptr inbounds %Pair, ptr %"$_result3", i32 0, i32 1
  %"$first" = load ptr, ptr %first, align 8
  store ptr %"$first", ptr %_result.first, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.second = getelementptr inbounds %Pair, ptr %"$_result4", i32 0, i32 2
  %"$second" = load ptr, ptr %second, align 8
  store ptr %"$second", ptr %_result.second, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_const_Tuple3(ptr %0, ptr %1, ptr %2) {
prolog:
  %first = alloca ptr, align 8
  store ptr %0, ptr %first, align 8
  %second = alloca ptr, align 8
  store ptr %1, ptr %second, align 8
  %third = alloca ptr, align 8
  store ptr %2, ptr %third, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  store ptr @Tuple3_global_stored, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Tuple3, ptr %"$_result", i32 0, i32 0
  store i32 2, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Tuple3, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.first = getelementptr inbounds %Tuple3, ptr %"$_result3", i32 0, i32 1
  %"$first" = load ptr, ptr %first, align 8
  store ptr %"$first", ptr %_result.first, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.second = getelementptr inbounds %Tuple3, ptr %"$_result4", i32 0, i32 2
  %"$second" = load ptr, ptr %second, align 8
  store ptr %"$second", ptr %_result.second, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.third = getelementptr inbounds %Tuple3, ptr %"$_result5", i32 0, i32 3
  %"$third" = load ptr, ptr %third, align 8
  store ptr %"$third", ptr %_result.third, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  ret ptr %"$_result6"
}

define ptr @_const_Tuple4(ptr %0, ptr %1, ptr %2, ptr %3) {
prolog:
  %first = alloca ptr, align 8
  store ptr %0, ptr %first, align 8
  %second = alloca ptr, align 8
  store ptr %1, ptr %second, align 8
  %third = alloca ptr, align 8
  store ptr %2, ptr %third, align 8
  %forth = alloca ptr, align 8
  store ptr %3, ptr %forth, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  store ptr @Tuple4_global_stored, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Tuple4, ptr %"$_result", i32 0, i32 0
  store i32 3, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Tuple4, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.first = getelementptr inbounds %Tuple4, ptr %"$_result3", i32 0, i32 1
  %"$first" = load ptr, ptr %first, align 8
  store ptr %"$first", ptr %_result.first, align 8
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.second = getelementptr inbounds %Tuple4, ptr %"$_result4", i32 0, i32 2
  %"$second" = load ptr, ptr %second, align 8
  store ptr %"$second", ptr %_result.second, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.third = getelementptr inbounds %Tuple4, ptr %"$_result5", i32 0, i32 3
  %"$third" = load ptr, ptr %third, align 8
  store ptr %"$third", ptr %_result.third, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  %_result.forth = getelementptr inbounds %Tuple4, ptr %"$_result6", i32 0, i32 4
  %"$forth" = load ptr, ptr %forth, align 8
  store ptr %"$forth", ptr %_result.forth, align 8
  %"$_result7" = load ptr, ptr %_result, align 8
  ret ptr %"$_result7"
}

define ptr @_const_Boolean(i32 %0) {
prolog:
  %value = alloca i32, align 4
  store i32 %0, ptr %value, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  store ptr @Boolean_global_stored, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Boolean, ptr %"$_result", i32 0, i32 0
  store i32 4, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Boolean, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %Boolean, ptr %"$_result3", i32 0, i32 1
  %"$value" = load i32, ptr %value, align 4
  store i32 %"$value", ptr %_result.value, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_const_Integer(i32 %0) {
prolog:
  %val = alloca i32, align 4
  store i32 %0, ptr %val, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %1 = call ptr @ckrt_malloc(i32 16)
  store ptr %1, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Integer, ptr %"$_result", i32 0, i32 0
  store i32 5, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Integer, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.val = getelementptr inbounds %Integer, ptr %"$_result3", i32 0, i32 1
  %"$val" = load i32, ptr %val, align 4
  store i32 %"$val", ptr %_result.val, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_reuse_Integer(ptr %0, i32 %1) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %val = alloca i32, align 4
  store i32 %1, ptr %val, align 4
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Integer, ptr %"$_result", i32 0, i32 0
  store i32 5, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Integer, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.val = getelementptr inbounds %Integer, ptr %"$_result3", i32 0, i32 1
  %"$val" = load i32, ptr %val, align 4
  store i32 %"$val", ptr %_result.val, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  ret ptr %"$_result4"
}

define ptr @_const_Node(i32 %0, ptr %1, ptr %2, i1 %3, ptr %4) {
prolog:
  %_color = alloca i32, align 4
  store i32 %0, ptr %_color, align 4
  %lchild = alloca ptr, align 8
  store ptr %1, ptr %lchild, align 8
  %key = alloca ptr, align 8
  store ptr %2, ptr %key, align 8
  %value = alloca i1, align 1
  store i1 %3, ptr %value, align 1
  %rchild = alloca ptr, align 8
  store ptr %4, ptr %rchild, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %5 = call ptr @ckrt_malloc(i32 48)
  store ptr %5, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Node, ptr %"$_result", i32 0, i32 0
  store i32 6, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Node, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result._color = getelementptr inbounds %Node, ptr %"$_result3", i32 0, i32 1
  %"$_color" = load i32, ptr %_color, align 4
  store i32 %"$_color", ptr %_result._color, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.lchild = getelementptr inbounds %Node, ptr %"$_result4", i32 0, i32 2
  %"$lchild" = load ptr, ptr %lchild, align 8
  store ptr %"$lchild", ptr %_result.lchild, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.key = getelementptr inbounds %Node, ptr %"$_result5", i32 0, i32 3
  %"$key" = load ptr, ptr %key, align 8
  store ptr %"$key", ptr %_result.key, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %Node, ptr %"$_result6", i32 0, i32 4
  %"$value" = load i1, ptr %value, align 1
  store i1 %"$value", ptr %_result.value, align 1
  %"$_result7" = load ptr, ptr %_result, align 8
  %_result.rchild = getelementptr inbounds %Node, ptr %"$_result7", i32 0, i32 5
  %"$rchild" = load ptr, ptr %rchild, align 8
  store ptr %"$rchild", ptr %_result.rchild, align 8
  %"$_result8" = load ptr, ptr %_result, align 8
  ret ptr %"$_result8"
}

define ptr @_reuse_Node(ptr %0, i32 %1, ptr %2, ptr %3, i1 %4, ptr %5) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %_color = alloca i32, align 4
  store i32 %1, ptr %_color, align 4
  %lchild = alloca ptr, align 8
  store ptr %2, ptr %lchild, align 8
  %key = alloca ptr, align 8
  store ptr %3, ptr %key, align 8
  %value = alloca i1, align 1
  store i1 %4, ptr %value, align 1
  %rchild = alloca ptr, align 8
  store ptr %5, ptr %rchild, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Node, ptr %"$_result", i32 0, i32 0
  store i32 6, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Node, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result._color = getelementptr inbounds %Node, ptr %"$_result3", i32 0, i32 1
  %"$_color" = load i32, ptr %_color, align 4
  store i32 %"$_color", ptr %_result._color, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.lchild = getelementptr inbounds %Node, ptr %"$_result4", i32 0, i32 2
  %"$lchild" = load ptr, ptr %lchild, align 8
  store ptr %"$lchild", ptr %_result.lchild, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  %_result.key = getelementptr inbounds %Node, ptr %"$_result5", i32 0, i32 3
  %"$key" = load ptr, ptr %key, align 8
  store ptr %"$key", ptr %_result.key, align 8
  %"$_result6" = load ptr, ptr %_result, align 8
  %_result.value = getelementptr inbounds %Node, ptr %"$_result6", i32 0, i32 4
  %"$value" = load i1, ptr %value, align 1
  store i1 %"$value", ptr %_result.value, align 1
  %"$_result7" = load ptr, ptr %_result, align 8
  %_result.rchild = getelementptr inbounds %Node, ptr %"$_result7", i32 0, i32 5
  %"$rchild" = load ptr, ptr %rchild, align 8
  store ptr %"$rchild", ptr %_result.rchild, align 8
  %"$_result8" = load ptr, ptr %_result, align 8
  ret ptr %"$_result8"
}

define ptr @_const_Leaf() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  ret ptr null
}

define i32 @_int(ptr %0) {
prolog:
  %n = alloca ptr, align 8
  store ptr %0, ptr %n, align 8
  %1 = alloca i32, align 4
  %i = alloca i32, align 4
  br label %start

start:                                            ; preds = %prolog
  %"$n" = load ptr, ptr %n, align 8
  %n.tag = getelementptr inbounds %number, ptr %"$n", i32 0, i32 0
  %"$n.tag" = load i32, ptr %n.tag, align 4
  %"n==5" = icmp eq i32 %"$n.tag", 5
  br i1 %"n==5", label %if.then, label %if.end

if.then:                                          ; preds = %start
  %"$n1" = load ptr, ptr %n, align 8
  %"n.[1]" = getelementptr inbounds %Integer, ptr %"$n1", i32 0, i32 1
  %"$n.[1]" = load i32, ptr %"n.[1]", align 4
  store i32 %"$n.[1]", ptr %i, align 4
  %"$i" = load i32, ptr %i, align 4
  store i32 %"$i", ptr %1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %start
  %"$" = load i32, ptr %1, align 4
  ret i32 %"$"
}

define i1 @is_red(ptr %0) {
prolog:
  %t = alloca ptr, align 8
  store ptr %0, ptr %t, align 8
  %1 = alloca i1, align 1
  %c = alloca i32, align 4
  %l = alloca ptr, align 8
  %i = alloca ptr, align 8
  %v = alloca i1, align 1
  %r = alloca ptr, align 8
  %_result = alloca ptr, align 8
  %2 = alloca i1, align 1
  %i14 = alloca i32, align 4
  br label %start

start:                                            ; preds = %prolog
  %"$t" = load ptr, ptr %t, align 8
  %"(bool)t" = icmp ne ptr %"$t", null
  %"!(bool)t" = xor i1 %"(bool)t", true
  br i1 %"!(bool)t", label %if.then, label %if.else

if.then:                                          ; preds = %start
  store i1 false, ptr %1, align 1
  br label %if.end

if.end:                                           ; preds = %if.end3, %if.then
  %"$16" = load i1, ptr %1, align 1
  ret i1 %"$16"

if.else:                                          ; preds = %start
  %"$t1" = load ptr, ptr %t, align 8
  %t.tag = getelementptr inbounds %tree, ptr %"$t1", i32 0, i32 0
  %"$t.tag" = load i32, ptr %t.tag, align 4
  %"t==6" = icmp eq i32 %"$t.tag", 6
  br i1 %"t==6", label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.else
  %"$t4" = load ptr, ptr %t, align 8
  %"t.[1]" = getelementptr inbounds %Node, ptr %"$t4", i32 0, i32 1
  %"$t.[1]" = load i32, ptr %"t.[1]", align 4
  store i32 %"$t.[1]", ptr %c, align 4
  %"$t5" = load ptr, ptr %t, align 8
  %"t.[2]" = getelementptr inbounds %Node, ptr %"$t5", i32 0, i32 2
  %"$t.[2]" = load ptr, ptr %"t.[2]", align 8
  store ptr %"$t.[2]", ptr %l, align 8
  %"$t6" = load ptr, ptr %t, align 8
  %"t.[3]" = getelementptr inbounds %Node, ptr %"$t6", i32 0, i32 3
  %"$t.[3]" = load ptr, ptr %"t.[3]", align 8
  store ptr %"$t.[3]", ptr %i, align 8
  %"$t7" = load ptr, ptr %t, align 8
  %"t.[4]" = getelementptr inbounds %Node, ptr %"$t7", i32 0, i32 4
  %"$t.[4]" = load i1, ptr %"t.[4]", align 1
  store i1 %"$t.[4]", ptr %v, align 1
  %"$t8" = load ptr, ptr %t, align 8
  %"t.[5]" = getelementptr inbounds %Node, ptr %"$t8", i32 0, i32 5
  %"$t.[5]" = load ptr, ptr %"t.[5]", align 8
  store ptr %"$t.[5]", ptr %r, align 8
  %"$c" = load i32, ptr %c, align 4
  %"c==1" = icmp eq i32 %"$c", 1
  br i1 %"c==1", label %if.then9, label %if.else11

if.end3:                                          ; preds = %if.end13, %if.else
  br label %if.end

if.then9:                                         ; preds = %if.then2
  %3 = call ptr @_const_Boolean(i32 1)
  store ptr %3, ptr %_result, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.else11, %if.then9
  %"$_result" = load ptr, ptr %_result, align 8
  %_result.tag = getelementptr inbounds %object, ptr %"$_result", i32 0, i32 0
  %"$_result.tag" = load i32, ptr %_result.tag, align 4
  %"_result==4" = icmp eq i32 %"$_result.tag", 4
  br i1 %"_result==4", label %if.then12, label %if.end13

if.else11:                                        ; preds = %if.then2
  %4 = call ptr @_const_Boolean(i32 0)
  store ptr %4, ptr %_result, align 8
  br label %if.end10

if.then12:                                        ; preds = %if.end10
  %"$_result15" = load ptr, ptr %_result, align 8
  %"_result.[1]" = getelementptr inbounds %Boolean, ptr %"$_result15", i32 0, i32 1
  %"$_result.[1]" = load i32, ptr %"_result.[1]", align 4
  store i32 %"$_result.[1]", ptr %i14, align 4
  %"$i" = load i32, ptr %i14, align 4
  %"(bool)i" = icmp ne i32 %"$i", 0
  store i1 %"(bool)i", ptr %2, align 1
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.end10
  %"$" = load i1, ptr %2, align 1
  store i1 %"$", ptr %1, align 1
  br label %if.end3
}

define ptr @balance_left(ptr %0, ptr %1, i1 %2, ptr %3) {
prolog:
  %l = alloca ptr, align 8
  store ptr %0, ptr %l, align 8
  %k = alloca ptr, align 8
  store ptr %1, ptr %k, align 8
  %v = alloca i1, align 1
  store i1 %2, ptr %v, align 1
  %r = alloca ptr, align 8
  store ptr %3, ptr %r, align 8
  %4 = alloca ptr, align 8
  %_c = alloca i32, align 4
  %ly = alloca ptr, align 8
  %ky = alloca ptr, align 8
  %vy = alloca i1, align 1
  %ry = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %cc = alloca i32, align 4
  %lx = alloca ptr, align 8
  %kx = alloca ptr, align 8
  %vx = alloca i1, align 1
  %rx = alloca ptr, align 8
  %_result = alloca ptr, align 8
  %cc44 = alloca i32, align 4
  %lx46 = alloca ptr, align 8
  %kx48 = alloca ptr, align 8
  %vx50 = alloca i1, align 1
  %rx52 = alloca ptr, align 8
  %_result58 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %cc89 = alloca i32, align 4
  %lx93 = alloca ptr, align 8
  %kx97 = alloca ptr, align 8
  %vx101 = alloca i1, align 1
  %rx105 = alloca ptr, align 8
  %_result113 = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$l" = load ptr, ptr %l, align 8
  %"(bool)l" = icmp ne ptr %"$l", null
  %"!(bool)l" = xor i1 %"(bool)l", true
  br i1 %"!(bool)l", label %if.then, label %if.else

if.then:                                          ; preds = %start
  %8 = call ptr @_const_Leaf()
  store ptr %8, ptr %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.end3, %if.then
  %"$136" = load ptr, ptr %4, align 8
  ret ptr %"$136"

if.else:                                          ; preds = %start
  %"$l1" = load ptr, ptr %l, align 8
  %l.tag = getelementptr inbounds %tree, ptr %"$l1", i32 0, i32 0
  %"$l.tag" = load i32, ptr %l.tag, align 4
  %"l==6" = icmp eq i32 %"$l.tag", 6
  br i1 %"l==6", label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.else
  %"$l4" = load ptr, ptr %l, align 8
  %"l.[1]" = getelementptr inbounds %Node, ptr %"$l4", i32 0, i32 1
  %"$l.[1]" = load i32, ptr %"l.[1]", align 4
  store i32 %"$l.[1]", ptr %_c, align 4
  %"$l5" = load ptr, ptr %l, align 8
  %"l.[2]" = getelementptr inbounds %Node, ptr %"$l5", i32 0, i32 2
  %"$l.[2]" = load ptr, ptr %"l.[2]", align 8
  store ptr %"$l.[2]", ptr %ly, align 8
  %"$l6" = load ptr, ptr %l, align 8
  %"l.[3]" = getelementptr inbounds %Node, ptr %"$l6", i32 0, i32 3
  %"$l.[3]" = load ptr, ptr %"l.[3]", align 8
  store ptr %"$l.[3]", ptr %ky, align 8
  %"$l7" = load ptr, ptr %l, align 8
  %"l.[4]" = getelementptr inbounds %Node, ptr %"$l7", i32 0, i32 4
  %"$l.[4]" = load i1, ptr %"l.[4]", align 1
  store i1 %"$l.[4]", ptr %vy, align 1
  %"$l8" = load ptr, ptr %l, align 8
  %"l.[5]" = getelementptr inbounds %Node, ptr %"$l8", i32 0, i32 5
  %"$l.[5]" = load ptr, ptr %"l.[5]", align 8
  store ptr %"$l.[5]", ptr %ry, align 8
  %"$ly" = load ptr, ptr %ly, align 8
  %"(bool)ly" = icmp ne ptr %"$ly", null
  %"!(bool)ly" = xor i1 %"(bool)ly", true
  br i1 %"!(bool)ly", label %if.then9, label %if.else40

if.end3:                                          ; preds = %if.end10, %if.else
  br label %if.end

if.then9:                                         ; preds = %if.then2
  %"$ry" = load ptr, ptr %ry, align 8
  %"(bool)ry" = icmp ne ptr %"$ry", null
  %"!(bool)ry" = xor i1 %"(bool)ry", true
  br i1 %"!(bool)ry", label %if.then11, label %if.else15

if.end10:                                         ; preds = %if.end43, %if.end12
  %"$135" = load ptr, ptr %5, align 8
  store ptr %"$135", ptr %4, align 8
  br label %if.end3

if.then11:                                        ; preds = %if.then9
  %"$ly13" = load ptr, ptr %ly, align 8
  %"$ky" = load ptr, ptr %ky, align 8
  %"$vy" = load i1, ptr %vy, align 1
  %"$ry14" = load ptr, ptr %ry, align 8
  %9 = call ptr @_const_Node(i32 1, ptr %"$ly13", ptr %"$ky", i1 %"$vy", ptr %"$ry14")
  %"$k" = load ptr, ptr %k, align 8
  %"$v" = load i1, ptr %v, align 1
  %"$r" = load ptr, ptr %r, align 8
  %10 = call ptr @_const_Node(i32 0, ptr %9, ptr %"$k", i1 %"$v", ptr %"$r")
  store ptr %10, ptr %6, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.end18, %if.then11
  %"$" = load ptr, ptr %6, align 8
  store ptr %"$", ptr %5, align 8
  br label %if.end10

if.else15:                                        ; preds = %if.then9
  %"$ry16" = load ptr, ptr %ry, align 8
  %ry.tag = getelementptr inbounds %tree, ptr %"$ry16", i32 0, i32 0
  %"$ry.tag" = load i32, ptr %ry.tag, align 4
  %"ry==6" = icmp eq i32 %"$ry.tag", 6
  br i1 %"ry==6", label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.else15
  %"$ry19" = load ptr, ptr %ry, align 8
  %"ry.[1]" = getelementptr inbounds %Node, ptr %"$ry19", i32 0, i32 1
  %"$ry.[1]" = load i32, ptr %"ry.[1]", align 4
  store i32 %"$ry.[1]", ptr %cc, align 4
  %"$ry20" = load ptr, ptr %ry, align 8
  %"ry.[2]" = getelementptr inbounds %Node, ptr %"$ry20", i32 0, i32 2
  %"$ry.[2]" = load ptr, ptr %"ry.[2]", align 8
  store ptr %"$ry.[2]", ptr %lx, align 8
  %"$ry21" = load ptr, ptr %ry, align 8
  %"ry.[3]" = getelementptr inbounds %Node, ptr %"$ry21", i32 0, i32 3
  %"$ry.[3]" = load ptr, ptr %"ry.[3]", align 8
  store ptr %"$ry.[3]", ptr %kx, align 8
  %"$ry22" = load ptr, ptr %ry, align 8
  %"ry.[4]" = getelementptr inbounds %Node, ptr %"$ry22", i32 0, i32 4
  %"$ry.[4]" = load i1, ptr %"ry.[4]", align 1
  store i1 %"$ry.[4]", ptr %vx, align 1
  %"$ry23" = load ptr, ptr %ry, align 8
  %"ry.[5]" = getelementptr inbounds %Node, ptr %"$ry23", i32 0, i32 5
  %"$ry.[5]" = load ptr, ptr %"ry.[5]", align 8
  store ptr %"$ry.[5]", ptr %rx, align 8
  %"$cc" = load i32, ptr %cc, align 4
  %"cc==1" = icmp eq i32 %"$cc", 1
  br i1 %"cc==1", label %if.then24, label %if.else32

if.end18:                                         ; preds = %if.end25, %if.else15
  br label %if.end12

if.then24:                                        ; preds = %if.then17
  %"$ly26" = load ptr, ptr %ly, align 8
  %"$ky27" = load ptr, ptr %ky, align 8
  %"$vy28" = load i1, ptr %vy, align 1
  %"$lx" = load ptr, ptr %lx, align 8
  %11 = call ptr @_const_Node(i32 0, ptr %"$ly26", ptr %"$ky27", i1 %"$vy28", ptr %"$lx")
  %"$rx" = load ptr, ptr %rx, align 8
  %"$k29" = load ptr, ptr %k, align 8
  %"$v30" = load i1, ptr %v, align 1
  %"$r31" = load ptr, ptr %r, align 8
  %12 = call ptr @_const_Node(i32 0, ptr %"$rx", ptr %"$k29", i1 %"$v30", ptr %"$r31")
  %"$kx" = load ptr, ptr %kx, align 8
  %"$vx" = load i1, ptr %vx, align 1
  %13 = call ptr @_const_Node(i32 1, ptr %11, ptr %"$kx", i1 %"$vx", ptr %12)
  store ptr %13, ptr %_result, align 8
  br label %if.end25

if.end25:                                         ; preds = %if.else32, %if.then24
  %"$_result" = load ptr, ptr %_result, align 8
  store ptr %"$_result", ptr %6, align 8
  br label %if.end18

if.else32:                                        ; preds = %if.then17
  %"$ly33" = load ptr, ptr %ly, align 8
  %"$ky34" = load ptr, ptr %ky, align 8
  %"$vy35" = load i1, ptr %vy, align 1
  %"$ry36" = load ptr, ptr %ry, align 8
  %14 = call ptr @_const_Node(i32 1, ptr %"$ly33", ptr %"$ky34", i1 %"$vy35", ptr %"$ry36")
  %"$k37" = load ptr, ptr %k, align 8
  %"$v38" = load i1, ptr %v, align 1
  %"$r39" = load ptr, ptr %r, align 8
  %15 = call ptr @_const_Node(i32 0, ptr %14, ptr %"$k37", i1 %"$v38", ptr %"$r39")
  store ptr %15, ptr %_result, align 8
  br label %if.end25

if.else40:                                        ; preds = %if.then2
  %"$ly41" = load ptr, ptr %ly, align 8
  %ly.tag = getelementptr inbounds %tree, ptr %"$ly41", i32 0, i32 0
  %"$ly.tag" = load i32, ptr %ly.tag, align 4
  %"ly==6" = icmp eq i32 %"$ly.tag", 6
  br i1 %"ly==6", label %if.then42, label %if.end43

if.then42:                                        ; preds = %if.else40
  %"$ly45" = load ptr, ptr %ly, align 8
  %"ly.[1]" = getelementptr inbounds %Node, ptr %"$ly45", i32 0, i32 1
  %"$ly.[1]" = load i32, ptr %"ly.[1]", align 4
  store i32 %"$ly.[1]", ptr %cc44, align 4
  %"$ly47" = load ptr, ptr %ly, align 8
  %"ly.[2]" = getelementptr inbounds %Node, ptr %"$ly47", i32 0, i32 2
  %"$ly.[2]" = load ptr, ptr %"ly.[2]", align 8
  store ptr %"$ly.[2]", ptr %lx46, align 8
  %"$ly49" = load ptr, ptr %ly, align 8
  %"ly.[3]" = getelementptr inbounds %Node, ptr %"$ly49", i32 0, i32 3
  %"$ly.[3]" = load ptr, ptr %"ly.[3]", align 8
  store ptr %"$ly.[3]", ptr %kx48, align 8
  %"$ly51" = load ptr, ptr %ly, align 8
  %"ly.[4]" = getelementptr inbounds %Node, ptr %"$ly51", i32 0, i32 4
  %"$ly.[4]" = load i1, ptr %"ly.[4]", align 1
  store i1 %"$ly.[4]", ptr %vx50, align 1
  %"$ly53" = load ptr, ptr %ly, align 8
  %"ly.[5]" = getelementptr inbounds %Node, ptr %"$ly53", i32 0, i32 5
  %"$ly.[5]" = load ptr, ptr %"ly.[5]", align 8
  store ptr %"$ly.[5]", ptr %rx52, align 8
  %"$cc54" = load i32, ptr %cc44, align 4
  %"cc==155" = icmp eq i32 %"$cc54", 1
  br i1 %"cc==155", label %if.then56, label %if.else69

if.end43:                                         ; preds = %if.end57, %if.else40
  br label %if.end10

if.then56:                                        ; preds = %if.then42
  %"$lx59" = load ptr, ptr %lx46, align 8
  %"$kx60" = load ptr, ptr %kx48, align 8
  %"$vx61" = load i1, ptr %vx50, align 1
  %"$rx62" = load ptr, ptr %rx52, align 8
  %16 = call ptr @_const_Node(i32 0, ptr %"$lx59", ptr %"$kx60", i1 %"$vx61", ptr %"$rx62")
  %"$ry63" = load ptr, ptr %ry, align 8
  %"$k64" = load ptr, ptr %k, align 8
  %"$v65" = load i1, ptr %v, align 1
  %"$r66" = load ptr, ptr %r, align 8
  %17 = call ptr @_const_Node(i32 0, ptr %"$ry63", ptr %"$k64", i1 %"$v65", ptr %"$r66")
  %"$ky67" = load ptr, ptr %ky, align 8
  %"$vy68" = load i1, ptr %vy, align 1
  %18 = call ptr @_const_Node(i32 1, ptr %16, ptr %"$ky67", i1 %"$vy68", ptr %17)
  store ptr %18, ptr %_result58, align 8
  br label %if.end57

if.end57:                                         ; preds = %if.end74, %if.then56
  %"$_result134" = load ptr, ptr %_result58, align 8
  store ptr %"$_result134", ptr %5, align 8
  br label %if.end43

if.else69:                                        ; preds = %if.then42
  %"$ry70" = load ptr, ptr %ry, align 8
  %"(bool)ry71" = icmp ne ptr %"$ry70", null
  %"!(bool)ry72" = xor i1 %"(bool)ry71", true
  br i1 %"!(bool)ry72", label %if.then73, label %if.else82

if.then73:                                        ; preds = %if.else69
  %"$ly75" = load ptr, ptr %ly, align 8
  %"$ky76" = load ptr, ptr %ky, align 8
  %"$vy77" = load i1, ptr %vy, align 1
  %"$ry78" = load ptr, ptr %ry, align 8
  %19 = call ptr @_const_Node(i32 1, ptr %"$ly75", ptr %"$ky76", i1 %"$vy77", ptr %"$ry78")
  %"$k79" = load ptr, ptr %k, align 8
  %"$v80" = load i1, ptr %v, align 1
  %"$r81" = load ptr, ptr %r, align 8
  %20 = call ptr @_const_Node(i32 0, ptr %19, ptr %"$k79", i1 %"$v80", ptr %"$r81")
  store ptr %20, ptr %7, align 8
  br label %if.end74

if.end74:                                         ; preds = %if.end88, %if.then73
  %"$133" = load ptr, ptr %7, align 8
  store ptr %"$133", ptr %_result58, align 8
  br label %if.end57

if.else82:                                        ; preds = %if.else69
  %"$ry83" = load ptr, ptr %ry, align 8
  %ry.tag84 = getelementptr inbounds %tree, ptr %"$ry83", i32 0, i32 0
  %"$ry.tag85" = load i32, ptr %ry.tag84, align 4
  %"ry==686" = icmp eq i32 %"$ry.tag85", 6
  br i1 %"ry==686", label %if.then87, label %if.end88

if.then87:                                        ; preds = %if.else82
  %"$ry90" = load ptr, ptr %ry, align 8
  %"ry.[1]91" = getelementptr inbounds %Node, ptr %"$ry90", i32 0, i32 1
  %"$ry.[1]92" = load i32, ptr %"ry.[1]91", align 4
  store i32 %"$ry.[1]92", ptr %cc89, align 4
  %"$ry94" = load ptr, ptr %ry, align 8
  %"ry.[2]95" = getelementptr inbounds %Node, ptr %"$ry94", i32 0, i32 2
  %"$ry.[2]96" = load ptr, ptr %"ry.[2]95", align 8
  store ptr %"$ry.[2]96", ptr %lx93, align 8
  %"$ry98" = load ptr, ptr %ry, align 8
  %"ry.[3]99" = getelementptr inbounds %Node, ptr %"$ry98", i32 0, i32 3
  %"$ry.[3]100" = load ptr, ptr %"ry.[3]99", align 8
  store ptr %"$ry.[3]100", ptr %kx97, align 8
  %"$ry102" = load ptr, ptr %ry, align 8
  %"ry.[4]103" = getelementptr inbounds %Node, ptr %"$ry102", i32 0, i32 4
  %"$ry.[4]104" = load i1, ptr %"ry.[4]103", align 1
  store i1 %"$ry.[4]104", ptr %vx101, align 1
  %"$ry106" = load ptr, ptr %ry, align 8
  %"ry.[5]107" = getelementptr inbounds %Node, ptr %"$ry106", i32 0, i32 5
  %"$ry.[5]108" = load ptr, ptr %"ry.[5]107", align 8
  store ptr %"$ry.[5]108", ptr %rx105, align 8
  %"$cc109" = load i32, ptr %cc89, align 4
  %"cc==1110" = icmp eq i32 %"$cc109", 1
  br i1 %"cc==1110", label %if.then111, label %if.else124

if.end88:                                         ; preds = %if.end112, %if.else82
  br label %if.end74

if.then111:                                       ; preds = %if.then87
  %"$ly114" = load ptr, ptr %ly, align 8
  %"$ky115" = load ptr, ptr %ky, align 8
  %"$vy116" = load i1, ptr %vy, align 1
  %"$lx117" = load ptr, ptr %lx93, align 8
  %21 = call ptr @_const_Node(i32 0, ptr %"$ly114", ptr %"$ky115", i1 %"$vy116", ptr %"$lx117")
  %"$rx118" = load ptr, ptr %rx105, align 8
  %"$k119" = load ptr, ptr %k, align 8
  %"$v120" = load i1, ptr %v, align 1
  %"$r121" = load ptr, ptr %r, align 8
  %22 = call ptr @_const_Node(i32 0, ptr %"$rx118", ptr %"$k119", i1 %"$v120", ptr %"$r121")
  %"$kx122" = load ptr, ptr %kx97, align 8
  %"$vx123" = load i1, ptr %vx101, align 1
  %23 = call ptr @_const_Node(i32 1, ptr %21, ptr %"$kx122", i1 %"$vx123", ptr %22)
  store ptr %23, ptr %_result113, align 8
  br label %if.end112

if.end112:                                        ; preds = %if.else124, %if.then111
  %"$_result132" = load ptr, ptr %_result113, align 8
  store ptr %"$_result132", ptr %7, align 8
  br label %if.end88

if.else124:                                       ; preds = %if.then87
  %"$ly125" = load ptr, ptr %ly, align 8
  %"$ky126" = load ptr, ptr %ky, align 8
  %"$vy127" = load i1, ptr %vy, align 1
  %"$ry128" = load ptr, ptr %ry, align 8
  %24 = call ptr @_const_Node(i32 1, ptr %"$ly125", ptr %"$ky126", i1 %"$vy127", ptr %"$ry128")
  %"$k129" = load ptr, ptr %k, align 8
  %"$v130" = load i1, ptr %v, align 1
  %"$r131" = load ptr, ptr %r, align 8
  %25 = call ptr @_const_Node(i32 0, ptr %24, ptr %"$k129", i1 %"$v130", ptr %"$r131")
  store ptr %25, ptr %_result113, align 8
  br label %if.end112
}

define ptr @balance_right(ptr %0, ptr %1, i1 %2, ptr %3) {
prolog:
  %l = alloca ptr, align 8
  store ptr %0, ptr %l, align 8
  %k = alloca ptr, align 8
  store ptr %1, ptr %k, align 8
  %v = alloca i1, align 1
  store i1 %2, ptr %v, align 1
  %r = alloca ptr, align 8
  store ptr %3, ptr %r, align 8
  %4 = alloca ptr, align 8
  %c = alloca i32, align 4
  %ly = alloca ptr, align 8
  %ky = alloca ptr, align 8
  %vy = alloca i1, align 1
  %ry = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %cc = alloca i32, align 4
  %lx = alloca ptr, align 8
  %kx = alloca ptr, align 8
  %vx = alloca i1, align 1
  %rx = alloca ptr, align 8
  %_result = alloca ptr, align 8
  %cc44 = alloca i32, align 4
  %lx46 = alloca ptr, align 8
  %kx48 = alloca ptr, align 8
  %vx50 = alloca i1, align 1
  %rx52 = alloca ptr, align 8
  %_result58 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %cc89 = alloca i32, align 4
  %lx93 = alloca ptr, align 8
  %kx97 = alloca ptr, align 8
  %vx101 = alloca i1, align 1
  %rx105 = alloca ptr, align 8
  %_result113 = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$r" = load ptr, ptr %r, align 8
  %"(bool)r" = icmp ne ptr %"$r", null
  %"!(bool)r" = xor i1 %"(bool)r", true
  br i1 %"!(bool)r", label %if.then, label %if.else

if.then:                                          ; preds = %start
  %8 = call ptr @_const_Leaf()
  store ptr %8, ptr %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.end3, %if.then
  %"$136" = load ptr, ptr %4, align 8
  ret ptr %"$136"

if.else:                                          ; preds = %start
  %"$r1" = load ptr, ptr %r, align 8
  %r.tag = getelementptr inbounds %tree, ptr %"$r1", i32 0, i32 0
  %"$r.tag" = load i32, ptr %r.tag, align 4
  %"r==6" = icmp eq i32 %"$r.tag", 6
  br i1 %"r==6", label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.else
  %"$r4" = load ptr, ptr %r, align 8
  %"r.[1]" = getelementptr inbounds %Node, ptr %"$r4", i32 0, i32 1
  %"$r.[1]" = load i32, ptr %"r.[1]", align 4
  store i32 %"$r.[1]", ptr %c, align 4
  %"$r5" = load ptr, ptr %r, align 8
  %"r.[2]" = getelementptr inbounds %Node, ptr %"$r5", i32 0, i32 2
  %"$r.[2]" = load ptr, ptr %"r.[2]", align 8
  store ptr %"$r.[2]", ptr %ly, align 8
  %"$r6" = load ptr, ptr %r, align 8
  %"r.[3]" = getelementptr inbounds %Node, ptr %"$r6", i32 0, i32 3
  %"$r.[3]" = load ptr, ptr %"r.[3]", align 8
  store ptr %"$r.[3]", ptr %ky, align 8
  %"$r7" = load ptr, ptr %r, align 8
  %"r.[4]" = getelementptr inbounds %Node, ptr %"$r7", i32 0, i32 4
  %"$r.[4]" = load i1, ptr %"r.[4]", align 1
  store i1 %"$r.[4]", ptr %vy, align 1
  %"$r8" = load ptr, ptr %r, align 8
  %"r.[5]" = getelementptr inbounds %Node, ptr %"$r8", i32 0, i32 5
  %"$r.[5]" = load ptr, ptr %"r.[5]", align 8
  store ptr %"$r.[5]", ptr %ry, align 8
  %"$ly" = load ptr, ptr %ly, align 8
  %"(bool)ly" = icmp ne ptr %"$ly", null
  %"!(bool)ly" = xor i1 %"(bool)ly", true
  br i1 %"!(bool)ly", label %if.then9, label %if.else40

if.end3:                                          ; preds = %if.end10, %if.else
  br label %if.end

if.then9:                                         ; preds = %if.then2
  %"$ry" = load ptr, ptr %ry, align 8
  %"(bool)ry" = icmp ne ptr %"$ry", null
  %"!(bool)ry" = xor i1 %"(bool)ry", true
  br i1 %"!(bool)ry", label %if.then11, label %if.else15

if.end10:                                         ; preds = %if.end43, %if.end12
  %"$135" = load ptr, ptr %5, align 8
  store ptr %"$135", ptr %4, align 8
  br label %if.end3

if.then11:                                        ; preds = %if.then9
  %"$ly13" = load ptr, ptr %ly, align 8
  %"$ky" = load ptr, ptr %ky, align 8
  %"$vy" = load i1, ptr %vy, align 1
  %"$ry14" = load ptr, ptr %ry, align 8
  %9 = call ptr @_const_Node(i32 1, ptr %"$ly13", ptr %"$ky", i1 %"$vy", ptr %"$ry14")
  %"$l" = load ptr, ptr %l, align 8
  %"$k" = load ptr, ptr %k, align 8
  %"$v" = load i1, ptr %v, align 1
  %10 = call ptr @_const_Node(i32 0, ptr %"$l", ptr %"$k", i1 %"$v", ptr %9)
  store ptr %10, ptr %6, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.end18, %if.then11
  %"$" = load ptr, ptr %6, align 8
  store ptr %"$", ptr %5, align 8
  br label %if.end10

if.else15:                                        ; preds = %if.then9
  %"$ry16" = load ptr, ptr %ry, align 8
  %ry.tag = getelementptr inbounds %tree, ptr %"$ry16", i32 0, i32 0
  %"$ry.tag" = load i32, ptr %ry.tag, align 4
  %"ry==6" = icmp eq i32 %"$ry.tag", 6
  br i1 %"ry==6", label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.else15
  %"$ry19" = load ptr, ptr %ry, align 8
  %"ry.[1]" = getelementptr inbounds %Node, ptr %"$ry19", i32 0, i32 1
  %"$ry.[1]" = load i32, ptr %"ry.[1]", align 4
  store i32 %"$ry.[1]", ptr %cc, align 4
  %"$ry20" = load ptr, ptr %ry, align 8
  %"ry.[2]" = getelementptr inbounds %Node, ptr %"$ry20", i32 0, i32 2
  %"$ry.[2]" = load ptr, ptr %"ry.[2]", align 8
  store ptr %"$ry.[2]", ptr %lx, align 8
  %"$ry21" = load ptr, ptr %ry, align 8
  %"ry.[3]" = getelementptr inbounds %Node, ptr %"$ry21", i32 0, i32 3
  %"$ry.[3]" = load ptr, ptr %"ry.[3]", align 8
  store ptr %"$ry.[3]", ptr %kx, align 8
  %"$ry22" = load ptr, ptr %ry, align 8
  %"ry.[4]" = getelementptr inbounds %Node, ptr %"$ry22", i32 0, i32 4
  %"$ry.[4]" = load i1, ptr %"ry.[4]", align 1
  store i1 %"$ry.[4]", ptr %vx, align 1
  %"$ry23" = load ptr, ptr %ry, align 8
  %"ry.[5]" = getelementptr inbounds %Node, ptr %"$ry23", i32 0, i32 5
  %"$ry.[5]" = load ptr, ptr %"ry.[5]", align 8
  store ptr %"$ry.[5]", ptr %rx, align 8
  %"$cc" = load i32, ptr %cc, align 4
  %"cc==1" = icmp eq i32 %"$cc", 1
  br i1 %"cc==1", label %if.then24, label %if.else32

if.end18:                                         ; preds = %if.end25, %if.else15
  br label %if.end12

if.then24:                                        ; preds = %if.then17
  %"$l26" = load ptr, ptr %l, align 8
  %"$k27" = load ptr, ptr %k, align 8
  %"$v28" = load i1, ptr %v, align 1
  %"$ly29" = load ptr, ptr %ly, align 8
  %11 = call ptr @_const_Node(i32 0, ptr %"$l26", ptr %"$k27", i1 %"$v28", ptr %"$ly29")
  %"$lx" = load ptr, ptr %lx, align 8
  %"$kx" = load ptr, ptr %kx, align 8
  %"$vx" = load i1, ptr %vx, align 1
  %"$rx" = load ptr, ptr %rx, align 8
  %12 = call ptr @_const_Node(i32 0, ptr %"$lx", ptr %"$kx", i1 %"$vx", ptr %"$rx")
  %"$ky30" = load ptr, ptr %ky, align 8
  %"$vy31" = load i1, ptr %vy, align 1
  %13 = call ptr @_const_Node(i32 1, ptr %11, ptr %"$ky30", i1 %"$vy31", ptr %12)
  store ptr %13, ptr %_result, align 8
  br label %if.end25

if.end25:                                         ; preds = %if.else32, %if.then24
  %"$_result" = load ptr, ptr %_result, align 8
  store ptr %"$_result", ptr %6, align 8
  br label %if.end18

if.else32:                                        ; preds = %if.then17
  %"$ly33" = load ptr, ptr %ly, align 8
  %"$ky34" = load ptr, ptr %ky, align 8
  %"$vy35" = load i1, ptr %vy, align 1
  %"$ry36" = load ptr, ptr %ry, align 8
  %14 = call ptr @_const_Node(i32 1, ptr %"$ly33", ptr %"$ky34", i1 %"$vy35", ptr %"$ry36")
  %"$l37" = load ptr, ptr %l, align 8
  %"$k38" = load ptr, ptr %k, align 8
  %"$v39" = load i1, ptr %v, align 1
  %15 = call ptr @_const_Node(i32 0, ptr %"$l37", ptr %"$k38", i1 %"$v39", ptr %14)
  store ptr %15, ptr %_result, align 8
  br label %if.end25

if.else40:                                        ; preds = %if.then2
  %"$ly41" = load ptr, ptr %ly, align 8
  %ly.tag = getelementptr inbounds %tree, ptr %"$ly41", i32 0, i32 0
  %"$ly.tag" = load i32, ptr %ly.tag, align 4
  %"ly==6" = icmp eq i32 %"$ly.tag", 6
  br i1 %"ly==6", label %if.then42, label %if.end43

if.then42:                                        ; preds = %if.else40
  %"$ly45" = load ptr, ptr %ly, align 8
  %"ly.[1]" = getelementptr inbounds %Node, ptr %"$ly45", i32 0, i32 1
  %"$ly.[1]" = load i32, ptr %"ly.[1]", align 4
  store i32 %"$ly.[1]", ptr %cc44, align 4
  %"$ly47" = load ptr, ptr %ly, align 8
  %"ly.[2]" = getelementptr inbounds %Node, ptr %"$ly47", i32 0, i32 2
  %"$ly.[2]" = load ptr, ptr %"ly.[2]", align 8
  store ptr %"$ly.[2]", ptr %lx46, align 8
  %"$ly49" = load ptr, ptr %ly, align 8
  %"ly.[3]" = getelementptr inbounds %Node, ptr %"$ly49", i32 0, i32 3
  %"$ly.[3]" = load ptr, ptr %"ly.[3]", align 8
  store ptr %"$ly.[3]", ptr %kx48, align 8
  %"$ly51" = load ptr, ptr %ly, align 8
  %"ly.[4]" = getelementptr inbounds %Node, ptr %"$ly51", i32 0, i32 4
  %"$ly.[4]" = load i1, ptr %"ly.[4]", align 1
  store i1 %"$ly.[4]", ptr %vx50, align 1
  %"$ly53" = load ptr, ptr %ly, align 8
  %"ly.[5]" = getelementptr inbounds %Node, ptr %"$ly53", i32 0, i32 5
  %"$ly.[5]" = load ptr, ptr %"ly.[5]", align 8
  store ptr %"$ly.[5]", ptr %rx52, align 8
  %"$cc54" = load i32, ptr %cc44, align 4
  %"cc==155" = icmp eq i32 %"$cc54", 1
  br i1 %"cc==155", label %if.then56, label %if.else69

if.end43:                                         ; preds = %if.end57, %if.else40
  br label %if.end10

if.then56:                                        ; preds = %if.then42
  %"$l59" = load ptr, ptr %l, align 8
  %"$k60" = load ptr, ptr %k, align 8
  %"$v61" = load i1, ptr %v, align 1
  %"$lx62" = load ptr, ptr %lx46, align 8
  %16 = call ptr @_const_Node(i32 0, ptr %"$l59", ptr %"$k60", i1 %"$v61", ptr %"$lx62")
  %"$rx63" = load ptr, ptr %rx52, align 8
  %"$ky64" = load ptr, ptr %ky, align 8
  %"$vy65" = load i1, ptr %vy, align 1
  %"$ry66" = load ptr, ptr %ry, align 8
  %17 = call ptr @_const_Node(i32 0, ptr %"$rx63", ptr %"$ky64", i1 %"$vy65", ptr %"$ry66")
  %"$kx67" = load ptr, ptr %kx48, align 8
  %"$vx68" = load i1, ptr %vx50, align 1
  %18 = call ptr @_const_Node(i32 1, ptr %16, ptr %"$kx67", i1 %"$vx68", ptr %17)
  store ptr %18, ptr %_result58, align 8
  br label %if.end57

if.end57:                                         ; preds = %if.end74, %if.then56
  %"$_result134" = load ptr, ptr %_result58, align 8
  store ptr %"$_result134", ptr %5, align 8
  br label %if.end43

if.else69:                                        ; preds = %if.then42
  %"$ry70" = load ptr, ptr %ry, align 8
  %"(bool)ry71" = icmp ne ptr %"$ry70", null
  %"!(bool)ry72" = xor i1 %"(bool)ry71", true
  br i1 %"!(bool)ry72", label %if.then73, label %if.else82

if.then73:                                        ; preds = %if.else69
  %"$ly75" = load ptr, ptr %ly, align 8
  %"$ky76" = load ptr, ptr %ky, align 8
  %"$vy77" = load i1, ptr %vy, align 1
  %"$ry78" = load ptr, ptr %ry, align 8
  %19 = call ptr @_const_Node(i32 1, ptr %"$ly75", ptr %"$ky76", i1 %"$vy77", ptr %"$ry78")
  %"$l79" = load ptr, ptr %l, align 8
  %"$k80" = load ptr, ptr %k, align 8
  %"$v81" = load i1, ptr %v, align 1
  %20 = call ptr @_const_Node(i32 0, ptr %"$l79", ptr %"$k80", i1 %"$v81", ptr %19)
  store ptr %20, ptr %7, align 8
  br label %if.end74

if.end74:                                         ; preds = %if.end88, %if.then73
  %"$133" = load ptr, ptr %7, align 8
  store ptr %"$133", ptr %_result58, align 8
  br label %if.end57

if.else82:                                        ; preds = %if.else69
  %"$ry83" = load ptr, ptr %ry, align 8
  %ry.tag84 = getelementptr inbounds %tree, ptr %"$ry83", i32 0, i32 0
  %"$ry.tag85" = load i32, ptr %ry.tag84, align 4
  %"ry==686" = icmp eq i32 %"$ry.tag85", 6
  br i1 %"ry==686", label %if.then87, label %if.end88

if.then87:                                        ; preds = %if.else82
  %"$ry90" = load ptr, ptr %ry, align 8
  %"ry.[1]91" = getelementptr inbounds %Node, ptr %"$ry90", i32 0, i32 1
  %"$ry.[1]92" = load i32, ptr %"ry.[1]91", align 4
  store i32 %"$ry.[1]92", ptr %cc89, align 4
  %"$ry94" = load ptr, ptr %ry, align 8
  %"ry.[2]95" = getelementptr inbounds %Node, ptr %"$ry94", i32 0, i32 2
  %"$ry.[2]96" = load ptr, ptr %"ry.[2]95", align 8
  store ptr %"$ry.[2]96", ptr %lx93, align 8
  %"$ry98" = load ptr, ptr %ry, align 8
  %"ry.[3]99" = getelementptr inbounds %Node, ptr %"$ry98", i32 0, i32 3
  %"$ry.[3]100" = load ptr, ptr %"ry.[3]99", align 8
  store ptr %"$ry.[3]100", ptr %kx97, align 8
  %"$ry102" = load ptr, ptr %ry, align 8
  %"ry.[4]103" = getelementptr inbounds %Node, ptr %"$ry102", i32 0, i32 4
  %"$ry.[4]104" = load i1, ptr %"ry.[4]103", align 1
  store i1 %"$ry.[4]104", ptr %vx101, align 1
  %"$ry106" = load ptr, ptr %ry, align 8
  %"ry.[5]107" = getelementptr inbounds %Node, ptr %"$ry106", i32 0, i32 5
  %"$ry.[5]108" = load ptr, ptr %"ry.[5]107", align 8
  store ptr %"$ry.[5]108", ptr %rx105, align 8
  %"$cc109" = load i32, ptr %cc89, align 4
  %"cc==1110" = icmp eq i32 %"$cc109", 1
  br i1 %"cc==1110", label %if.then111, label %if.else124

if.end88:                                         ; preds = %if.end112, %if.else82
  br label %if.end74

if.then111:                                       ; preds = %if.then87
  %"$l114" = load ptr, ptr %l, align 8
  %"$k115" = load ptr, ptr %k, align 8
  %"$v116" = load i1, ptr %v, align 1
  %"$ly117" = load ptr, ptr %ly, align 8
  %21 = call ptr @_const_Node(i32 0, ptr %"$l114", ptr %"$k115", i1 %"$v116", ptr %"$ly117")
  %"$lx118" = load ptr, ptr %lx93, align 8
  %"$kx119" = load ptr, ptr %kx97, align 8
  %"$vx120" = load i1, ptr %vx101, align 1
  %"$rx121" = load ptr, ptr %rx105, align 8
  %22 = call ptr @_const_Node(i32 0, ptr %"$lx118", ptr %"$kx119", i1 %"$vx120", ptr %"$rx121")
  %"$ky122" = load ptr, ptr %ky, align 8
  %"$vy123" = load i1, ptr %vy, align 1
  %23 = call ptr @_const_Node(i32 1, ptr %21, ptr %"$ky122", i1 %"$vy123", ptr %22)
  store ptr %23, ptr %_result113, align 8
  br label %if.end112

if.end112:                                        ; preds = %if.else124, %if.then111
  %"$_result132" = load ptr, ptr %_result113, align 8
  store ptr %"$_result132", ptr %7, align 8
  br label %if.end88

if.else124:                                       ; preds = %if.then87
  %"$ly125" = load ptr, ptr %ly, align 8
  %"$ky126" = load ptr, ptr %ky, align 8
  %"$vy127" = load i1, ptr %vy, align 1
  %"$ry128" = load ptr, ptr %ry, align 8
  %24 = call ptr @_const_Node(i32 1, ptr %"$ly125", ptr %"$ky126", i1 %"$vy127", ptr %"$ry128")
  %"$l129" = load ptr, ptr %l, align 8
  %"$k130" = load ptr, ptr %k, align 8
  %"$v131" = load i1, ptr %v, align 1
  %25 = call ptr @_const_Node(i32 0, ptr %"$l129", ptr %"$k130", i1 %"$v131", ptr %24)
  store ptr %25, ptr %_result113, align 8
  br label %if.end112
}

define ptr @ins(ptr %0, ptr %1, i1 %2) {
prolog:
  %t = alloca ptr, align 8
  store ptr %0, ptr %t, align 8
  %k = alloca ptr, align 8
  store ptr %1, ptr %k, align 8
  %v = alloca i1, align 1
  store i1 %2, ptr %v, align 1
  %3 = alloca ptr, align 8
  %c = alloca i32, align 4
  %l = alloca ptr, align 8
  %kx = alloca ptr, align 8
  %vx = alloca i1, align 1
  %r = alloca ptr, align 8
  %_result = alloca ptr, align 8
  %_result14 = alloca ptr, align 8
  %_result23 = alloca ptr, align 8
  %_result42 = alloca ptr, align 8
  %_result46 = alloca ptr, align 8
  %_result67 = alloca ptr, align 8
  %_result71 = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$t" = load ptr, ptr %t, align 8
  %"(bool)t" = icmp ne ptr %"$t", null
  %"!(bool)t" = xor i1 %"(bool)t", true
  br i1 %"!(bool)t", label %if.then, label %if.else

if.then:                                          ; preds = %start
  %4 = call ptr @_const_Leaf()
  %5 = call ptr @_const_Leaf()
  %"$k" = load ptr, ptr %k, align 8
  %"$v" = load i1, ptr %v, align 1
  %6 = call ptr @_const_Node(i32 1, ptr %4, ptr %"$k", i1 %"$v", ptr %5)
  store ptr %6, ptr %3, align 8
  br label %if.end

if.end:                                           ; preds = %if.end3, %if.then
  %"$" = load ptr, ptr %3, align 8
  ret ptr %"$"

if.else:                                          ; preds = %start
  %"$t1" = load ptr, ptr %t, align 8
  %t.tag = getelementptr inbounds %tree, ptr %"$t1", i32 0, i32 0
  %"$t.tag" = load i32, ptr %t.tag, align 4
  %"t==6" = icmp eq i32 %"$t.tag", 6
  br i1 %"t==6", label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.else
  %"$t4" = load ptr, ptr %t, align 8
  %"t.[1]" = getelementptr inbounds %Node, ptr %"$t4", i32 0, i32 1
  %"$t.[1]" = load i32, ptr %"t.[1]", align 4
  store i32 %"$t.[1]", ptr %c, align 4
  %"$t5" = load ptr, ptr %t, align 8
  %"t.[2]" = getelementptr inbounds %Node, ptr %"$t5", i32 0, i32 2
  %"$t.[2]" = load ptr, ptr %"t.[2]", align 8
  store ptr %"$t.[2]", ptr %l, align 8
  %"$t6" = load ptr, ptr %t, align 8
  %"t.[3]" = getelementptr inbounds %Node, ptr %"$t6", i32 0, i32 3
  %"$t.[3]" = load ptr, ptr %"t.[3]", align 8
  store ptr %"$t.[3]", ptr %kx, align 8
  %"$t7" = load ptr, ptr %t, align 8
  %"t.[4]" = getelementptr inbounds %Node, ptr %"$t7", i32 0, i32 4
  %"$t.[4]" = load i1, ptr %"t.[4]", align 1
  store i1 %"$t.[4]", ptr %vx, align 1
  %"$t8" = load ptr, ptr %t, align 8
  %"t.[5]" = getelementptr inbounds %Node, ptr %"$t8", i32 0, i32 5
  %"$t.[5]" = load ptr, ptr %"t.[5]", align 8
  store ptr %"$t.[5]", ptr %r, align 8
  %"$c" = load i32, ptr %c, align 4
  %"c==1" = icmp eq i32 %"$c", 1
  br i1 %"c==1", label %if.then9, label %if.else36

if.end3:                                          ; preds = %if.end10, %if.else
  br label %if.end

if.then9:                                         ; preds = %if.then2
  %"$k11" = load ptr, ptr %k, align 8
  %7 = call i32 @_int(ptr %"$k11")
  %"$kx" = load ptr, ptr %kx, align 8
  %8 = call i32 @_int(ptr %"$kx")
  %"_int_call<_int_call" = icmp slt i32 %7, %8
  br i1 %"_int_call<_int_call", label %if.then12, label %if.else18

if.end10:                                         ; preds = %if.end41, %if.end13
  %"$_result93" = load ptr, ptr %_result, align 8
  store ptr %"$_result93", ptr %3, align 8
  br label %if.end3

if.then12:                                        ; preds = %if.then9
  %"$l" = load ptr, ptr %l, align 8
  %"$k15" = load ptr, ptr %k, align 8
  %"$v16" = load i1, ptr %v, align 1
  %9 = call ptr @ins(ptr %"$l", ptr %"$k15", i1 %"$v16")
  %"$kx17" = load ptr, ptr %kx, align 8
  %"$vx" = load i1, ptr %vx, align 1
  %"$r" = load ptr, ptr %r, align 8
  %10 = call ptr @_const_Node(i32 1, ptr %9, ptr %"$kx17", i1 %"$vx", ptr %"$r")
  store ptr %10, ptr %_result14, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.end22, %if.then12
  %"$_result35" = load ptr, ptr %_result14, align 8
  store ptr %"$_result35", ptr %_result, align 8
  br label %if.end10

if.else18:                                        ; preds = %if.then9
  %"$k19" = load ptr, ptr %k, align 8
  %11 = call i32 @_int(ptr %"$k19")
  %"$kx20" = load ptr, ptr %kx, align 8
  %12 = call i32 @_int(ptr %"$kx20")
  %"_int_call>_int_call" = icmp sgt i32 %11, %12
  br i1 %"_int_call>_int_call", label %if.then21, label %if.else30

if.then21:                                        ; preds = %if.else18
  %"$r24" = load ptr, ptr %r, align 8
  %"$k25" = load ptr, ptr %k, align 8
  %"$v26" = load i1, ptr %v, align 1
  %13 = call ptr @ins(ptr %"$r24", ptr %"$k25", i1 %"$v26")
  %"$l27" = load ptr, ptr %l, align 8
  %"$kx28" = load ptr, ptr %kx, align 8
  %"$vx29" = load i1, ptr %vx, align 1
  %14 = call ptr @_const_Node(i32 1, ptr %"$l27", ptr %"$kx28", i1 %"$vx29", ptr %13)
  store ptr %14, ptr %_result23, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.else30, %if.then21
  %"$_result" = load ptr, ptr %_result23, align 8
  store ptr %"$_result", ptr %_result14, align 8
  br label %if.end13

if.else30:                                        ; preds = %if.else18
  %"$l31" = load ptr, ptr %l, align 8
  %"$k32" = load ptr, ptr %k, align 8
  %"$v33" = load i1, ptr %v, align 1
  %"$r34" = load ptr, ptr %r, align 8
  %15 = call ptr @_const_Node(i32 1, ptr %"$l31", ptr %"$k32", i1 %"$v33", ptr %"$r34")
  store ptr %15, ptr %_result23, align 8
  br label %if.end22

if.else36:                                        ; preds = %if.then2
  %"$k37" = load ptr, ptr %k, align 8
  %16 = call i32 @_int(ptr %"$k37")
  %"$kx38" = load ptr, ptr %kx, align 8
  %17 = call i32 @_int(ptr %"$kx38")
  %"_int_call<_int_call39" = icmp slt i32 %16, %17
  br i1 %"_int_call<_int_call39", label %if.then40, label %if.else61

if.then40:                                        ; preds = %if.else36
  %"$l43" = load ptr, ptr %l, align 8
  %18 = call i1 @is_red(ptr %"$l43")
  br i1 %18, label %if.then44, label %if.else53

if.end41:                                         ; preds = %if.end66, %if.end45
  %"$_result92" = load ptr, ptr %_result42, align 8
  store ptr %"$_result92", ptr %_result, align 8
  br label %if.end10

if.then44:                                        ; preds = %if.then40
  %"$l47" = load ptr, ptr %l, align 8
  %"$k48" = load ptr, ptr %k, align 8
  %"$v49" = load i1, ptr %v, align 1
  %19 = call ptr @ins(ptr %"$l47", ptr %"$k48", i1 %"$v49")
  %"$kx50" = load ptr, ptr %kx, align 8
  %"$vx51" = load i1, ptr %vx, align 1
  %"$r52" = load ptr, ptr %r, align 8
  %20 = call ptr @balance_left(ptr %19, ptr %"$kx50", i1 %"$vx51", ptr %"$r52")
  store ptr %20, ptr %_result46, align 8
  br label %if.end45

if.end45:                                         ; preds = %if.else53, %if.then44
  %"$_result60" = load ptr, ptr %_result46, align 8
  store ptr %"$_result60", ptr %_result42, align 8
  br label %if.end41

if.else53:                                        ; preds = %if.then40
  %"$l54" = load ptr, ptr %l, align 8
  %"$k55" = load ptr, ptr %k, align 8
  %"$v56" = load i1, ptr %v, align 1
  %21 = call ptr @ins(ptr %"$l54", ptr %"$k55", i1 %"$v56")
  %"$kx57" = load ptr, ptr %kx, align 8
  %"$vx58" = load i1, ptr %vx, align 1
  %"$r59" = load ptr, ptr %r, align 8
  %22 = call ptr @_const_Node(i32 0, ptr %21, ptr %"$kx57", i1 %"$vx58", ptr %"$r59")
  store ptr %22, ptr %_result46, align 8
  br label %if.end45

if.else61:                                        ; preds = %if.else36
  %"$k62" = load ptr, ptr %k, align 8
  %23 = call i32 @_int(ptr %"$k62")
  %"$kx63" = load ptr, ptr %kx, align 8
  %24 = call i32 @_int(ptr %"$kx63")
  %"_int_call>_int_call64" = icmp sgt i32 %23, %24
  br i1 %"_int_call>_int_call64", label %if.then65, label %if.else86

if.then65:                                        ; preds = %if.else61
  %"$r68" = load ptr, ptr %r, align 8
  %25 = call i1 @is_red(ptr %"$r68")
  br i1 %25, label %if.then69, label %if.else78

if.end66:                                         ; preds = %if.else86, %if.end70
  %"$_result91" = load ptr, ptr %_result67, align 8
  store ptr %"$_result91", ptr %_result42, align 8
  br label %if.end41

if.then69:                                        ; preds = %if.then65
  %"$r72" = load ptr, ptr %r, align 8
  %"$k73" = load ptr, ptr %k, align 8
  %"$v74" = load i1, ptr %v, align 1
  %26 = call ptr @ins(ptr %"$r72", ptr %"$k73", i1 %"$v74")
  %"$l75" = load ptr, ptr %l, align 8
  %"$kx76" = load ptr, ptr %kx, align 8
  %"$vx77" = load i1, ptr %vx, align 1
  %27 = call ptr @balance_right(ptr %"$l75", ptr %"$kx76", i1 %"$vx77", ptr %26)
  store ptr %27, ptr %_result71, align 8
  br label %if.end70

if.end70:                                         ; preds = %if.else78, %if.then69
  %"$_result85" = load ptr, ptr %_result71, align 8
  store ptr %"$_result85", ptr %_result67, align 8
  br label %if.end66

if.else78:                                        ; preds = %if.then65
  %"$r79" = load ptr, ptr %r, align 8
  %"$k80" = load ptr, ptr %k, align 8
  %"$v81" = load i1, ptr %v, align 1
  %28 = call ptr @ins(ptr %"$r79", ptr %"$k80", i1 %"$v81")
  %"$l82" = load ptr, ptr %l, align 8
  %"$kx83" = load ptr, ptr %kx, align 8
  %"$vx84" = load i1, ptr %vx, align 1
  %29 = call ptr @_const_Node(i32 0, ptr %"$l82", ptr %"$kx83", i1 %"$vx84", ptr %28)
  store ptr %29, ptr %_result71, align 8
  br label %if.end70

if.else86:                                        ; preds = %if.else61
  %"$l87" = load ptr, ptr %l, align 8
  %"$k88" = load ptr, ptr %k, align 8
  %"$v89" = load i1, ptr %v, align 1
  %"$r90" = load ptr, ptr %r, align 8
  %30 = call ptr @_const_Node(i32 0, ptr %"$l87", ptr %"$k88", i1 %"$v89", ptr %"$r90")
  store ptr %30, ptr %_result67, align 8
  br label %if.end66
}

define ptr @set_black(ptr %0) {
prolog:
  %t = alloca ptr, align 8
  store ptr %0, ptr %t, align 8
  %1 = alloca ptr, align 8
  %c = alloca i32, align 4
  %l = alloca ptr, align 8
  %k = alloca ptr, align 8
  %v = alloca i1, align 1
  %r = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$t" = load ptr, ptr %t, align 8
  %"(bool)t" = icmp ne ptr %"$t", null
  %"!(bool)t" = xor i1 %"(bool)t", true
  br i1 %"!(bool)t", label %if.then, label %if.else

if.then:                                          ; preds = %start
  %"$t1" = load ptr, ptr %t, align 8
  store ptr %"$t1", ptr %1, align 8
  br label %if.end

if.end:                                           ; preds = %if.end4, %if.then
  %"$" = load ptr, ptr %1, align 8
  ret ptr %"$"

if.else:                                          ; preds = %start
  %"$t2" = load ptr, ptr %t, align 8
  %t.tag = getelementptr inbounds %tree, ptr %"$t2", i32 0, i32 0
  %"$t.tag" = load i32, ptr %t.tag, align 4
  %"t==6" = icmp eq i32 %"$t.tag", 6
  br i1 %"t==6", label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.else
  %"$t5" = load ptr, ptr %t, align 8
  %"t.[1]" = getelementptr inbounds %Node, ptr %"$t5", i32 0, i32 1
  %"$t.[1]" = load i32, ptr %"t.[1]", align 4
  store i32 %"$t.[1]", ptr %c, align 4
  %"$t6" = load ptr, ptr %t, align 8
  %"t.[2]" = getelementptr inbounds %Node, ptr %"$t6", i32 0, i32 2
  %"$t.[2]" = load ptr, ptr %"t.[2]", align 8
  store ptr %"$t.[2]", ptr %l, align 8
  %"$t7" = load ptr, ptr %t, align 8
  %"t.[3]" = getelementptr inbounds %Node, ptr %"$t7", i32 0, i32 3
  %"$t.[3]" = load ptr, ptr %"t.[3]", align 8
  store ptr %"$t.[3]", ptr %k, align 8
  %"$t8" = load ptr, ptr %t, align 8
  %"t.[4]" = getelementptr inbounds %Node, ptr %"$t8", i32 0, i32 4
  %"$t.[4]" = load i1, ptr %"t.[4]", align 1
  store i1 %"$t.[4]", ptr %v, align 1
  %"$t9" = load ptr, ptr %t, align 8
  %"t.[5]" = getelementptr inbounds %Node, ptr %"$t9", i32 0, i32 5
  %"$t.[5]" = load ptr, ptr %"t.[5]", align 8
  store ptr %"$t.[5]", ptr %r, align 8
  %"$l" = load ptr, ptr %l, align 8
  %"$k" = load ptr, ptr %k, align 8
  %"$v" = load i1, ptr %v, align 1
  %"$r" = load ptr, ptr %r, align 8
  %2 = call ptr @_const_Node(i32 0, ptr %"$l", ptr %"$k", i1 %"$v", ptr %"$r")
  store ptr %2, ptr %1, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %if.else
  br label %if.end
}

define ptr @insert(ptr %0, ptr %1, i1 %2) {
prolog:
  %t = alloca ptr, align 8
  store ptr %0, ptr %t, align 8
  %k = alloca ptr, align 8
  store ptr %1, ptr %k, align 8
  %v = alloca i1, align 1
  store i1 %2, ptr %v, align 1
  br label %start

start:                                            ; preds = %prolog
  %"$t" = load ptr, ptr %t, align 8
  %"$k" = load ptr, ptr %k, align 8
  %"$v" = load i1, ptr %v, align 1
  %3 = call ptr @ins(ptr %"$t", ptr %"$k", i1 %"$v")
  %4 = call ptr @set_black(ptr %3)
  ret ptr %4
}

define ptr @_const_Cons(i32 %0, ptr %1) {
prolog:
  %i = alloca i32, align 4
  store i32 %0, ptr %i, align 4
  %l = alloca ptr, align 8
  store ptr %1, ptr %l, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @ckrt_malloc(i32 24)
  store ptr %2, ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Cons, ptr %"$_result", i32 0, i32 0
  store i32 8, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Cons, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.i = getelementptr inbounds %Cons, ptr %"$_result3", i32 0, i32 1
  %"$i" = load i32, ptr %i, align 4
  store i32 %"$i", ptr %_result.i, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.l = getelementptr inbounds %Cons, ptr %"$_result4", i32 0, i32 2
  %"$l" = load ptr, ptr %l, align 8
  store ptr %"$l", ptr %_result.l, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_reuse_Cons(ptr %0, i32 %1, ptr %2) {
prolog:
  %"@ru" = alloca ptr, align 8
  store ptr %0, ptr %"@ru", align 8
  %i = alloca i32, align 4
  store i32 %1, ptr %i, align 4
  %l = alloca ptr, align 8
  store ptr %2, ptr %l, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$@ru" = load ptr, ptr %"@ru", align 8
  store ptr %"$@ru", ptr %_result, align 8
  %"$_result" = load ptr, ptr %_result, align 8
  %_result._tag = getelementptr inbounds %Cons, ptr %"$_result", i32 0, i32 0
  store i32 8, ptr %_result._tag, align 4
  %"$_result1" = load ptr, ptr %_result, align 8
  %_result._tag2 = getelementptr inbounds %Cons, ptr %"$_result1", i32 0, i32 0
  %"$_result3" = load ptr, ptr %_result, align 8
  %_result.i = getelementptr inbounds %Cons, ptr %"$_result3", i32 0, i32 1
  %"$i" = load i32, ptr %i, align 4
  store i32 %"$i", ptr %_result.i, align 4
  %"$_result4" = load ptr, ptr %_result, align 8
  %_result.l = getelementptr inbounds %Cons, ptr %"$_result4", i32 0, i32 2
  %"$l" = load ptr, ptr %l, align 8
  store ptr %"$l", ptr %_result.l, align 8
  %"$_result5" = load ptr, ptr %_result, align 8
  ret ptr %"$_result5"
}

define ptr @_const_Nil() {
prolog:
  br label %start

start:                                            ; preds = %prolog
  ret ptr null
}

define ptr @_list_concat(ptr %0, ptr %1, ptr %2) {
prolog:
  %a = alloca ptr, align 8
  store ptr %0, ptr %a, align 8
  %b = alloca ptr, align 8
  store ptr %1, ptr %b, align 8
  %res = alloca ptr, align 8
  store ptr %2, ptr %res, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %i = alloca i32, align 4
  %na = alloca ptr, align 8
  %i14 = alloca i32, align 4
  %nb = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$b" = load ptr, ptr %b, align 8
  %"(bool)b" = icmp ne ptr %"$b", null
  %"!(bool)b" = xor i1 %"(bool)b", true
  br i1 %"!(bool)b", label %if.then, label %if.else10

if.then:                                          ; preds = %start
  %"$a" = load ptr, ptr %a, align 8
  %"(bool)a" = icmp ne ptr %"$a", null
  %"!(bool)a" = xor i1 %"(bool)a", true
  br i1 %"!(bool)a", label %if.then1, label %if.else

if.end:                                           ; preds = %if.end13, %if.end2
  %"$21" = load ptr, ptr %3, align 8
  ret ptr %"$21"

if.then1:                                         ; preds = %if.then
  %"$res" = load ptr, ptr %res, align 8
  store ptr %"$res", ptr %4, align 8
  br label %if.end2

if.end2:                                          ; preds = %if.end5, %if.then1
  %"$" = load ptr, ptr %4, align 8
  store ptr %"$", ptr %3, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %"$a3" = load ptr, ptr %a, align 8
  %a.tag = getelementptr inbounds %list, ptr %"$a3", i32 0, i32 0
  %"$a.tag" = load i32, ptr %a.tag, align 4
  %"a==8" = icmp eq i32 %"$a.tag", 8
  br i1 %"a==8", label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.else
  %"$a6" = load ptr, ptr %a, align 8
  %"a.[1]" = getelementptr inbounds %Cons, ptr %"$a6", i32 0, i32 1
  %"$a.[1]" = load i32, ptr %"a.[1]", align 4
  store i32 %"$a.[1]", ptr %i, align 4
  %"$a7" = load ptr, ptr %a, align 8
  %"a.[2]" = getelementptr inbounds %Cons, ptr %"$a7", i32 0, i32 2
  %"$a.[2]" = load ptr, ptr %"a.[2]", align 8
  store ptr %"$a.[2]", ptr %na, align 8
  %5 = call ptr @_const_Nil()
  %"$a8" = load ptr, ptr %a, align 8
  %"$i" = load i32, ptr %i, align 4
  %"$res9" = load ptr, ptr %res, align 8
  %6 = call ptr @_reuse_Cons(ptr %"$a8", i32 %"$i", ptr %"$res9")
  %"$na" = load ptr, ptr %na, align 8
  %7 = call ptr @_list_concat(ptr %"$na", ptr %5, ptr %6)
  store ptr %7, ptr %4, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.else
  br label %if.end2

if.else10:                                        ; preds = %start
  %"$b11" = load ptr, ptr %b, align 8
  %b.tag = getelementptr inbounds %list, ptr %"$b11", i32 0, i32 0
  %"$b.tag" = load i32, ptr %b.tag, align 4
  %"b==8" = icmp eq i32 %"$b.tag", 8
  br i1 %"b==8", label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.else10
  %"$b15" = load ptr, ptr %b, align 8
  %"b.[1]" = getelementptr inbounds %Cons, ptr %"$b15", i32 0, i32 1
  %"$b.[1]" = load i32, ptr %"b.[1]", align 4
  store i32 %"$b.[1]", ptr %i14, align 4
  %"$b16" = load ptr, ptr %b, align 8
  %"b.[2]" = getelementptr inbounds %Cons, ptr %"$b16", i32 0, i32 2
  %"$b.[2]" = load ptr, ptr %"b.[2]", align 8
  store ptr %"$b.[2]", ptr %nb, align 8
  %"$b17" = load ptr, ptr %b, align 8
  %"$i18" = load i32, ptr %i14, align 4
  %"$res19" = load ptr, ptr %res, align 8
  %8 = call ptr @_reuse_Cons(ptr %"$b17", i32 %"$i18", ptr %"$res19")
  %"$a20" = load ptr, ptr %a, align 8
  %"$nb" = load ptr, ptr %nb, align 8
  %9 = call ptr @_list_concat(ptr %"$a20", ptr %"$nb", ptr %8)
  store ptr %9, ptr %3, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.else10
  br label %if.end
}

define ptr @list_concat(ptr %0, ptr %1) {
prolog:
  %a = alloca ptr, align 8
  store ptr %0, ptr %a, align 8
  %b = alloca ptr, align 8
  store ptr %1, ptr %b, align 8
  br label %start

start:                                            ; preds = %prolog
  %2 = call ptr @_const_Nil()
  %"$a" = load ptr, ptr %a, align 8
  %"$b" = load ptr, ptr %b, align 8
  %3 = call ptr @_list_concat(ptr %"$a", ptr %"$b", ptr %2)
  ret ptr %3
}

define i32 @log_color(i32 %0) {
prolog:
  %c = alloca i32, align 4
  store i32 %0, ptr %c, align 4
  %_result = alloca ptr, align 8
  %1 = alloca i32, align 4
  %i = alloca i32, align 4
  br label %start

start:                                            ; preds = %prolog
  %"$c" = load i32, ptr %c, align 4
  %"c==1" = icmp eq i32 %"$c", 1
  br i1 %"c==1", label %if.then, label %if.else

if.then:                                          ; preds = %start
  %"$c1" = load i32, ptr %c, align 4
  %2 = call i32 (ptr, ...) @ckrt_printf(ptr @1, i32 %"$c1", ptr @0)
  %"$c2" = load i32, ptr %c, align 4
  %3 = call ptr @_const_Boolean(i32 %"$c2")
  store ptr %3, ptr %_result, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %"$_result" = load ptr, ptr %_result, align 8
  %_result.tag = getelementptr inbounds %object, ptr %"$_result", i32 0, i32 0
  %"$_result.tag" = load i32, ptr %_result.tag, align 4
  %"_result==4" = icmp eq i32 %"$_result.tag", 4
  br i1 %"_result==4", label %if.then5, label %if.end6

if.else:                                          ; preds = %start
  %"$c3" = load i32, ptr %c, align 4
  %4 = call i32 (ptr, ...) @ckrt_printf(ptr @3, i32 %"$c3", ptr @2)
  %"$c4" = load i32, ptr %c, align 4
  %5 = call ptr @_const_Boolean(i32 %"$c4")
  store ptr %5, ptr %_result, align 8
  br label %if.end

if.then5:                                         ; preds = %if.end
  %"$_result7" = load ptr, ptr %_result, align 8
  %"_result.[1]" = getelementptr inbounds %Boolean, ptr %"$_result7", i32 0, i32 1
  %"$_result.[1]" = load i32, ptr %"_result.[1]", align 4
  store i32 %"$_result.[1]", ptr %i, align 4
  %"$i" = load i32, ptr %i, align 4
  store i32 %"$i", ptr %1, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.end
  %"$" = load i32, ptr %1, align 4
  ret i32 %"$"
}

define ptr @first(ptr %0, i32 %1) {
prolog:
  %t = alloca ptr, align 8
  store ptr %0, ptr %t, align 8
  %i = alloca i32, align 4
  store i32 %1, ptr %i, align 4
  br label %start

start:                                            ; preds = %prolog
  %"$t" = load ptr, ptr %t, align 8
  ret ptr %"$t"
}

define ptr @log_node(ptr %0, i32 %1) {
prolog:
  %t = alloca ptr, align 8
  store ptr %0, ptr %t, align 8
  %level = alloca i32, align 4
  store i32 %1, ptr %level, align 4
  %2 = alloca ptr, align 8
  %c = alloca i32, align 4
  %l = alloca ptr, align 8
  %i = alloca ptr, align 8
  %v = alloca i1, align 1
  %r = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %i_val = alloca i32, align 4
  br label %start

start:                                            ; preds = %prolog
  %"$t" = load ptr, ptr %t, align 8
  %"(bool)t" = icmp ne ptr %"$t", null
  %"!(bool)t" = xor i1 %"(bool)t", true
  br i1 %"!(bool)t", label %if.then, label %if.else

if.then:                                          ; preds = %start
  %"$level" = load i32, ptr %level, align 4
  %4 = call i32 (ptr, ...) @ckrt_printf(ptr @5, i32 %"$level", ptr @4)
  %"$t1" = load ptr, ptr %t, align 8
  %"$level2" = load i32, ptr %level, align 4
  %5 = call ptr @first(ptr %"$t1", i32 %"$level2")
  %6 = call i32 (ptr, ...) @ckrt_printf(ptr @7, ptr %5, ptr @6)
  store ptr %5, ptr %2, align 8
  br label %if.end

if.end:                                           ; preds = %if.end5, %if.then
  %"$19" = load ptr, ptr %2, align 8
  ret ptr %"$19"

if.else:                                          ; preds = %start
  %"$t3" = load ptr, ptr %t, align 8
  %t.tag = getelementptr inbounds %tree, ptr %"$t3", i32 0, i32 0
  %"$t.tag" = load i32, ptr %t.tag, align 4
  %"t==6" = icmp eq i32 %"$t.tag", 6
  br i1 %"t==6", label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.else
  %"$t6" = load ptr, ptr %t, align 8
  %"t.[1]" = getelementptr inbounds %Node, ptr %"$t6", i32 0, i32 1
  %"$t.[1]" = load i32, ptr %"t.[1]", align 4
  store i32 %"$t.[1]", ptr %c, align 4
  %"$t7" = load ptr, ptr %t, align 8
  %"t.[2]" = getelementptr inbounds %Node, ptr %"$t7", i32 0, i32 2
  %"$t.[2]" = load ptr, ptr %"t.[2]", align 8
  store ptr %"$t.[2]", ptr %l, align 8
  %"$t8" = load ptr, ptr %t, align 8
  %"t.[3]" = getelementptr inbounds %Node, ptr %"$t8", i32 0, i32 3
  %"$t.[3]" = load ptr, ptr %"t.[3]", align 8
  store ptr %"$t.[3]", ptr %i, align 8
  %"$t9" = load ptr, ptr %t, align 8
  %"t.[4]" = getelementptr inbounds %Node, ptr %"$t9", i32 0, i32 4
  %"$t.[4]" = load i1, ptr %"t.[4]", align 1
  store i1 %"$t.[4]", ptr %v, align 1
  %"$t10" = load ptr, ptr %t, align 8
  %"t.[5]" = getelementptr inbounds %Node, ptr %"$t10", i32 0, i32 5
  %"$t.[5]" = load ptr, ptr %"t.[5]", align 8
  store ptr %"$t.[5]", ptr %r, align 8
  %"$i" = load ptr, ptr %i, align 8
  %i.tag = getelementptr inbounds %Integer, ptr %"$i", i32 0, i32 0
  %"$i.tag" = load i32, ptr %i.tag, align 4
  %"i==5" = icmp eq i32 %"$i.tag", 5
  br i1 %"i==5", label %if.then11, label %if.end12

if.end5:                                          ; preds = %if.end12, %if.else
  br label %if.end

if.then11:                                        ; preds = %if.then4
  %"$i13" = load ptr, ptr %i, align 8
  %"i.[1]" = getelementptr inbounds %Integer, ptr %"$i13", i32 0, i32 1
  %"$i.[1]" = load i32, ptr %"i.[1]", align 4
  store i32 %"$i.[1]", ptr %i_val, align 4
  %"$c" = load i32, ptr %c, align 4
  %7 = call i32 @log_color(i32 %"$c")
  %"$level14" = load i32, ptr %level, align 4
  %8 = call i32 (ptr, ...) @ckrt_printf(ptr @9, i32 %"$level14", ptr @8)
  %"$l" = load ptr, ptr %l, align 8
  %"$level15" = load i32, ptr %level, align 4
  %9 = call ptr @first(ptr %"$l", i32 %"$level15")
  %"$i_val" = load i32, ptr %i_val, align 4
  %10 = call i32 (ptr, ...) @ckrt_printf(ptr @11, i32 %"$i_val", ptr @10)
  %"$i16" = load ptr, ptr %i, align 8
  %"$i_val17" = load i32, ptr %i_val, align 4
  %11 = call ptr @_reuse_Integer(ptr %"$i16", i32 %"$i_val17")
  %"$t18" = load ptr, ptr %t, align 8
  %"$v" = load i1, ptr %v, align 1
  %"$r" = load ptr, ptr %r, align 8
  %12 = call ptr @_reuse_Node(ptr %"$t18", i32 %7, ptr %9, ptr %11, i1 %"$v", ptr %"$r")
  store ptr %12, ptr %3, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.then4
  %"$" = load ptr, ptr %3, align 8
  store ptr %"$", ptr %2, align 8
  br label %if.end5
}

define ptr @_traverse_tree(ptr %0, i32 %1) {
prolog:
  %t = alloca ptr, align 8
  store ptr %0, ptr %t, align 8
  %level = alloca i32, align 4
  store i32 %1, ptr %level, align 4
  %2 = alloca ptr, align 8
  %c = alloca i32, align 4
  %l = alloca ptr, align 8
  %i = alloca ptr, align 8
  %v = alloca i1, align 1
  %r = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$t" = load ptr, ptr %t, align 8
  %"(bool)t" = icmp ne ptr %"$t", null
  %"!(bool)t" = xor i1 %"(bool)t", true
  br i1 %"!(bool)t", label %if.then, label %if.else

if.then:                                          ; preds = %start
  %3 = call ptr @_const_Nil()
  %4 = call ptr @_const_Cons(i32 -1, ptr %3)
  store ptr %4, ptr %2, align 8
  br label %if.end

if.end:                                           ; preds = %if.end3, %if.then
  %"$" = load ptr, ptr %2, align 8
  ret ptr %"$"

if.else:                                          ; preds = %start
  %"$t1" = load ptr, ptr %t, align 8
  %t.tag = getelementptr inbounds %tree, ptr %"$t1", i32 0, i32 0
  %"$t.tag" = load i32, ptr %t.tag, align 4
  %"t==6" = icmp eq i32 %"$t.tag", 6
  br i1 %"t==6", label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.else
  %"$t4" = load ptr, ptr %t, align 8
  %"t.[1]" = getelementptr inbounds %Node, ptr %"$t4", i32 0, i32 1
  %"$t.[1]" = load i32, ptr %"t.[1]", align 4
  store i32 %"$t.[1]", ptr %c, align 4
  %"$t5" = load ptr, ptr %t, align 8
  %"t.[2]" = getelementptr inbounds %Node, ptr %"$t5", i32 0, i32 2
  %"$t.[2]" = load ptr, ptr %"t.[2]", align 8
  store ptr %"$t.[2]", ptr %l, align 8
  %"$t6" = load ptr, ptr %t, align 8
  %"t.[3]" = getelementptr inbounds %Node, ptr %"$t6", i32 0, i32 3
  %"$t.[3]" = load ptr, ptr %"t.[3]", align 8
  store ptr %"$t.[3]", ptr %i, align 8
  %"$t7" = load ptr, ptr %t, align 8
  %"t.[4]" = getelementptr inbounds %Node, ptr %"$t7", i32 0, i32 4
  %"$t.[4]" = load i1, ptr %"t.[4]", align 1
  store i1 %"$t.[4]", ptr %v, align 1
  %"$t8" = load ptr, ptr %t, align 8
  %"t.[5]" = getelementptr inbounds %Node, ptr %"$t8", i32 0, i32 5
  %"$t.[5]" = load ptr, ptr %"t.[5]", align 8
  store ptr %"$t.[5]", ptr %r, align 8
  %"$i" = load ptr, ptr %i, align 8
  %5 = call i32 @_int(ptr %"$i")
  %"$l" = load ptr, ptr %l, align 8
  %"$level" = load i32, ptr %level, align 4
  %6 = call ptr @log_node(ptr %"$l", i32 %"$level")
  %"$level9" = load i32, ptr %level, align 4
  %"level+1" = add i32 %"$level9", 1
  %7 = call ptr @_traverse_tree(ptr %6, i32 %"level+1")
  %"$r" = load ptr, ptr %r, align 8
  %"$level10" = load i32, ptr %level, align 4
  %8 = call ptr @log_node(ptr %"$r", i32 %"$level10")
  %"$level11" = load i32, ptr %level, align 4
  %"level+112" = add i32 %"$level11", 1
  %9 = call ptr @_traverse_tree(ptr %8, i32 %"level+112")
  %10 = call ptr @list_concat(ptr %7, ptr %9)
  %11 = call ptr @_const_Cons(i32 %5, ptr %10)
  store ptr %11, ptr %2, align 8
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.else
  br label %if.end
}

define ptr @first_tree(ptr %0, ptr %1) {
prolog:
  %t = alloca ptr, align 8
  store ptr %0, ptr %t, align 8
  %l = alloca ptr, align 8
  store ptr %1, ptr %l, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$t" = load ptr, ptr %t, align 8
  ret ptr %"$t"
}

define ptr @log_tree(ptr %0) {
prolog:
  %t = alloca ptr, align 8
  store ptr %0, ptr %t, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$t" = load ptr, ptr %t, align 8
  %1 = call ptr @log_node(ptr %"$t", i32 0)
  %2 = call ptr @_traverse_tree(ptr %1, i32 1)
  %3 = call i32 (ptr, ...) @ckrt_printf(ptr @13, ptr %2, ptr @12)
  %"$t1" = load ptr, ptr %t, align 8
  %4 = call ptr @first_tree(ptr %"$t1", ptr %2)
  ret ptr %4
}

define ptr @make_n_tree_helper(i32 %0, i32 %1, ptr %2) {
prolog:
  %n = alloca i32, align 4
  store i32 %0, ptr %n, align 4
  %cur = alloca i32, align 4
  store i32 %1, ptr %cur, align 4
  %acc = alloca ptr, align 8
  store ptr %2, ptr %acc, align 8
  %_result = alloca ptr, align 8
  br label %start

start:                                            ; preds = %prolog
  %"$n" = load i32, ptr %n, align 4
  %"$cur" = load i32, ptr %cur, align 4
  %"n<=cur" = icmp sle i32 %"$n", %"$cur"
  br i1 %"n<=cur", label %if.then, label %if.else

if.then:                                          ; preds = %start
  %"$acc" = load ptr, ptr %acc, align 8
  store ptr %"$acc", ptr %_result, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %"$_result" = load ptr, ptr %_result, align 8
  ret ptr %"$_result"

if.else:                                          ; preds = %start
  %"$cur1" = load i32, ptr %cur, align 4
  %"cur+1" = add i32 %"$cur1", 1
  %"$cur2" = load i32, ptr %cur, align 4
  %3 = call ptr @_const_Integer(i32 %"$cur2")
  %"$cur3" = load i32, ptr %cur, align 4
  %"cur%10" = srem i32 %"$cur3", 10
  %"cur%10==0" = icmp eq i32 %"cur%10", 0
  %"$acc4" = load ptr, ptr %acc, align 8
  %4 = call ptr @insert(ptr %"$acc4", ptr %3, i1 %"cur%10==0")
  %"$n5" = load i32, ptr %n, align 4
  %5 = call ptr @make_n_tree_helper(i32 %"$n5", i32 %"cur+1", ptr %4)
  store ptr %5, ptr %_result, align 8
  br label %if.end
}

define ptr @make_n_tree(i32 %0) {
prolog:
  %n = alloca i32, align 4
  store i32 %0, ptr %n, align 4
  br label %start

start:                                            ; preds = %prolog
  %1 = call ptr @_const_Leaf()
  call void @ckrt_measure_cpu_time()
  call void @ckrt_measure_cpu_time()
  %"$n" = load i32, ptr %n, align 4
  %2 = call ptr @make_n_tree_helper(i32 %"$n", i32 0, ptr %1)
  ret ptr %2
}

define i32 @finish(ptr %0) {
prolog:
  %t = alloca ptr, align 8
  store ptr %0, ptr %t, align 8
  br label %start

start:                                            ; preds = %prolog
  ret i32 0
}

define i32 @main(i32 %0, ptr %1) {
prolog:
  %argc = alloca i32, align 4
  store i32 %0, ptr %argc, align 4
  %argv = alloca ptr, align 8
  store ptr %1, ptr %argv, align 8
  br label %start

start:                                            ; preds = %prolog
  call void @ckrt_measure_cpu_time()
  %2 = call ptr @make_n_tree(i32 22379)
  %3 = call i32 (ptr, ...) @ckrt_printf(ptr @15, ptr %2, ptr @14)
  call void @ckrt_measure_cpu_time()
  %4 = call i32 @finish(ptr %2)
  ret i32 %4
}
