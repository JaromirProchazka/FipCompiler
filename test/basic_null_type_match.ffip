type elem {
    Elem(int val);
}

int _elem [type elem e] = match e -> int {
    | Elem(i) -> i
}

type list_elem {
    Nil_elem;
    Cons_elem(type elem val, type list_elem next);
}

fip type elem eval [type list_elem xs, type elem ru]
    = match! ru -> type elem { | Elem(i) -> 
        match! xs -> type elem {
            | Nil_elem      -> Elem(-2)
            | Cons_elem(x, next) -> match! next -> type elem {
                | Nil_elem          ->  Elem(-1)
                | Cons_elem(y, yy)  ->  y
            }  
        }
    }






fip int finish [type Tagged x] = 0

fip type list_elem second [type elem x, type list_elem xx] = xx

fip type list_elem second_first_int [int x, type list_elem xx] = xx

fip type Elem log_elem [type elem e] = match! e -> type Elem {
    | Elem(i)       ->  Elem(log(i, "->\n"))
}

fip type Elem log_e [type elem e] = match! e -> type Elem {
    | Elem(i)       ->  Elem(log(i, "\n"))
}

fip int _travers_list [type list_elem xs] = match xs -> int {
    | Nil_elem               -> printf("Nil\n")
    | Cons_elem(x, xx)       -> _travers_list( second( log_elem(x), xx ))
}

fip int travers_list [type list_elem xs] = _travers_list( xs )

fip type list_elem log_list [type list_elem xs] = second_first_int( travers_list(xs), xs)

type list_elem make_list [] = Cons_elem(Elem(1), Cons_elem(Elem(2), Cons_elem(Elem(3), Nil_elem)))



int main [int argc, char** argv] = finish( 
    log_e( 
        eval( 
            log_list( 
                make_list() 
            ), 
        Elem(0)
        )
    ))